<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NClap</name>
    </assembly>
    <members>
        <member name="T:NClap.ErrorReporter">
            <summary>
            A delegate used in error reporting.
            </summary>
            <param name="message">Message to report.</param>
        </member>
        <member name="T:NClap.CommandLineParser">
            <summary>
            Command-line parser.
            </summary>
        </member>
        <member name="P:NClap.CommandLineParser.DefaultReporter">
            <summary>
            Default <see cref="T:NClap.ErrorReporter" /> used by this class.
            </summary>
        </member>
        <member name="M:NClap.CommandLineParser.TryParse``1(System.Collections.Generic.IEnumerable{System.String},``0@)">
            <summary>
            Tries to parse the given string arguments into a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the destination object; this type should use
            appropriate NClap attributes to annotate and define options.</typeparam>
            <param name="arguments">The string arguments to parse.</param>
            <param name="result">On success, returns the constructed result object.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.CommandLineParser.TryParse``1(System.Collections.Generic.IEnumerable{System.String},NClap.CommandLineParserOptions,``0@)">
            <summary>
            Tries to parse the given string arguments into a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the destination object; this type should use
            appropriate NClap attributes to annotate and define options.</typeparam>
            <param name="arguments">The string arguments to parse.</param>
            <param name="options">Options describing how to parse.</param>
            <param name="result">On success, returns the constructed result object.</param>
            <returns>True on success; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="arguments"/>
            is null.</exception>
        </member>
        <member name="M:NClap.CommandLineParser.TryParse``1(System.Collections.Generic.IEnumerable{System.String},``0,NClap.CommandLineParserOptions)">
            <summary>
            Tries to parse the given string arguments into the provided instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the destination object; this type should use
            appropriate NClap attributes to annotate and define options.</typeparam>
            <param name="arguments">The string arguments to parse.</param>
            <param name="destination">The object to parse into.</param>
            <param name="options">Options describing how to parse.</param>
            <returns>True on success; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="arguments"/> or
            <paramref name="destination" /> is null.</exception>
        </member>
        <member name="M:NClap.CommandLineParser.TryParse``1(NClap.Parser.ArgumentSetDefinition,System.Collections.Generic.IEnumerable{System.String},NClap.CommandLineParserOptions,``0)">
            <summary>
            Tries to parse the given string arguments into the provided instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the destination object.</typeparam>
            <param name="argSet">Definition of the argument set to be parsing.</param>
            <param name="arguments">The string arguments to parse.</param>
            <param name="options">Options describing how to parse.</param>
            <param name="destination">The object to parse into.</param>
            <returns>True on success; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="arguments"/> or
            <paramref name="destination" /> is null.</exception>
        </member>
        <member name="M:NClap.CommandLineParser.Format``1(``0)">
            <summary>
            Formats a parsed set of arguments back into tokenized string form.
            </summary>
            <typeparam name="T">Type of the parsed arguments object.</typeparam>
            <param name="value">The parsed argument set.</param>
            <returns>The tokenized string.</returns>
        </member>
        <member name="M:NClap.CommandLineParser.Format``1(``0,NClap.CommandLineParserOptions)">
            <summary>
            Formats a parsed set of arguments back into tokenized string form.
            </summary>
            <typeparam name="T">Type of the parsed arguments object.</typeparam>
            <param name="value">The parsed argument set.</param>
            <param name="options">Optionally provides parser options.</param>
            <returns>The tokenized string.</returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetUsageInfo(System.Type,NClap.Help.ArgumentSetHelpOptions,System.Object,NClap.ServiceConfigurer)">
            <summary>
            Returns a usage string for command line argument parsing. Use
            argument attributes to control parsing behavior.
            </summary>
            <param name="type">Type of the parsed arguments object.</param>
            <param name="options">Options for generating usage info.</param>
            <param name="defaultValues">Optionally provides an object with
            default values.</param>
            <param name="serviceConfigurer">Optionally provides a service
            configurer to use.</param>
            <returns>Printable string containing a user friendly description of
            command line arguments.</returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetLogo">
            <summary>
            Generates a logo string for the application's entry assembly, or
            the assembly containing this method if no entry assembly could
            be found.
            </summary>
            <returns>The logo string.</returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetCompletions(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Generate possible completions for the specified set of command-line
            tokens.
            </summary>
            <param name="type">Type of the parsed arguments object.</param>
            <param name="tokens">The tokens.</param>
            <param name="indexOfTokenToComplete">Index of the token to complete.
            </param>
            <returns>The candidate completions for the specified token.
            </returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetCompletions(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Int32,NClap.CommandLineParserOptions)">
            <summary>
            Generate possible completions for the specified set of command-line
            tokens.
            </summary>
            <param name="type">Type of the parsed arguments object.</param>
            <param name="tokens">The tokens.</param>
            <param name="indexOfTokenToComplete">Index of the token to complete.
            </param>
            <param name="options">Parsing options.</param>
            <returns>The candidate completions for the specified token.
            </returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetCompletions(System.Type,System.String,System.Int32)">
            <summary>
            Generate possible completions for the specified command line.
            </summary>
            <param name="type">Type of the parsed arguments object.</param>
            <param name="commandLineToComplete">The command line to complete.</param>
            <param name="charIndexOfCursor">Character index of the completion cursor.
            </param>
            <returns>The candidate completions for the specified token.
            </returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetCompletions(System.Type,System.String,System.Int32,System.Int32,NClap.CommandLineParserOptions)">
            <summary>
            Generate possible completions for the specified command line.
            </summary>
            <param name="type">Type of the parsed arguments object.</param>
            <param name="commandLineToComplete">The command line to complete. Both single and double quote
            characters are interpreted as denoting single tokens that may contain embedded whitespace.</param>
            <param name="charIndexOfCursor">Character index of the completion cursor.
            </param>
            <param name="tokensToSkip">Number of tokens to skip from start of command
            line.</param>
            <param name="options">Parsing options.</param>
            <returns>The candidate completions for the specified token.
            </returns>
        </member>
        <member name="M:NClap.CommandLineParser.GetCompletions(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Int32,NClap.CommandLineParserOptions,System.Func{System.Object})">
            <summary>
            Generate possible completions for the specified set of command-line
            tokens.
            </summary>
            <param name="type">Type of the parsed arguments object.</param>
            <param name="tokens">The tokens.</param>
            <param name="indexOfTokenToComplete">Index of the token to complete.
            </param>
            <param name="options">Parsing options.</param>
            <param name="destObjectFactory">If non-null, provides a factory
            function that can be used to create an object suitable to being
            filled out by this parser instance.</param>
            <returns>The candidate completions for the specified token.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type"/>
            or <paramref name="tokens"/> is null.</exception>
        </member>
        <member name="M:NClap.CommandLineParser.GetCompletions(NClap.Parser.ArgumentSetDefinition,System.Collections.Generic.IEnumerable{System.String},System.Int32,NClap.CommandLineParserOptions,System.Func{System.Object})">
            <summary>
            Generate possible completions for the specified set of command-line
            tokens.
            </summary>
            <param name="argSet">Argument set definition.</param>
            <param name="tokens">The tokens.</param>
            <param name="indexOfTokenToComplete">Index of the token to complete.
            </param>
            <param name="options">Parsing options.</param>
            <param name="destObjectFactory">If non-null, provides a factory
            function that can be used to create an object suitable to being
            filled out by this parser instance.</param>
            <returns>The candidate completions for the specified token.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="argSet"/>
            or <paramref name="tokens"/> is null.</exception>
        </member>
        <member name="M:NClap.CommandLineParser.GetUsageInfo(NClap.Parser.ArgumentSetDefinition,NClap.Help.ArgumentSetHelpOptions,System.Object)">
            <summary>
            Returns a usage string for command line argument parsing.
            </summary>
            <param name="argSet">Definition of argument set.</param>
            <param name="options">Options for generating usage info.</param>
            <param name="destination">Optionally provides an object with
            default values.</param>
            <returns>Printable string containing a user friendly description of
            command line arguments.</returns>
        </member>
        <member name="T:NClap.ServiceConfigurer">
            <summary>
            Delegate type for a method that configures a service collection.
            </summary>
            <param name="serviceCollection">Service collection to be configured.</param>
        </member>
        <member name="T:NClap.CommandLineParserOptions">
            <summary>
            Set of options for command-line parsing operations.
            </summary>
        </member>
        <member name="M:NClap.CommandLineParserOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.CommandLineParserOptions.#ctor(NClap.CommandLineParserOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.CommandLineParserOptions.DisplayUsageInfoOnError">
            <summary>
            True to display usage info on parse error; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.CommandLineParserOptions.HelpOptions">
            <summary>
            Specifies which options to use when generating (and displaying)
            help for the argument set being parsed.
            </summary>
        </member>
        <member name="P:NClap.CommandLineParserOptions.Reporter">
            <summary>
            Function to invoke when reporting errors. Defaults to a basic
            reporter that displays errors to the console.
            </summary>
        </member>
        <member name="P:NClap.CommandLineParserOptions.FileSystemReader">
            <summary>
            File system reader to use.
            </summary>
        </member>
        <member name="P:NClap.CommandLineParserOptions.Context">
            <summary>
            Arbitrary context object to be made available in created instances
            of the <see cref="T:NClap.Types.ArgumentParseContext" /> type.
            </summary>
        </member>
        <member name="P:NClap.CommandLineParserOptions.ServiceConfigurer">
            <summary>
            Optionally provides an action invoked to configure the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            associated with these options.
            </summary>
        </member>
        <member name="M:NClap.CommandLineParserOptions.DeepClone">
            <summary>
            Duplicates the options.
            </summary>
            <returns>The duplicate.</returns>
        </member>
        <member name="M:NClap.CommandLineParserOptions.Quiet">
            <summary>
            Constructs a new set of options intended for quiet operation (i.e. no
            console output).
            </summary>
            <returns>The options.</returns>
        </member>
        <member name="T:NClap.CommandLineParserOptionsExtensions">
            <summary>
            Extension methods for <see cref="T:NClap.CommandLineParserOptions" />.
            </summary>
        </member>
        <member name="M:NClap.CommandLineParserOptionsExtensions.TryParse``1(NClap.CommandLineParserOptions,System.Collections.Generic.IEnumerable{System.String},``0@)">
            <summary>
            Tries to parse the given string arguments into a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the destination object; this type should use
            appropriate NClap attributes to annotate and define options.</typeparam>
            <param name="options">Options describing how to parse.</param>
            <param name="arguments">The string arguments to parse.</param>
            <param name="result">On success, returns the constructed result object.</param>
            <returns>True on success; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="arguments"/>
            is null.</exception>
        </member>
        <member name="M:NClap.CommandLineParserOptionsExtensions.With(NClap.CommandLineParserOptions)">
            <summary>
            Construct a fluent builder from options.
            </summary>
            <param name="options">Options.</param>
            <returns>Fluent builder.</returns>
        </member>
        <member name="M:NClap.CommandLineParserOptionsExtensions.Quiet(NClap.Utilities.FluentBuilder{NClap.CommandLineParserOptions})">
            <summary>
            Quiets the parser with default options (suppressing errors and reporting).
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.CommandLineParserOptionsExtensions.ConfigureServices(NClap.Utilities.FluentBuilder{NClap.CommandLineParserOptions},NClap.ServiceConfigurer)">
            <summary>
            Provides a <see cref="T:System.Action"/> to configure services within the options.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="configurer">Service configurer action.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.BasicConsole">
            <summary>
            Stock implementation of the IConsoleInput and IConsoleOutput interfaces.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.#ctor">
            <summary>
            Dummy constructor, present to prevent outside callers from
            constructing an instance of this class.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.Default">
            <summary>
            Public factory method.
            </summary>
            <returns>A basic console instance.</returns>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.BaseInstance">
            <summary>
            For testing purposes, exposes a base instance implementation of the
            console, independent of the running OS platform.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.CursorSize">
            <summary>
            The size of the cursor, expressed as an integral percentage.
            Note that this property is not faithfully or completely implemented
            on all platforms.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.CursorVisible">
            <summary>
            True if the cursor is visible; false otherwise. Note that this
            property is not faithfully or completely implemented on all
            platforms.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.TreatControlCAsInput">
            <summary>
            True if Control-C is treated as a normal input character; false if
            it's specially handled.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.CursorLeft">
            <summary>
            The x-coordinate of the input cursor.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.CursorTop">
            <summary>
            The y-coordinate of the input cursor.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.WindowWidth">
            <summary>
            The width, in characters, of the window associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.WindowHeight">
            <summary>
            The width, in height, of the window associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.BufferWidth">
            <summary>
            The width, in characters, of the logical buffer associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.BufferHeight">
            <summary>
            The height, in characters, of the logical buffer associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.ForegroundColor">
            <summary>
            The console's foreground color.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.BackgroundColor">
            <summary>
            The console's background color.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.ReadKey(System.Boolean)">
            <summary>
            Reads a key press from the console.
            </summary>
            <param name="suppressEcho">True to suppress auto-echoing the key's
            character; false to echo it as normal.</param>
            <returns>Info about the press.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="left">The new x-coordinate.</param>
            <param name="top">The new y-coordinate.</param>
            <returns>True if the move could be made; false if the requested
            move was invalid.</returns>
        </member>
        <member name="P:NClap.ConsoleInput.BasicConsole.IsScrollable">
            <summary>
            Indicates if the console's buffer is scrollable.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.ScrollContents(System.Int32)">
            <summary>
            Scrolls the bottom-most lines of the console's buffer upward within
            the buffer by the specified number of lines, effectively freeing up
            the specified number of lines.  The cursor is adjusted appropriately
            upward by the same number of lines.
            </summary>
            <param name="lineCount">The number of lines by which to scroll the
            contents.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an internal error
            occurs.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when scrolling is not
            supported.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.Clear">
            <summary>
            Clears the console and moves the cursor to the top-left corner.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.Write(NClap.Utilities.ColoredMultistring)">
            <summary>
            Writes colored text to the console.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.Write(NClap.Utilities.ColoredString)">
            <summary>
            Writes colored text to the console.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.Write(System.String)">
            <summary>
            Writes text to the console.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:NClap.ConsoleInput.BasicConsole.WriteLine(System.String)">
            <summary>
            Writes a line of text to the console.
            </summary>
            <param name="text">The line of text to write.</param>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleHistory">
            <summary>
            Encapsulates management of console command history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleHistory.#ctor">
            <summary>
            Default constructor, which creates a console history without a bound
            on its entries.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleHistory.#ctor(System.Nullable{System.Int32})">
            <summary>
            Basic constructor that allows specifying a maximum entry count.
            </summary>
            <param name="maxEntryCount">Maximum entry count.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when
            <paramref name="maxEntryCount" /> is 0 or negative.</exception>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleHistory.MaxEntryCount">
            <summary>
            The maximum entry count, or null to indicate there is no maximum.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleHistory.EntryCount">
            <summary>
            The count of entries in the history.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleHistory.CurrentEntry">
            <summary>
            If the cursor is valid, the current entry in the history; null
            otherwise.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleHistory.Add(System.String)">
            <summary>
            Add a new entry to the end of the history, and reset the history's
            cursor to that new entry.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleHistory.MoveCursor(System.Int32)">
            <summary>
            Move the current history cursor by the specified offset.
            </summary>
            <param name="offset">Positive or negative offset to apply to the
            current cursor.</param>
            <returns>True on success; false if the move could not be made.
            </returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleHistory.MoveCursor(System.IO.SeekOrigin,System.Int32)">
            <summary>
            Move the current history cursor by the specified offset.
            </summary>
            <param name="origin">Reference for movement.</param>
            <param name="offset">Positive or negative offset to apply to the
            specified origin.</param>
            <returns>True on success; false if the move could not be made.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="origin"/>
            is not a valid origin value.</exception>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleInputBuffer">
            <summary>
            Encapsulates the state of a console input line buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleInputBuffer.Contents">
            <summary>
            The current string contents of the entire buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleInputBuffer.CursorIndex">
            <summary>
            The current cursor index.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleInputBuffer.Length">
            <summary>
            The current length of the buffer's contents.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleInputBuffer.CursorIsAtEnd">
            <summary>
            True if the cursor is pointing at the end of the buffer; false
            otherwise.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleInputBuffer.Item(System.Int32)">
            <summary>
            Reads a character from the specified index of the buffer.
            </summary>
            <param name="i">The index.</param>
            <returns>The character.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.ToString">
            <summary>
            Retrieves the contents of the buffer.
            </summary>
            <returns>The contents as a string.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.MoveCursor(System.IO.SeekOrigin,System.Int32)">
            <summary>
            Move the cursor.
            </summary>
            <param name="origin">Which origin to use for calculating the new
            cursor position.</param>
            <param name="offsetFromOrigin">The offset to apply,
            relative to the specified origin.</param>
            <returns>True on success; false if the movement could not be made.
            </returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.MoveCursor(System.IO.SeekOrigin,System.Int32,System.Int32@)">
            <summary>
            Move the cursor.
            </summary>
            <param name="origin">Which origin to use for calculating the new
            cursor position.</param>
            <param name="offsetFromOrigin">The offset to apply,
            relative to the specified origin.</param>
            <param name="offsetFromPreviousPosition">On success, receives the
            resulting offset moved from the previous position.</param>
            <returns>True on success; false if the movement could not be made.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="origin"/>
            is not a valid origin value.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Read(System.Int32)">
            <summary>
            Read the specified number of characters from the buffer, starting
            at the cursor.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>The read characters.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.ReadAt(System.Int32,System.Int32)">
            <summary>
            Read the specified number of characters from the buffer, starting
            at the specified offset into the buffer.
            </summary>
            <param name="sourceIndex">The offset into the buffer at which
            to start reading.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The read characters.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.ReadAt(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Read the specified number of characters from the buffer, starting
            at the specified offset into the buffer and writing to the specified
            offset in the destination buffer.
            </summary>
            <param name="sourceIndex">The offset into the buffer at which
            to start reading.</param>
            <param name="buffer">The buffer to write the characters to.</param>
            <param name="destinationIndex">The index in the destination buffer
            at which to start writing.</param>
            <param name="count">The number of characters to read.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="buffer"/>
            is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when indicated
            range would require reading past the end of the the input buffer or
            writing past the end of the provided output buffer.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Clear">
            <summary>
            Clears the entire buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Truncate">
            <summary>
            Remove all characters under or after the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Insert(System.Char)">
            <summary>
            Inserts a character at the cursor without moving the cursor.
            </summary>
            <param name="value">Character to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Insert(System.String)">
            <summary>
            Inserts a string at the cursor without moving the cursor.
            </summary>
            <param name="value">String to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Replace(System.Char)">
            <summary>
            Replaces the character under the cursor with the specified
            character.
            </summary>
            <param name="value">Replacement character.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Replace(System.String)">
            <summary>
            Replaces characters starting at the one under the cursor with the
            characters in the specified string.  An exception is thrown if
            the string value provided contains more characters than fit in the
            remainder of the string.
            </summary>
            <param name="value">Replacement string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Remove">
            <summary>
            Removes the character under the cursor.
            </summary>
            <returns>True on success; false if the cursor was at the end of the
            buffer.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.Remove(System.Int32)">
            <summary>
            Removes the specified number of characters from the buffer, starting
            with the character under the cursor.  The cursor's location is not
            affected by this operation.
            </summary>
            <param name="count">The number of characters to remove.</param>
            <returns>True on success; false if the characters could not be
            removed.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleInputBuffer.RemoveCharBeforeCursor">
            <summary>
            Removes the character before the cursor, and moves the cursor
            appropriately.
            </summary>
            <returns>True on success; false if the cursor was at the beginning
            of the buffer.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleInputOperation">
            <summary>
            Type of a console input operation.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.NoOp">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ProcessCharacter">
            <summary>
            Process a character.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.AcceptLine">
            <summary>
            Terminate (and accept) the current line of input.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.EndOfFile">
            <summary>
            Terminate the current input stream.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.BeginningOfLine">
            <summary>
            Move the input cursor to the beginning of the input line.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.EndOfLine">
            <summary>
            Move the input cursor to the end of the input line.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ForwardChar">
            <summary>
            Move the input cursor forward by one character.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.BackwardChar">
            <summary>
            Move the input cursor backward by one character.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ClearScreen">
            <summary>
            Clear the output screen without clearing the input line.  The input
            line should be re-displayed after the clearing.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.PreviousHistory">
            <summary>
            Replace the contents of the current input buffer with the previous
            line in the input history.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.NextHistory">
            <summary>
            Replace the contents of the current input buffer with the next
            line in the input history.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.KillLine">
            <summary>
            Cut the contents of the input buffer, starting from and including
            the character under the cursor, placing the removed contents in the
            implicit copy/paste buffer.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.UnixWordRubout">
            <summary>
            Delete the previous word from the input line.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.Yank">
            <summary>
            Paste the current contents of the copy/paste buffer at the input
            cursor.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.Abort">
            <summary>
            Cancel the current input line without clearing it, and re-display
            the input prompt.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ForwardWord">
            <summary>
            Move the cursor forward to the beginning of the next word.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.BackwardWord">
            <summary>
            Move the cursor forward to the beginning of the previous word.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.BeginningOfHistory">
            <summary>
            Replace the contents of the current input buffer with the oldest
            line in the input history.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.EndOfHistory">
            <summary>
            Replace the contents of the current input buffer with the youngest
            line in the input history.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.UpcaseWord">
            <summary>
            Replace the remainder of the current word, starting from and
            including the character under the input cursor, with its upcased
            counterpart.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.DowncaseWord">
            <summary>
            Replace the remainder of the current word, starting from and
            including the character under the input cursor, with its downcased
            counterpart.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.CapitalizeWord">
            <summary>
            Replace the remainder of the current word, starting from and
            including the character under the input cursor, with its capitalized
            counterpart.  Only the first non-whitespace character should be
            upcased; all other characters should be downcased.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.KillWord">
            <summary>
            Delete the current word from the input buffer.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.PossibleCompletions">
            <summary>
            Display all possible completions of the current token.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.InsertCompletions">
            <summary>
            Replace the current token with a whitespace-separated list of
            completions for the current token.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.RevertLine">
            <summary>
            Clear the input line.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.InsertComment">
            <summary>
            Prepend the current input line with an end-of-line comment
            character and cancel the current input line (without clearing it).
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.TabInsert">
            <summary>
            Insert a tab character at the cursor.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.BackwardKillWord">
            <summary>
            Delete the previous word from the input line.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.CompleteTokenNext">
            <summary>
            Replace the current token with the next available completion for it.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.CompleteTokenPrevious">
            <summary>
            Replace the current token with the previous completion for it.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.DeletePreviousChar">
            <summary>
            Delete the character before the input cursor.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.DeleteChar">
            <summary>
            Delete the character under the input cursor.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ToggleInsertMode">
            <summary>
            Toggle the insert mode.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ReverseSearchHistory">
            <summary>
            Prompt for a search term and replace the current input line with
            the previous line in history containing the term.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.ForwardSearchHistory">
            <summary>
            Prompt for a search term and replace the current input line with
            the next line in history containing the term.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.QuotedInsert">
            <summary>
            Prompt for another keystroke and insert the quoted version of that
            keystroke at the input cursor.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.TransposeChars">
            <summary>
            Transpose the character before the cursor and the character after
            the cursor, and move the cursor forward by one character.  If the
            cursor is at the end of the input line, then instead transpose the
            two characters before the cursor.  If the cursor is at the beginning
            of the input line, then do nothing.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.UnixLineDiscard">
            <summary>
            Discard the contents of the input line.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.Undo">
            <summary>
            Undo the last change to the input buffer.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.SetMark">
            <summary>
            Set mark.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.CharacterSearch">
            <summary>
            Search for a character.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.YankLastArg">
            <summary>
            Yank the last arg.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.NonIncrementalReverseSearchHistory">
            <summary>
            Perform a non-incremental reverse search through history.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.NonIncrementalForwardSearchHistory">
            <summary>
            Perform a non-incremental forward search through history.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.YankPop">
            <summary>
            Yank pop.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.TildeExpand">
            <summary>
            Tilde-expand the buffer.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.YankNthArg">
            <summary>
            Yank the Nth argument.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperation.CharacterSearchBackward">
            <summary>
            Search for a character backwards.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleInputOperationResult">
            <summary>
            The result of processing a console input operation.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperationResult.Normal">
            <summary>
            The operation was handled, but more input is available.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperationResult.EndOfInputLine">
            <summary>
            The event was handled, and the end of the input line was reached.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.ConsoleInputOperationResult.EndOfInputStream">
            <summary>
            The event was handled, and the end of the input stream was reached.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleKeyBindingSet">
            <summary>
            Represents a console key binding set.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.#ctor">
            <summary>
            Constructs an empty key binding set.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleKeyBindingSet.Default">
            <summary>
            Default bindings.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.CreateDefaultSet">
            <summary>
            Creates a new <see cref="T:NClap.ConsoleInput.ConsoleKeyBindingSet"/> populated with
            defaults.
            </summary>
            <returns>The new set.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate the contents of the binding set.
            </summary>
            <returns>The enumeration.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#ConsoleKeyInfo,NClap#ConsoleInput#ConsoleInputOperation}}#GetEnumerator">
            <summary>
            Enumerate the contents of the binding set.
            </summary>
            <returns>The enumeration.</returns>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleKeyBindingSet.Count">
            <summary>
            The number of operations bound in it.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleKeyBindingSet.Item(System.ConsoleKeyInfo)">
            <summary>
            Retrieves the operation the key is mapped to.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The operation.</returns>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleKeyBindingSet.Keys">
            <summary>
            Enumerates all keys bound within this binding set.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleKeyBindingSet.Values">
            <summary>
            Enumerates all operations bound within this binding set.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.ContainsKey(System.ConsoleKeyInfo)">
            <summary>
            Checks if the specified key is bound.
            </summary>
            <param name="key">The key.</param>
            <returns>True if the key is bound; false otherwise.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.GetValue(System.ConsoleKeyInfo)">
            <summary>
            Find the operation mapped to the specified key press.
            </summary>
            <param name="key">The key info.</param>
            <returns>The mapped operation; throws an exception if the key press is
            not mapped.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key press
            is not mapped.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.TryGetValue(System.ConsoleKeyInfo,NClap.ConsoleInput.ConsoleInputOperation@)">
            <summary>
            Try to find the operation mapped to the specified key press.
            </summary>
            <param name="key">The key info.</param>
            <param name="value">On success, receives the mapped operation.</param>
            <returns>True if the key press is mapped; false otherwise.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.Bind(System.Char,System.ConsoleModifiers,System.Nullable{NClap.ConsoleInput.ConsoleInputOperation})">
            <summary>
            Bind the specified character (with the specified modifiers) to the
            indicated operation.
            </summary>
            <param name="value">The character.</param>
            <param name="modifiers">The modifiers for the character.</param>
            <param name="op">If non-null, the operation to bind the character
            to; otherwise, unbinds the character.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.Bind(System.ConsoleKey,System.ConsoleModifiers,System.Nullable{NClap.ConsoleInput.ConsoleInputOperation})">
            <summary>
            Bind the specified key (with the specified modifiers) to the
            indicated operation.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers for the character.</param>
            <param name="op">If non-null, the operation to bind the key
            to; otherwise, unbinds the key.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleKeyBindingSet.BindWithIgnoredModifiers(System.ConsoleKey,System.Nullable{NClap.ConsoleInput.ConsoleInputOperation})">
            <summary>
            Binds the specified key (with *any* combination of modifiers) to
            the indicated operation.  Note that this is different from binding
            the use of a key with *no* modifiers.
            </summary>
            <param name="key">The key.</param>
            <param name="op">If non-null, the operation to bind the key
            to; otherwise, unbinds the key.</param>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleLineInput">
            <summary>
            Encapsulates logic for advanced console line input.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.#ctor(NClap.ConsoleInput.IConsoleOutput,NClap.ConsoleInput.IConsoleInputBuffer,NClap.ConsoleInput.IConsoleHistory)">
            <summary>
            Basic constructor.
            </summary>
            <param name="consoleOutput">Interface for interacting with the output
            console.</param>
            <param name="buffer">Console input buffer to use.</param>
            <param name="history">Console history object to use.</param>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.ConsoleOutput">
            <summary>
            The object's output console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.TokenCompleter">
            <summary>
            The object's token completion handler.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.History">
            <summary>
            The object's history.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.Buffer">
            <summary>
            The object's buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.InsertMode">
            <summary>
            True if insertion mode is enabled; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.Prompt">
            <summary>
            The string to be displayed when prompting for input.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.Contents">
            <summary>
            The current contents of the buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.PasteBuffer">
            <summary>
            The current contents of the paste buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleLineInput.AtEnd">
            <summary>
            True if the cursor is at the end of the buffer; false otherwise.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.MoveCursorBackward(System.Int32)">
            <summary>
            Move the cursor backward by the specified number of characters.
            </summary>
            <param name="count">Number of characters to move backward.</param>
            <returns>True if the move could be made; false if the requested move
            was invalid.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.MoveCursorForward(System.Int32)">
            <summary>
            Move the cursor forward by the specified number of characters.
            </summary>
            <param name="count">Number of characters to move forward.</param>
            <returns>True if the move could be made; false if the requested move
            was invalid.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.MoveCursorToStart">
            <summary>
            Move the cursor to the start of the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.MoveCursorToEnd">
            <summary>
            Move the cursor to the end of the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.MoveCursorBackwardOneWord">
            <summary>
            Move the cursor back one word.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.MoveCursorForwardOneWord">
            <summary>
            Move the cursor forward one word.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.Delete">
            <summary>
            Delete the character under the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.DeletePrecedingChar">
            <summary>
            Delete the character before the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.DeleteBackwardThroughLastWord">
            <summary>
            Delete the characters from the beginning of the last word in the
            buffer and the current cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.DeleteForwardToNextWord">
            <summary>
            Delete the characters from the current cursor up to, but not
            including, the start of the next word.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ClearLine(System.Boolean)">
            <summary>
            Clear the input buffer and reset the cursor to the beginning of the
            buffer.
            </summary>
            <param name="clearBufferOnly">True to clear the buffer only; false
            to clear the buffer and reset the cursor.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ClearScreen">
            <summary>
            Clear the screen buffer, and redisplay the prompt and current
            contents of the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.Insert(System.Char)">
            <summary>
            Insert a character at the cursor without moving the cursor.
            </summary>
            <param name="value">The character to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.Insert(System.String)">
            <summary>
            Insert a string at the cursor without moving the cursor.
            </summary>
            <param name="value">The string to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.Replace(System.Char)">
            <summary>
            Replace the character under the cursor.
            </summary>
            <param name="value">The character to place.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceWithLastLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the previous
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceWithNextLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the next
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceWithOldestLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the oldest
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceWithYoungestLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the youngest
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.SaveToHistory">
            <summary>
            Save the contents of the current buffer to the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.CutToEnd">
            <summary>
            Remove the contents of the buffer from the cursor to the end of the
            buffer, and place them in the paste buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.Paste">
            <summary>
            Insert the contents of the paste buffer at the cursor and move the
            cursor to the end of the pasted characters.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceCurrentTokenWithPreviousCompletion(System.Boolean)">
            <summary>
            Replace the current token in the input buffer with the previous
            completion.
            </summary>
            <param name="lastOperationWasCompletion">True if the last input
            operation was a completion operation; false otherwise.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceCurrentTokenWithNextCompletion(System.Boolean)">
            <summary>
            Replace the current token in the input buffer with the next
            completion.
            </summary>
            <param name="lastOperationWasCompletion">True if the last input
            operation was a completion operation; false otherwise.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.ReplaceCurrentTokenWithAllCompletions">
            <summary>
            Replace the current token in the input buffer with all possible
            completions for it.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.DisplayAllCompletions">
            <summary>
            Displays all completions without modifying the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.TransformCurrentWord(System.Func{System.String,System.String})">
            <summary>
            Transforms the current word by passing it through the provided
            function.  Does not move the cursor.
            </summary>
            <param name="transformation">Function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="transformation" />
            is null.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.DisplayPrompt">
            <summary>
            Displays the input prompt.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleLineInput.DisplayInColumns(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Displays the given list of values in columnar form.
            </summary>
            <param name="values">Values to display.</param>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleReader">
            <summary>
            Encapsulates logic for an advanced console reader.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleReader.#ctor(NClap.ConsoleInput.IConsoleLineInput,NClap.ConsoleInput.IConsoleInput,NClap.ConsoleInput.IConsoleOutput,NClap.ConsoleInput.IReadOnlyConsoleKeyBindingSet)">
            <summary>
            Primary constructor.
            </summary>
            <param name="lineInput">Line input engine.</param>
            <param name="consoleInput">Interface for interacting with the input
            console; a default implementation is used if this parameter is null.
            </param>
            <param name="consoleOutput">Interface for interacting with the output
            console; a default implementation is used if this parameter is null.
            </param>
            <param name="keyBindingSet">The key bindings to use in the reader.
            Default bindings are used if this parameter is null.</param>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleReader.ConsoleInput">
            <summary>
            The console being used for input.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleReader.ConsoleOutput">
            <summary>
            The console being used for output.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleReader.LineInput">
            <summary>
            The inner line input object.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleReader.KeyBindingSet">
            <summary>
            The console key bindings used by this console reader.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleReader.CommentCharacter">
            <summary>
            The beginning-of-line comment character.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleReader.ReadLine">
            <summary>
            Reads a line of input text from the underlying console.
            </summary>
            <returns>The line of text, or null if the end of input was
            encountered.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleReader.ProcessKey(System.ConsoleKeyInfo)">
            <summary>
            Interprets the given key press info by mapping it to an operation
            and applying that operation.
            </summary>
            <param name="key">Key press info.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleReader.Process(NClap.ConsoleInput.ConsoleInputOperation,System.ConsoleKeyInfo)">
            <summary>
            Applies the given console input operation.
            </summary>
            <param name="op">Operation.</param>
            <param name="key">Key press info.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleReader.Capitalize(System.String)">
            <summary>
            Capitalizes the initial character of the given string.
            </summary>
            <param name="value">Input value.</param>
            <returns>Capitalized result string.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleStatusBar">
            <summary>
            Console status bar, used only for internal testing.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleStatusBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleStatusBar.Append(System.String)">
            <summary>
            Append the given value to the current contents.
            </summary>
            <param name="value">Value to append.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleStatusBar.Set(System.String)">
            <summary>
            Stores the given value in the bar.
            </summary>
            <param name="value">Value to store.</param>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleStatusBar.Reset">
            <summary>
            Resets the contents of the status bar.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.ConsoleStatusBar.Enabled">
            <summary>
            Whether or not the status bar is enabled.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.ConsoleUtilities">
            <summary>
            Assorted console utilities exported for use outside this assembly.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ConsoleUtilities.ReadLine">
            <summary>
            Reads a line of input from the console.
            </summary>
            <returns>The read string.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.IConsoleHistory">
            <summary>
            Abstract interface for managing console history.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleHistory.EntryCount">
            <summary>
            The count of entries in the history.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleHistory.CurrentEntry">
            <summary>
            If the cursor is valid, the current entry in the history; null
            otherwise.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleHistory.Add(System.String)">
            <summary>
            Add a new entry to the end of the history, and reset the history's
            cursor to that new entry.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleHistory.MoveCursor(System.IO.SeekOrigin,System.Int32)">
            <summary>
            Move the current history cursor by the specified offset.
            </summary>
            <param name="origin">Reference for movement.</param>
            <param name="offset">Positive or negative offset to apply to the
            specified origin.</param>
            <returns>True on success; false if the move could not be made.
            </returns>
        </member>
        <member name="T:NClap.ConsoleInput.IConsoleInput">
            <summary>
            Abstract interface for interacting with an input console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleInput.TreatControlCAsInput">
            <summary>
            True if Control-C is treated as a normal input character; false if
            it's specially handled.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInput.ReadKey(System.Boolean)">
            <summary>
            Reads a key press from the console.
            </summary>
            <param name="suppressEcho">True to suppress auto-echoing the key's
            character; false to echo it as normal.</param>
            <returns>Info about the press.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.IConsoleInputBuffer">
            <summary>
            Abstract interface for interacting with a console input buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleInputBuffer.Contents">
            <summary>
            The current string contents of the entire buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleInputBuffer.CursorIndex">
            <summary>
            The current cursor index.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleInputBuffer.Length">
            <summary>
            The current length of the buffer's contents.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleInputBuffer.CursorIsAtEnd">
            <summary>
            True if the cursor is pointing at the end of the buffer; false
            otherwise.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleInputBuffer.Item(System.Int32)">
            <summary>
            Reads a character from the specified index of the buffer.
            </summary>
            <param name="index">The index.</param>
            <returns>The character.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.MoveCursor(System.IO.SeekOrigin,System.Int32)">
            <summary>
            Move the cursor.
            </summary>
            <param name="origin">Which origin to use for calculating the new
            cursor position.</param>
            <param name="offsetFromOrigin">The offset to apply,
            relative to the specified origin.</param>
            <returns>True on success; false if the movement could not be made.
            </returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.MoveCursor(System.IO.SeekOrigin,System.Int32,System.Int32@)">
            <summary>
            Move the cursor.
            </summary>
            <param name="origin">Which origin to use for calculating the new
            cursor position.</param>
            <param name="offsetFromOrigin">The offset to apply,
            relative to the specified origin.</param>
            <param name="offsetFromPreviousPosition">On success, receives the
            resulting offset moved from the previous position.</param>
            <returns>True on success; false if the movement could not be made.
            </returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Read(System.Int32)">
            <summary>
            Read the specified number of characters from the buffer, starting
            at the cursor.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>The read characters.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.ReadAt(System.Int32,System.Int32)">
            <summary>
            Read the specified number of characters from the buffer, starting
            at the specified offset into the buffer.
            </summary>
            <param name="sourceIndex">The offset into the buffer at which
            to start reading.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The read characters.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.ReadAt(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Read the specified number of characters from the buffer, starting
            at the specified offset into the buffer and writing to the specified
            offset in the destination buffer.
            </summary>
            <param name="sourceIndex">The offset into the buffer at which
            to start reading.</param>
            <param name="buffer">The buffer to write the characters to.</param>
            <param name="destinationIndex">The index in the destination buffer
            at which to start writing.</param>
            <param name="count">The number of characters to read.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Clear">
            <summary>
            Clears the entire buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Truncate">
            <summary>
            Remove all characters under or after the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Insert(System.Char)">
            <summary>
            Inserts a character at the cursor without moving the cursor.
            </summary>
            <param name="value">Character to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Insert(System.String)">
            <summary>
            Inserts a string at the cursor without moving the cursor.
            </summary>
            <param name="value">String to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Replace(System.Char)">
            <summary>
            Replaces the character under the cursor with the specified
            character.
            </summary>
            <param name="value">Replacement character.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Replace(System.String)">
            <summary>
            Replaces characters starting at the one under the cursor with the
            characters in the specified string.  An exception is thrown if
            the string value provided contains more characters than fit in the
            remainder of the string.
            </summary>
            <param name="value">Replacement value.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Remove">
            <summary>
            Removes the character under the cursor.
            </summary>
            <returns>True on success; false if the cursor was at the end of the
            buffer.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.Remove(System.Int32)">
            <summary>
            Removes the specified number of characters from the buffer, starting
            with the character under the cursor.  The cursor's location is not
            affected by this operation.
            </summary>
            <param name="count">The number of characters to remove.</param>
            <returns>True on success; false if the characters could not be
            removed.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleInputBuffer.RemoveCharBeforeCursor">
            <summary>
            Removes the character before the cursor, and moves the cursor
            appropriately.
            </summary>
            <returns>True on success; false if the cursor was at the beginning
            of the buffer.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.IConsoleLineInput">
            <summary>
            Abstract interface for interacting with an object that manages
            console line input.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.InsertMode">
            <summary>
            True if insertion mode is enabled; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.Prompt">
            <summary>
            The string to be displayed when prompting for input.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.History">
            <summary>
            The object's history.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.Contents">
            <summary>
            The current contents of the buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.PasteBuffer">
            <summary>
            The current contents of the paste buffer.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.AtEnd">
            <summary>
            True if the cursor is at the end of the buffer; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleLineInput.TokenCompleter">
            <summary>
            The object's token completion handler; may be null.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.MoveCursorBackward(System.Int32)">
            <summary>
            Move the cursor backward by the specified number of characters.
            </summary>
            <param name="count">Number of characters to move backward.</param>
            <returns>True if the move could be made; false if the requested move
            was invalid.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.MoveCursorForward(System.Int32)">
            <summary>
            Move the cursor forward by the specified number of characters.
            </summary>
            <param name="count">Number of characters to move forward.</param>
            <returns>True if the move could be made; false if the requested move
            was invalid.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.MoveCursorToStart">
            <summary>
            Move the cursor to the start of the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.MoveCursorToEnd">
            <summary>
            Move the cursor to the end of the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.MoveCursorBackwardOneWord">
            <summary>
            Move the cursor back one word.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.MoveCursorForwardOneWord">
            <summary>
            Move the cursor forward one word.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.Delete">
            <summary>
            Delete the character under the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.DeletePrecedingChar">
            <summary>
            Delete the character before the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.DeleteBackwardThroughLastWord">
            <summary>
            Delete the characters from the beginning of the last word in the
            buffer and the current cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.DeleteForwardToNextWord">
            <summary>
            Delete the characters from the current cursor up to, but not
            including, the start of the next word.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ClearLine(System.Boolean)">
            <summary>
            Clear the input buffer and reset the cursor to the beginning of the
            buffer.
            </summary>
            <param name="clearBufferOnly">true to clear the buffer only without
            resetting the cursor; false to both clear the buffer and reset the
            cursor.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ClearScreen">
            <summary>
            Clear the screen buffer, and redisplay the prompt and current
            contents of the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.Insert(System.Char)">
            <summary>
            Insert a character at the cursor without moving the cursor.
            </summary>
            <param name="value">The character to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.Insert(System.String)">
            <summary>
            Insert a string at the cursor without moving the cursor.
            </summary>
            <param name="value">The string to insert.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.Replace(System.Char)">
            <summary>
            Replace the character under the cursor.
            </summary>
            <param name="value">The character to place.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceWithLastLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the previous
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceWithNextLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the next
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceWithOldestLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the oldest
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceWithYoungestLineInHistory">
            <summary>
            Replace the entire contents of the input buffer with the youngest
            line in the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.SaveToHistory">
            <summary>
            Save the contents of the current buffer to the input history.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.CutToEnd">
            <summary>
            Remove the contents of the buffer from the cursor to the end of the
            buffer, and place them in the paste buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.Paste">
            <summary>
            Insert the contents of the paste buffer at the cursor.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceCurrentTokenWithPreviousCompletion(System.Boolean)">
            <summary>
            Replace the current token in the input buffer with the previous
            completion.
            </summary>
            <param name="lastOperationWasCompletion">True if the last input
            operation was a completion operation; false otherwise.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceCurrentTokenWithNextCompletion(System.Boolean)">
            <summary>
            Replace the current token in the input buffer with the next
            completion.
            </summary>
            <param name="lastOperationWasCompletion">True if the last input
            operation was a completion operation; false otherwise.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.ReplaceCurrentTokenWithAllCompletions">
            <summary>
            Replace the current token in the input buffer with all possible
            completions for it.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.DisplayAllCompletions">
            <summary>
            Displays all completions without modifying the input buffer.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.TransformCurrentWord(System.Func{System.String,System.String})">
            <summary>
            Transforms the current word by passing it through the provided
            function.
            </summary>
            <param name="transformation">Function to apply.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleLineInput.DisplayPrompt">
            <summary>
            Displays the input prompt.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.IConsoleOutput">
            <summary>
            Abstract interface for interacting with an output console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.CursorSize">
            <summary>
            The size of the cursor, expressed as an integral percentage.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.CursorVisible">
            <summary>
            True if the cursor is visible; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.CursorLeft">
            <summary>
            The x-coordinate of the input cursor.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.CursorTop">
            <summary>
            The y-coordinate of the input cursor.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.WindowWidth">
            <summary>
            The width, in characters, of the window associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.WindowHeight">
            <summary>
            The height, in characters, of the window associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.BufferWidth">
            <summary>
            The width, in characters, of the logical buffer associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.BufferHeight">
            <summary>
            The height, in characters, of the logical buffer associated with the
            console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.ForegroundColor">
            <summary>
            The console's foreground color.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.BackgroundColor">
            <summary>
            The console's background color.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleOutput.IsScrollable">
            <summary>
            Indicates if the console's buffer is scrollable.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleOutput.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="left">The new x-coordinate.</param>
            <param name="top">The new y-coordinate.</param>
            <returns>True if the move could be made; false if the requested
            move was invalid.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleOutput.ScrollContents(System.Int32)">
            <summary>
            Scrolls the bottom-most lines of the console's buffer upward within
            the buffer by the specified number of lines, effectively freeing up
            the specified number of lines.  The cursor is adjusted appropriately
            upward by the same number of lines.
            </summary>
            <param name="lineCount">The number of lines by which to scroll the
            contents.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleOutput.Clear">
            <summary>
            Clears the console and moves the cursor to the top-left corner.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleOutput.Write(NClap.Utilities.ColoredString)">
            <summary>
            Writes colored text to the console.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleOutput.Write(System.String)">
            <summary>
            Writes text to the console.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleOutput.WriteLine(System.String)">
            <summary>
            Writes a line of text to the console.
            </summary>
            <param name="text">The line of text to write.</param>
        </member>
        <member name="T:NClap.ConsoleInput.IConsoleReader">
            <summary>
            An advanced console reader.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleReader.CommentCharacter">
            <summary>
            The beginning-of-line comment character.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleReader.ConsoleInput">
            <summary>
            The console being used for input.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleReader.ConsoleOutput">
            <summary>
            The console being used for output.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleReader.LineInput">
            <summary>
            The inner line input object.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.IConsoleReader.KeyBindingSet">
            <summary>
            The console key bindings used by this console reader.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.IConsoleReader.ReadLine">
            <summary>
            Reads a line of input text from the underlying console.
            </summary>
            <returns>The line of text, or null if the end of input was
            encountered.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.IReadOnlyConsoleKeyBindingSet">
            <summary>
            Read-only abstract interface for querying a console key binding set.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.ITokenCompleter">
            <summary>
            Abstract interface for an object that can generate completions for a console
            input token.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.ITokenCompleter.GetCompletions(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Retrieves the completions for the given token, in the context of the given
            set of tokens.
            </summary>
            <param name="tokens">The current set of tokens.</param>
            <param name="tokenIndex">The 0-based index of the token to get completions
            for.</param>
            <returns>The enumeration of completions for the token.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.TokenCompletionSet">
            <summary>
            Encapsulates a cache of token completions.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.TokenCompletionSet.InputText">
            <summary>
            The input buffer's contents at the time when the completion set was
            generated.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.TokenCompletionSet.Completions">
            <summary>
            The completions.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.TokenCompletionSet.OriginalToken">
            <summary>
            The uncompleted token.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.TokenCompletionSet.Count">
            <summary>
            Count of completions.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.TokenCompletionSet.Empty">
            <summary>
            True if the set is empty; false if it contains at least one
            completion.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.TokenCompletionSet.Item(System.Int32)">
            <summary>
            Retrieves the specified completion from the set.
            </summary>
            <param name="index">The index of the completion to retrieve.</param>
            <returns>The specified completion.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.TokenCompletionSet.Create(System.String,System.Int32,NClap.ConsoleInput.ITokenCompleter)">
            <summary>
            Generate completions for the "current" token in the specified input
            text.
            </summary>
            <param name="inputText">The input text string.</param>
            <param name="cursorIndex">The current cursor index into the string.
            </param>
            <param name="tokenCompleter">Token completion handler to invoke.
            </param>
            <returns>The generated completion set.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="tokenCompleter" />
            is null.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.TokenCompletionSet.Create(System.String,System.Int32,NClap.ConsoleInput.ITokenCompleter,System.Int32@,System.Int32@)">
            <summary>
            Generate completions for the "current" token in the specified input
            text.
            </summary>
            <param name="inputText">The input text string.</param>
            <param name="cursorIndex">The current cursor index into the string.
            </param>
            <param name="tokenCompleter">Token completion handler to invoke.
            </param>
            <param name="existingTokenStartIndex">Receives the start index of
            the current token.</param>
            <param name="existingTokenLength">Receives the length of the current
            token.</param>
            <returns>The generated completions.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.TokenCompletionSet.RemoveQuotes(System.String)">
            <summary>
            Returns a copy of the provided string with all quotes removed.
            </summary>
            <param name="s">The input string.</param>
            <returns>The resulting processed string.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods">
            <summary>
            Wrapper for native methods only available on traditional Windows platforms.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods.Error">
            <summary>
            Win32 error.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.Error.InvalidHandle">
            <summary>
            An operation was attempted against an invalid handle.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods.StandardHandleType">
            <summary>
            Enumeration to encapsulate the possible arguments to <see cref="M:NClap.ConsoleInput.Windows.NativeMethods.GetStdHandle(NClap.ConsoleInput.Windows.NativeMethods.StandardHandleType)"/>.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.StandardHandleType.Input">
            <summary>
            Standard input (a.k.a. stdin).
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.StandardHandleType.Output">
            <summary>
            Standard output (a.k.a. stdout).
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.StandardHandleType.Error">
            <summary>
            Standard error (a.k.a. stderr).
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods.SmallRect">
            <summary>
            Type to wrap native SMALL_RECT structure.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.SmallRect.Left">
            <summary>
            x-coordinate of rectangle's left edge.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.SmallRect.Top">
            <summary>
            y-coordinate of rectangle's top edge.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.SmallRect.Right">
            <summary>
            x-coordinate of rectangle's right edge.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.SmallRect.Bottom">
            <summary>
            y-coordinate of rectangle's bottom edge.
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes">
            <summary>
            Type to describe possible character attributes specifiable in
            the CHAR_INFO structure.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.None">
            <summary>
            No attributes.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkBlue">
            <summary>
            Foreground color is blue.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkGreen">
            <summary>
            Foreground color is green.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkRed">
            <summary>
            Foreground color is red.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundIntensity">
            <summary>
            Foreground color is modified to be a more intense version of itself.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundBlack">
            <summary>
            Foreground color is black.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkGray">
            <summary>
            Foreground color is dark gray.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundBlue">
            <summary>
            Foreground color is  blue.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundGreen">
            <summary>
            Foreground color is  green.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundRed">
            <summary>
            Foreground color is  red.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkCyan">
            <summary>
            Foreground color is cyan.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundCyan">
            <summary>
            Foreground color is  cyan.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkMagenta">
            <summary>
            Foreground color is magenta.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundMagenta">
            <summary>
            Foreground color is  magenta.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundDarkYellow">
            <summary>
            Foreground color is yellow.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundYellow">
            <summary>
            Foreground color is  yellow.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundGray">
            <summary>
            Foreground color is gray.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ForegroundWhite">
            <summary>
            Foreground color is white.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkBlue">
            <summary>
            Background color is blue.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkGreen">
            <summary>
            Background color is green.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkRed">
            <summary>
            Background color is red.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundIntensity">
            <summary>
            Background color is modified to be a more intense version of itself.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundBlack">
            <summary>
            Background color is black.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkGray">
            <summary>
            Background color is dark gray.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundBlue">
            <summary>
            Background color is  blue.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundGreen">
            <summary>
            Background color is  green.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundRed">
            <summary>
            Background color is  red.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkCyan">
            <summary>
            Background color is cyan.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundCyan">
            <summary>
            Background color is  cyan.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkMagenta">
            <summary>
            Background color is magenta.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundMagenta">
            <summary>
            Background color is  magenta.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundDarkYellow">
            <summary>
            Background color is yellow.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundYellow">
            <summary>
            Background color is  yellow.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundGray">
            <summary>
            Background color is gray.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.BackgroundWhite">
            <summary>
            Background color is white.
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.LeadingByte">
            <summary>
            (unknown)
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.TrailingByte">
            <summary>
            (unknown)
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.TopHorizontal">
            <summary>
            (unknown)
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.LeftVertical">
            <summary>
            (unknown)
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.RightVertical">
            <summary>
            (unknown)
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.ReverseVideo">
            <summary>
            Enable reverse video (inverse color).
            </summary>
        </member>
        <member name="F:NClap.ConsoleInput.Windows.NativeMethods.CharAttributes.Underscore">
            <summary>
            (unknown)
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods.CharInfo">
            <summary>
            Type to wrap native CHAR_INFO structure.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.CharInfo.UnicodeChar">
            <summary>
            Unicode character.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.CharInfo.Attributes">
            <summary>
            Display attributes for character (e.g. color).
            </summary>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.NativeMethods.Coord">
            <summary>
            Type to wrap native COORD structure.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.Coord.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.NativeMethods.Coord.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.Windows.NativeMethods.GetStdHandle(NClap.ConsoleInput.Windows.NativeMethods.StandardHandleType)">
            <summary>
            Native routine for retrieving a standard console handle.
            </summary>
            <param name="type">Type of handle to retrieve.</param>
            <returns>The handle, if present; IntPtr.Zero otherwise.</returns>
        </member>
        <member name="M:NClap.ConsoleInput.Windows.NativeMethods.ScrollConsoleScreenBuffer(System.IntPtr,NClap.ConsoleInput.Windows.NativeMethods.SmallRect@,NClap.ConsoleInput.Windows.NativeMethods.SmallRect@,NClap.ConsoleInput.Windows.NativeMethods.Coord,NClap.ConsoleInput.Windows.NativeMethods.CharInfo@)">
            <summary>
            Native routine for scrolling the console's screen buffer.
            </summary>
            <param name="consoleOutput">Handle to console output.</param>
            <param name="scrollRectangle">Rectangle for scrolling.</param>
            <param name="clipRectangle">Rectangle for clipping.</param>
            <param name="destinationOrigin">Destination origin coordinates.</param>
            <param name="fill">Character to fill freed space.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.ConsoleInput.Windows.WindowsConsole">
            <summary>
            Implementation of console I/O using the Windows console.
            </summary>
        </member>
        <member name="P:NClap.ConsoleInput.Windows.WindowsConsole.IsScrollable">
            <summary>
            Indicates if the console's buffer is scrollable.
            </summary>
        </member>
        <member name="M:NClap.ConsoleInput.Windows.WindowsConsole.ScrollContents(System.Int32)">
            <summary>
            Scrolls the bottom-most lines of the console's buffer upward within
            the buffer by the specified number of lines, effectively freeing up
            the specified number of lines.  The cursor is adjusted appropriately
            upward by the same number of lines.
            </summary>
            <param name="lineCount">The number of lines by which to scroll the
            contents.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an internal error
            occurs.</exception>
        </member>
        <member name="M:NClap.ConsoleInput.Windows.WindowsConsole.TranslateBackgroundColor(System.ConsoleColor)">
            <summary>
            Translates the provided console color to native character
            attributes.
            </summary>
            <param name="color">The color to translate.</param>
            <returns>The translated native attributes.</returns>
        </member>
        <member name="T:NClap.Exceptions.InternalInvariantBrokenException">
            <summary>
            Exception thrown when an internal invariant is broken; if this is
            thrown, then there is a code defect in this library.
            </summary>
        </member>
        <member name="M:NClap.Exceptions.InternalInvariantBrokenException.#ctor">
            <summary>
            Standard parameterless constructor.
            </summary>
        </member>
        <member name="M:NClap.Exceptions.InternalInvariantBrokenException.#ctor(System.String)">
            <summary>
            Standard constructor that takes a string message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:NClap.Exceptions.InternalInvariantBrokenException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor that wraps an inner exception.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception to wrap.</param>
        </member>
        <member name="T:NClap.Exceptions.InvalidArgumentSetException">
            <summary>
            Exception thrown when an invalid argument set is used.
            </summary>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(NClap.Parser.ArgumentDefinition,System.String,System.Exception)">
            <summary>
            Constructor that takes an <see cref="T:NClap.Parser.ArgumentDefinition"/> object.
            </summary>
            <param name="arg">Info about the problematic argument.</param>
            <param name="message">The message string.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(NClap.Utilities.IMutableMemberInfo,System.String,System.Exception)">
            <summary>
            Constructor that takes member info.
            </summary>
            <param name="memberInfo">Info about the problematic member.</param>
            <param name="message">The message string.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(System.String)">
            <summary>
            Constructor that takes a message string.
            </summary>
            <param name="message">The message string.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(System.Type)">
            <summary>
            Basic constructor.
            </summary>
            <param name="argumentSetType">The type of the argument set.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(System.Type,System.String)">
            <summary>
            Constructor that takes the type of the argument set and a message
            string.
            </summary>
            <param name="argumentSetType">The type of the argument set.</param>
            <param name="message">The message string.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidArgumentSetException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Constructor that takes the type of the argument set, a message
            string and an inner exception.
            </summary>
            <param name="argumentSetType">The type of the argument set.</param>
            <param name="message">The message string.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:NClap.Exceptions.InvalidArgumentSetException.ArgumentSetType">
            <summary>
            If present, indicates the type of the problematic argument set.
            </summary>
        </member>
        <member name="P:NClap.Exceptions.InvalidArgumentSetException.InnerMessage">
            <summary>
            Optionally provides an inner message.
            </summary>
        </member>
        <member name="P:NClap.Exceptions.InvalidArgumentSetException.Argument">
            <summary>
            If present, indicates a problematic argument.
            </summary>
        </member>
        <member name="P:NClap.Exceptions.InvalidArgumentSetException.MemberInfo">
            <summary>
            If present, indicates a problematic member of the argument set.
            </summary>
        </member>
        <member name="P:NClap.Exceptions.InvalidArgumentSetException.Message">
            <summary>
            The message to display.
            </summary>
        </member>
        <member name="T:NClap.Exceptions.InvalidCommandException">
            <summary>
            Exception thrown when an invalid command is used.
            </summary>
        </member>
        <member name="M:NClap.Exceptions.InvalidCommandException.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:NClap.Exceptions.InvalidCommandException.#ctor(System.Type,System.Reflection.MemberInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="commandType">Command type.</param>
            <param name="commandValue">Command value.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidCommandException.#ctor(System.Type,System.Reflection.MemberInfo,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="commandType">Command type.</param>
            <param name="commandValue">Command value.</param>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:NClap.Exceptions.InvalidCommandException.#ctor(System.String)">
            <summary>
            Standard constructor.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:NClap.Expressions.ConcatenationExpression">
            <summary>
            Concatenation expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ConcatenationExpression.#ctor(NClap.Expressions.Expression,NClap.Expressions.Expression)">
            <summary>
            Basic constructor.
            </summary>
            <param name="left">Left-hand expression.</param>
            <param name="right">Right-hand expression.</param>
        </member>
        <member name="P:NClap.Expressions.ConcatenationExpression.Left">
            <summary>
            Left-hand expression.
            </summary>
        </member>
        <member name="P:NClap.Expressions.ConcatenationExpression.Right">
            <summary>
            Right-hand expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ConcatenationExpression.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.ConditionalExpression">
            <summary>
            Conditional expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ConditionalExpression.#ctor(NClap.Expressions.Expression,NClap.Expressions.Expression,NClap.Utilities.Maybe{NClap.Expressions.Expression})">
            <summary>
            Basic constructor.
            </summary>
            <param name="condition">Condition expression.</param>
            <param name="thenExpr">Then expression. Required.</param>
            <param name="elseExpression">Else expression. Optional.</param>
        </member>
        <member name="P:NClap.Expressions.ConditionalExpression.Condition">
            <summary>
            Condition expression.
            </summary>
        </member>
        <member name="P:NClap.Expressions.ConditionalExpression.ThenExpression">
            <summary>
            Then expression.
            </summary>
        </member>
        <member name="P:NClap.Expressions.ConditionalExpression.ElseExpression">
            <summary>
            Else expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ConditionalExpression.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.Expression">
            <summary>
            Base class for all expressions.
            </summary>
        </member>
        <member name="M:NClap.Expressions.Expression.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.ExpressionEnvironment">
            <summary>
            An expression environment.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ExpressionEnvironment.TryGetVariable(System.String,System.String@)">
            <summary>
            Tries to retrieve the value associated with the given
            variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="value">On success, receives the value associated
            with the variable.</param>
            <returns>true if the variable was found; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.ExpressionParser">
            <summary>
            Expression parser.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ExpressionParser.TryParse(System.String,NClap.Expressions.Expression@)">
            <summary>
            Tries to parse an expression out of a given string.
            </summary>
            <param name="content">String to parse.</param>
            <param name="expr">On success, receives the
            expression.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.Operator">
            <summary>
            Operator type.
            </summary>
        </member>
        <member name="F:NClap.Expressions.Operator.Unspecified">
            <summary>
            Sentinel invalid value.
            </summary>
        </member>
        <member name="F:NClap.Expressions.Operator.ConvertToLowerCase">
            <summary>
            Converts to lower-case.
            </summary>
        </member>
        <member name="F:NClap.Expressions.Operator.ConvertToUpperCase">
            <summary>
            Converts to lower-case.
            </summary>
        </member>
        <member name="T:NClap.Expressions.OperatorExpression">
            <summary>
            Operator expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.OperatorExpression.#ctor(NClap.Expressions.Operator,NClap.Expressions.Expression)">
            <summary>
            Basic constructor.
            </summary>
            <param name="op">Operator.</param>
            <param name="operand">Operand.</param>
        </member>
        <member name="P:NClap.Expressions.OperatorExpression.Operator">
            <summary>
            Operator type.
            </summary>
        </member>
        <member name="P:NClap.Expressions.OperatorExpression.Operand">
            <summary>
            Operand expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.OperatorExpression.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.ParenthesisExpression">
            <summary>
            Parenthesis expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ParenthesisExpression.#ctor(NClap.Expressions.Expression)">
            <summary>
            Basic constructor.
            </summary>
            <param name="innerExpression">Inner expression.</param>
        </member>
        <member name="P:NClap.Expressions.ParenthesisExpression.InnerExpression">
            <summary>
            Inner expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.ParenthesisExpression.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.StringExpander">
            <summary>
            Utility class for expanding strings.
            </summary>
        </member>
        <member name="M:NClap.Expressions.StringExpander.TryExpand(NClap.Expressions.ExpressionEnvironment,System.String,System.String@)">
            <summary>
            Try to expand the given string value in the context of the
            provided environment.
            </summary>
            <param name="env">Environment for context.</param>
            <param name="value">Value to expand.</param>
            <param name="result">On success, receives the expanded result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.StringLiteral">
            <summary>
            A string literal expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.StringLiteral.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="value">Literal string value.</param>
        </member>
        <member name="P:NClap.Expressions.StringLiteral.Value">
            <summary>
            Literal string.
            </summary>
        </member>
        <member name="M:NClap.Expressions.StringLiteral.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Expressions.VariableExpression">
            <summary>
            A variable expression.
            </summary>
        </member>
        <member name="M:NClap.Expressions.VariableExpression.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="variableName">Variable name.</param>
        </member>
        <member name="M:NClap.Expressions.VariableExpression.IsValidVariableName(System.String)">
            <summary>
            Checks if the given name is valid for a variable.
            </summary>
            <param name="variableName">Possible name.</param>
            <returns>true if it's valid; false otherwise.</returns>
        </member>
        <member name="M:NClap.Expressions.VariableExpression.IsValidInVariableName(System.Char)">
            <summary>
            Checks if the given character is valid in the name of a
            variable.
            </summary>
            <param name="c">Character to check.</param>
            <returns>true if it's valid; false otherwise.</returns>
        </member>
        <member name="P:NClap.Expressions.VariableExpression.VariableName">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="M:NClap.Expressions.VariableExpression.TryEvaluate(NClap.Expressions.ExpressionEnvironment,System.String@)">
            <summary>
            Tries to evaluate the given expression in the context of
            the given environment.
            </summary>
            <param name="env">Environment in which to evaluate the
            expression.</param>
            <param name="value">On success, receives the evaluation
            result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentDefaultValueHelpMode">
            <summary>
            Mode for including info about argument default values.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentDefaultValueHelpMode.Omit">
            <summary>
            Do not include default values.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentDefaultValueHelpMode.PrependToDescription">
            <summary>
            Prepend to the start of the argument's description (but after the
            argument's syntax).
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentDefaultValueHelpMode.AppendToDescription">
            <summary>
            Append to the end of the argument's description.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentEnumValueHelpFlags">
            <summary>
            Mode for generating help for enum values.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentEnumValueHelpFlags.None">
            <summary>
            Each enum is documented in the default format, at each use site.
            This summary will be duplicated if the enum type is used in multiple
            arguments.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentEnumValueHelpFlags.SingleSummaryOfEnumsWithMultipleUses">
            <summary>
            Enum types with multiple references will be promoted to their own
            sections.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentEnumValueHelpFlags.SingleSummaryOfAllCommandEnums">
            <summary>
            Command enums will be promoted to their own sections.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentEnumValueHelpOptions">
            <summary>
            Help options for enum value help content.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentEnumValueHelpOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentEnumValueHelpOptions.#ctor(NClap.Help.ArgumentEnumValueHelpOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Help.ArgumentEnumValueHelpOptions.Flags">
            <summary>
            Whether or not enum value summaries should be fully promoted to their
            own section, etc.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentEnumValueHelpOptions.DeepClone">
            <summary>
            Create a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentGroupingMode">
            <summary>
            Grouping mode for arguments.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentGroupingMode.RequiredVersusOptional">
            <summary>
            Group required arguments vs. optional arguments.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentHelpLayout">
            <summary>
            Abstract base class for an argument help layout.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentHelpLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentHelpLayout.DeepClone">
            <summary>
            Create a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentHelpOptions">
            <summary>
            Options for generating help for arguments.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentHelpOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentHelpOptions.#ctor(NClap.Help.ArgumentHelpOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.RequiredArguments">
            <summary>
            Required arguments options.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.OptionalArguments">
            <summary>
            Optional arguments options.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.GroupingMode">
            <summary>
            Mode for grouping arguments.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.Layout">
            <summary>
            Layout of argument help.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.HangingIndentWidth">
            <summary>
            Width, in characters, of hanging indent.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.BlankLinesBetweenArguments">
            <summary>
            Number of lines left blank between two adjacent arguments.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.IncludeDescription">
            <summary>
            Include argument descriptions.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.DefaultValue">
            <summary>
            Include argument default values.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.ShortName">
            <summary>
            Include information about arguments' short name aliases.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.Ordering">
            <summary>
            Ordering of arguments.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.MetadataColor">
            <summary>
            Color of argument metadata.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.ArgumentNameColor">
            <summary>
            Color of argument name.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.IncludePositionalArgumentTypes">
            <summary>
            Whether or not to display the types of positional arguments.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentHelpOptions.IncludeNamedArgumentValueSyntax">
            <summary>
            Whether or not to display type info and syntax for named argument values.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentHelpOptions.DeepClone">
            <summary>
            Creates a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentMetadataHelpOptions">
            <summary>
            Options for a piece of argument metadata.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentMetadataHelpOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentMetadataHelpOptions.#ctor(NClap.Help.ArgumentMetadataHelpOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Help.ArgumentMetadataHelpOptions.Include">
            <summary>
            Should this piece of metadata be included?
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentMetadataHelpOptions.HeaderTitle">
            <summary>
            Optionally provides header text; if left unspecified, default is used.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentMetadataHelpOptions.Color">
            <summary>
            Color for this piece of metadata.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentMetadataHelpOptions.BlockIndent">
            <summary>
            Number of characters to block-indent the body of this item; if present,
            will override the default specified in <see cref="T:NClap.Help.ArgumentSetHelpOptions"/>.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentMetadataHelpOptions.HangingIndent">
            <summary>
            Number of characters to hanging-indent the body of this item; if present,
            will override the default specified in <see cref="T:NClap.Help.ArgumentSetHelpOptions"/>.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentMetadataHelpOptions.DeepClone">
            <summary>
            Create a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentSetHelpOptions">
            <summary>
            Options for generating help for an argument set.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpOptions.DefaultBlockIndent">
            <summary>
            Default indent width, expressed in characters.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpOptions.DefaultHangingIndent">
            <summary>
            Default hanging indent width, expressed in characters.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpOptions.DefaultMaxWidth">
            <summary>
            Default maximum width, expressed in characters.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptions.#ctor(NClap.Help.ArgumentSetHelpOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.MaxWidth">
            <summary>
            Indicates maximum width of help, expressed in characters.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.UseColor">
            <summary>
            Use multiple colors in the output.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.SectionEntryBlockIndentWidth">
            <summary>
            Number of characters to block-indent all entries directly under a section.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.SectionEntryHangingIndentWidth">
            <summary>
            Number of characters to hanging-indent all entries directly under a section.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.BlankLinesBetweenSections">
            <summary>
            Number of lines left blank between major sections of the help information.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.Name">
            <summary>
            Name to use for argument set (i.e. first token in syntax).
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.SectionHeaders">
            <summary>
            Options for section headers.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.Logo">
            <summary>
            Logo options.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.Description">
            <summary>
            Description options.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.Syntax">
            <summary>
            Basic syntax options.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.EnumValues">
            <summary>
            Options for summaries of possible values for enum types.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.Examples">
            <summary>
            Example usage options.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetHelpOptions.Arguments">
            <summary>
            Options for arguments.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptions.DeepClone">
            <summary>
            Creates a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentSetHelpOptionsExtensions">
            <summary>
            Extension methods for interacting with <see cref="T:NClap.Help.ArgumentSetHelpOptions"/>.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.With(NClap.Help.ArgumentSetHelpOptions)">
            <summary>
            Construct a fluent builder from options.
            </summary>
            <param name="options">Options.</param>
            <returns>Fluent builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.NoLogo(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Removes the logo section from the output.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.NoDescription(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Removes the description section from the output.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.NoSyntaxSummary(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Removes the basic syntax summary section from the output.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.NoEnumValues(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Removes the enum values sections from the output.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.NoExamples(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Removes the examples section from the output.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.Color(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},System.Boolean)">
            <summary>
            Updates the "use color or not" preference.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="useColor">true to use color; false otherwise.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.MaxWidth(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},System.Int32)">
            <summary>
            Updates the maximum width.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="maxWidth">Maximum width.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.EnumValueFlags(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},NClap.Help.ArgumentEnumValueHelpFlags)">
            <summary>
            Update enum value help flags.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="flags">New flags.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.BlankLinesBetweenArguments(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},System.Int32)">
            <summary>
            Updates help options to add blank lines between adjacent arguments.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="blankLineCount">Count of blank lines to add.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.DefaultValues(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},NClap.Help.ArgumentDefaultValueHelpMode)">
            <summary>
            Updates default mode for display of arguments' default values.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="mode">Desired mode.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.ShortNames(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},NClap.Help.ArgumentShortNameHelpMode)">
            <summary>
            Updates default mode for display of arguments' short names.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="mode">Desired mode.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.OneColumnLayout(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Updates help options to use a one-column layout.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.TwoColumnLayout(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions})">
            <summary>
            Updates help options to use a two-column layout.
            </summary>
            <param name="builder">Options builder.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.ColumnWidths(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},System.Int32[])">
            <summary>
            Updates help options to use the given column widths.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="widths">Column widths.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpOptionsExtensions.ColumnSeparator(NClap.Utilities.FluentBuilder{NClap.Help.ArgumentSetHelpOptions},System.String,System.String)">
            <summary>
            Updates help options to use the given column widths.
            </summary>
            <param name="builder">Options builder.</param>
            <param name="defaultSeparator">Default separator to use.</param>
            <param name="firstLineSeparator">Separator to use only on first line,
            or null to have default used on first line as well.</param>
            <returns>The updated builder.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentSetHelpRenderer">
            <summary>
            Help formatter.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpRenderer.#ctor(NClap.Help.ArgumentSetHelpOptions)">
            <summary>
            Basic constructor.
            </summary>
            <param name="options">Help options.</param>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpRenderer.Format(NClap.Parser.ArgumentSetDefinition,System.Object)">
            <summary>
            Renders the given usage information.
            </summary>
            <param name="argSet">Argument set.</param>
            <param name="destination">Destination object.</param>
            <returns>Rendered string output, ready for display.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetHelpRenderer.GetEnumsToDocument(NClap.Help.ArgumentSetUsageInfo,System.Collections.Generic.IReadOnlyDictionary{NClap.Help.ArgumentUsageInfo,System.Collections.Generic.List{NClap.Types.IEnumArgumentType}}@,System.Collections.Generic.IEnumerable{NClap.Types.IEnumArgumentType}@)">
            <summary>
            Find all enum types that need to be documented, and sort out whether they
            should be documented inline in their usage sites or coalesced into a
            toplevel section.
            </summary>
            <param name="setInfo">Argument set usage info.</param>
            <param name="inlineDocumented">Receives a dictionary of inline-documented
            enum types.</param>
            <param name="separatelyDocumented">Receives an enumeration of enum types
            that should be separately documented.</param>
        </member>
        <member name="T:NClap.Help.ArgumentSetHelpSectionType">
            <summary>
            Type of section in argument help output.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.ArgumentSetDescription">
            <summary>
            Argument set description.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.EnumValues">
            <summary>
            Summary of separately documented enum values.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.Examples">
            <summary>
            Example usage information.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.Logo">
            <summary>
            Argument set logo.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.OptionalParameters">
            <summary>
            Optional parameters.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.RequiredParameters">
            <summary>
            Required parameters.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSetHelpSectionType.Syntax">
            <summary>
            Syntax summary.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentSetUsageInfo">
            <summary>
            Describes help information for a command-line argument set.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetUsageInfo.#ctor(NClap.Parser.ArgumentSetDefinition,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="argSet">Argument set.</param>
            <param name="destination">Destination object.</param>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.Set">
            <summary>
            Argument set.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.Destination">
            <summary>
            Destination object.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.Description">
            <summary>
            Description of argument set.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.Logo">
            <summary>
            Logo to use.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.DefaultLongNamePrefix">
            <summary>
            Preferred prefix for long named arguments, or null if no such prefix exists.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.DefaultShortNamePrefix">
            <summary>
            Preferred prefix for short named arguments, or null if no such prefix exists.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.AllParameters">
            <summary>
            List of usage information for all parameters.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.RequiredParameters">
            <summary>
            Usage information for required parameters only.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.OptionalParameters">
            <summary>
            Usage information for optional parameters only.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSetUsageInfo.Examples">
            <summary>
            Examples.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSetUsageInfo.GetBasicSyntax(NClap.Help.ArgumentSyntaxHelpOptions)">
            <summary>
            Composes basic syntax info.
            </summary>
            <param name="options">Options for generating syntax info.</param>
            <returns>The composed info.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentSetUsageInfo.GetLogo(NClap.Parser.ArgumentSetDefinition)">
            <summary>
            Gets the default logo for the given argument set.
            </summary>
            <param name="set">Optionally provides the argument set to
            get the logo for.</param>
            <returns>The logo.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentShortNameHelpMode">
            <summary>
            Mode for including short name info in help.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentShortNameHelpMode.Omit">
            <summary>
            Do not include short names.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentShortNameHelpMode.IncludeWithLongName">
            <summary>
            Include short names together with long names at the beginning of the
            description.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentShortNameHelpMode.AppendToDescription">
            <summary>
            Append short names to the end of the description.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentSortOrder">
            <summary>
            Sort order type for arguments.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSortOrder.Lexicographic">
            <summary>
            Sort lexicographically.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentSyntaxFlags">
            <summary>
            Flags describing the format of argument syntax summaries.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.DistinguishOptionalArguments">
            <summary>
            Visibly distinguish optional arguments.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.IndicateCardinality">
            <summary>
            Visibly indicate how many times the argument may occur.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.IndicatePositionalArgumentType">
            <summary>
            Whether or not to indicate the type of positional arguments.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.IndicateArgumentsThatAcceptEmptyString">
            <summary>
            Whether or not to indicate if the argument accepts an empty string.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.IncludeValueSyntax">
            <summary>
            Whether or not to include the syntax of specifying the value associated with
            the argument.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.Default">
            <summary>
            Defaults.
            </summary>
        </member>
        <member name="F:NClap.Help.ArgumentSyntaxFlags.All">
            <summary>
            All flags.
            </summary>
        </member>
        <member name="T:NClap.Help.ArgumentSyntaxHelpOptions">
            <summary>
            Help options for argument syntax summaries.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSyntaxHelpOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSyntaxHelpOptions.#ctor(NClap.Help.ArgumentSyntaxHelpOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Help.ArgumentSyntaxHelpOptions.CommandNameColor">
            <summary>
            Color of the command name.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentSyntaxHelpOptions.IncludeOptionalArguments">
            <summary>
            True to include optional arguments in syntax summary; false to
            exclude them.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentSyntaxHelpOptions.DeepClone">
            <summary>
            Create a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.ArgumentUsageInfo">
            <summary>
            Describes help information for a command-line argument.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.#ctor(NClap.Parser.ArgumentDefinition,System.Object)">
            <summary>
            Constructor that forms the info from the argument's metadata.
            </summary>
            <param name="arg">Argument metadata.</param>
            <param name="currentValue">Current value.</param>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.Arg">
            <summary>
            Argument.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.CurrentValue">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.Description">
            <summary>
            Help information.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.IsRequired">
            <summary>
            True if the argument is required; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.IsPositional">
            <summary>
            True if the argument is positional; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.LongName">
            <summary>
            Optionally indicates the argument's long name.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.ShortName">
            <summary>
            Optionally indicates the argument's short name.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.DefaultValue">
            <summary>
            Optionally indicates the argument's default value. Note that there
            may be a default value that's not indicated here, particularly if
            it was a defaulted default value.
            </summary>
        </member>
        <member name="P:NClap.Help.ArgumentUsageInfo.ArgumentType">
            <summary>
            Type of the argument, if known; null otherwise.
            </summary>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.GetSyntaxSummary(NClap.Help.ArgumentSyntaxFlags)">
            <summary>
            Generates syntax help information for this argument.
            </summary>
            <param name="flags">Flags describing the format of the summary.</param>
            <returns>The help content in string form.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.GetSyntax(NClap.Help.ArgumentHelpOptions,System.Boolean)">
            <summary>
            Gets the syntax for this argument.
            </summary>
            <param name="options">Options for generating the syntax.</param>
            <param name="enumsDocumentedInline">true if enums will be documented
            inline for this argument; false otherwise.</param>
            <returns>Syntax.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.IsSelectedCommand">
            <summary>
            Checks if the argument is a selected command.
            </summary>
            <returns>True if the argument is a selected command; false otherwise.
            </returns>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.TryGetDefaultValue(NClap.Parser.ArgumentDefinition,System.Boolean,System.Object@)">
            <summary>
            Tries to find the argument's default value.
            </summary>
            <param name="arg">The argument to retrieve a default value from.</param>
            <param name="onlyReturnExplicitDefaults">True to only return
            a default if it was explicitly specified; false to report on
            the default, even if it was defaulted itself.</param>
            <param name="value">On success, receives the default value
            for this argument; otherwise, receives null.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.TryGetDefaultValueString(NClap.Parser.ArgumentDefinition,System.Boolean)">
            <summary>
            Tries to construct a string describing the argument's default value.
            </summary>
            <param name="arg">The argument to retrieve a default value string
            from.</param>
            <param name="onlyReturnExplicitDefaults">True to only return
            a default if it was explicitly specified; false to report on
            the default, even if it was defaulted itself.</param>
            <returns>If one should be advertised, returns the string version of
            the default value for this argument; otherwise, returns null.
            </returns>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.IsCommandEnum(System.Object)">
            <summary>
            Utility for checking if the given object is an instance of a command
            enum type.
            </summary>
            <param name="value">Object to inspect.</param>
            <returns>true if it is an instance of such a type; false otherwise.</returns>
        </member>
        <member name="M:NClap.Help.ArgumentUsageInfo.IsCommandEnum(System.Type)">
            <summary>
            Utility for checking if the given type is a command enum type.
            </summary>
            <param name="type">Type to inspect.</param>
            <returns>true if it is such a type; false otherwise.</returns>
        </member>
        <member name="T:NClap.Help.LogoFactory">
            <summary>
            Utility class for generating logos.
            </summary>
        </member>
        <member name="M:NClap.Help.LogoFactory.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructor.
            </summary>
            <param name="assembly">Assembly for which logos will be generated.</param>
        </member>
        <member name="M:NClap.Help.LogoFactory.TryExpand(System.String,System.String@)">
            <summary>
            Tries to expand the given logo format string.
            </summary>
            <param name="logoFormat">Format string to expand.</param>
            <param name="result">On success, receives result.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Help.LogoFactory.TryGetVariable(System.String,System.String@)">
            <summary>
            Tries to retrieve the value associated with the given
            variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="value">On success, receives the value associated
            with the variable.</param>
            <returns>true if the variable was found; false otherwise.</returns>
        </member>
        <member name="T:NClap.Help.OneColumnArgumentHelpLayout">
            <summary>
            Describes a single-column argument help layout: name(s) followed
            by description (if applicable) in the second.
            </summary>
        </member>
        <member name="M:NClap.Help.OneColumnArgumentHelpLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.OneColumnArgumentHelpLayout.DeepClone">
            <summary>
            Create a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Help.TwoColumnArgumentHelpLayout">
            <summary>
            Describes a two-column argument help layout: name(s) in the first
            column, then description (if applicable) in the second.
            </summary>
        </member>
        <member name="M:NClap.Help.TwoColumnArgumentHelpLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Help.TwoColumnArgumentHelpLayout.#ctor(NClap.Help.TwoColumnArgumentHelpLayout)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Help.TwoColumnArgumentHelpLayout.ColumnWidths">
            <summary>
            Optional maximum widths of columns; null indicates no preference.
            </summary>
        </member>
        <member name="P:NClap.Help.TwoColumnArgumentHelpLayout.FirstLineColumnSeparator">
            <summary>
            Optionally specifies separator string to be used between columns,
            but only on the first line; for all subsequent lines, or in case
            this property is left null, <see cref="P:NClap.Help.TwoColumnArgumentHelpLayout.DefaultColumnSeparator"/> is otherwise
            used.
            </summary>
        </member>
        <member name="P:NClap.Help.TwoColumnArgumentHelpLayout.DefaultColumnSeparator">
            <summary>
            Separator string between columns.
            </summary>
        </member>
        <member name="M:NClap.Help.TwoColumnArgumentHelpLayout.DeepClone">
            <summary>
            Create a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.IFileSystemReader">
            <summary>
            Abstract interface for reading/querying file system contents.
            </summary>
        </member>
        <member name="M:NClap.IFileSystemReader.FileExists(System.String)">
            <summary>
            Checks if the path exists as a file.
            </summary>
            <param name="path">Path to check.</param>
            <returns>True if the path exists and references a non-directory
            file; false otherwise.</returns>
        </member>
        <member name="M:NClap.IFileSystemReader.DirectoryExists(System.String)">
            <summary>
            Checks if the path exists as a directory.
            </summary>
            <param name="path">Path to check.</param>
            <returns>True if the path exists and references a directory; false
            otherwise.</returns>
        </member>
        <member name="M:NClap.IFileSystemReader.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>
            Enumerates the names of the files and directories that exist in the
            indicated directory, and which match the provided file pattern.
            </summary>
            <param name="directoryPath">Path to the containing directory.
            </param>
            <param name="filePattern">The file pattern to match.</param>
            <returns>An enumeration of the names of the files.</returns>
        </member>
        <member name="M:NClap.IFileSystemReader.GetLines(System.String)">
            <summary>
            Enumerate the textual lines in the specified file.  Throws an
            IOException if I/O errors occur while accessing the file.
            </summary>
            <param name="filePath">Path to the file.</param>
            <returns>The line enumeration.</returns>
        </member>
        <member name="T:NClap.Metadata.ArgumentBaseAttribute">
            <summary>
            Abstract base class for logic shared between NamedArgumentAttribute and
            PositionalArgumentAttribute.
            </summary>
        </member>
        <member name="M:NClap.Metadata.ArgumentBaseAttribute.#ctor(NClap.Metadata.ArgumentFlags)">
            <summary>
            Primary constructor.
            </summary>
            <param name="flags">Specifies the error checking to be done on the
            argument.</param>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.DefaultElementSeparators">
            <summary>
            Default element separators.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.Flags">
            <summary>
            The error checking to be done on the argument.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.LongName">
            <summary>
            The long name of the argument; null indicates that the "default"
            long name should be used.  The long name for every argument must
            be unique.  It is an error to specify a long name of string.Empty.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.DefaultValue">
            <summary>
            The default value of the argument.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.DynamicDefaultValue">
            <summary>
            Returns true if the argument has a dynamic default value.  If the
            argument has a dynamic default value, then during parsing, values
            already present in the corresponding field in the destination
            object will be treated as the "dynamic default" value for this
            argument.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.Description">
            <summary>
            The description of the argument, exposed via help/usage information.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.Hidden">
            <summary>
            True indicates that this argument should be hidden from usage help
            text; false indicates that it should be included.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.ConflictsWith">
            <summary>
            The names of the members that this member conflicts with.  Command-
            line arguments will fail to parse if they specify a value for this
            member as well as for any of the members referenced by this
            property.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.NumberOptions">
            <summary>
            Options for parsing numeric arguments.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.AllowEmpty">
            <summary>
            True to allow "empty" arguments (e.g. empty strings); false to
            consider them invalid.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.ElementSeparators">
            <summary>
            Optionally specifies the strings that may be used as element
            separators for multiple elements that have been expressed in the
            same token.  Only relevant for parsing collection types, and
            ignored otherwise.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.ArgumentType">
            <summary>
            Optionally provides an implementation of <see cref="T:NClap.Types.IArgumentType"/>
            that should be used for this argument instead of the default
            <see cref="T:NClap.Types.IArgumentType"/> implementation associated with it.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.Parser">
            <summary>
            Optionally provides a type that implements <see cref="T:NClap.Types.IStringParser"/>, and which
            should be used for parsing strings for this argument instead of the
            default <see cref="T:NClap.Types.IArgumentType"/> class associated with the field/property's
            type.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.Formatter">
            <summary>
            Optionally provides a type that implements <see cref="T:NClap.Types.IObjectFormatter"/>, and
            which should be used for formatting objects for this argument
            instead of the default <see cref="T:NClap.Types.IArgumentType"/> class associated with the
            field/property's type.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.Completer">
            <summary>
            Optionally provides a type that implements <see cref="T:NClap.Types.IStringCompleter"/>,
            and which should be used for generating string completions for this
            argument instead of the default <see cref="T:NClap.Types.IArgumentType"/> class associated with
            the field/property's type.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentBaseAttribute.ExplicitDefaultValue">
            <summary>
            Returns true if the argument has an explicit default value.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentFlags">
            <summary>
            Used to control parsing of command line arguments.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.AtMostOnce">
            <summary>
            The argument is not required, but an error will be reported if it is
            specified more than once.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.Optional">
            <summary>
            The argument is not required; it may be specified 0 or more times if
            it's a collection, and otherwise at most once.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.Multiple">
            <summary>
            Indicates that the argument may be specified more than once. Only
            valid if the argument is a collection.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.Unique">
            <summary>
            Only valid in conjunction with Multiple. Duplicate values will
            result in an error.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.RestOfLine">
            <summary>
            The argument is not required, but if it is encountered, then the
            rest of the command line will be consumed and used as its value
            (whether or not the arguments start with a prefix indicating a
            named argument or answer file).  Only valid for string collections.
            It is different from a default argument which just consumes parts
            of the command line that don't start with those characters and
            aren't used as values for other arguments.  If a "RestOfLine"
            argument is encountered on the command line, parsing stops and
            the rest of the line is passed as-is.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.MultipleUnique">
            <summary>
            The argument is permitted to occur multiple times, but duplicate
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentFlags.AtLeastOnce">
            <summary>
            The argument is required and may be specified more than once.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentGroupAttribute">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentNameGenerationFlags">
            <summary>
            Style flags for names generated automatically from code symbols.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentNameGenerationFlags.UseOriginalCodeSymbol">
            <summary>
            Use the code symbol verbatim.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentNameGenerationFlags.GenerateHyphenatedLowerCaseLongNames">
            <summary>
            Make a best effort attempt to convert code symbols to hyphenated,
            lower-case symbols when generating long names.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentNameGenerationFlags.PreferLowerCaseForShortNames">
            <summary>
            Prefer lower case short names.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentSetAttribute">
            <summary>
            Attributes that may be used on classes representing argument sets
            (i.e. classes including fields and/or properties with
            ArgumentAttributes).
            </summary>
        </member>
        <member name="M:NClap.Metadata.ArgumentSetAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.Description">
            <summary>
            If this is non-null, it is included as the top-level description summary
            for the argument set in any help/usage messages generated.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.Examples">
            <summary>
            Optionally provides examples for usage information.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.AnswerFileArgumentPrefix">
            <summary>
            If this is non-null, it is the argument prefix that references an
            argument answer file.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.PublicMembersAreNamedArguments">
            <summary>
            True to indicate that all writable, public members (in the type
            annotated with this attribute) should be treated as optional named
            arguments.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.NamedArgumentPrefixes">
            <summary>
            If this is non-null, it is the set of prefixes that indicate named
            arguments indicated by long name.  The first separator listed
            in this array is considered "preferred" and will be used in
            generated usage help information.  This array may not be null.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.ShortNameArgumentPrefixes">
            <summary>
            If this is non-null, it is the set of prefixes that indicate named
            arguments' short names.  The first separator listed in this array
            is considered "preferred" and will be used in generated usage help
            information.  This array may not be null.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.ArgumentValueSeparators">
            <summary>
            The set of characters that separate a named argument from the
            value associated with it.  The first separator listed in this
            array is considered "preferred" and will be used in generated
            usage help information.  This array may not be null.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.Style">
            <summary>
            General argument parsing style; setting this property impacts other properties as well.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.AllowNamedArgumentValueAsSucceedingToken">
            <summary>
            True to indicate that a named argument's value may be present in
            the succeeding token after the name; false to indicate that it
            must be part of the same token.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.PreferNamedArgumentValueAsSucceedingToken">
            <summary>
            True to indicate that this argument set prefers for named argument
            values to be provided in a succeeding token rather than in the same
            token after a separator; should only be set to true if
            <see cref="P:NClap.Metadata.ArgumentSetAttribute.AllowNamedArgumentValueAsSucceedingToken"/> is also set
            to true.  Primarily used for formatting arguments (unparsing) back
            into a command line, or for generating help information.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.NameGenerationFlags">
            <summary>
            Flags indicating how to auto-generate names.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.AllowMultipleShortNamesInOneToken">
            <summary>
            True to allow a command-line argument to indicate multiple short
            names in one token, or false to disable this behavior. This
            behavior is only useful with arguments that take no values,
            when the short name prefixes are disjoint from the long name
            prefixes, and when short names are constrained to be one character
            long. Enabling this behavior will fail if any of these conditions
            are not true.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.AllowElidingSeparatorAfterShortName">
            <summary>
            True to indicate that a short-name argument's value may be present in
            the same token as the name, without a separator between the name and
            it; false to indicate that it must be part of the same token. This
            behavior requires that short names be only one character long.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.ShortNamesAreOneCharacterLong">
            <summary>
            Indicates whether short names of named arguments are constrained to
            being one character long.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.Logo">
            <summary>
            Optionally provides logo text to be displayed at the top of help
            output. Expected to be a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.LogoString">
            <summary>
            The logo, as a <see cref="T:NClap.Utilities.ColoredMultistring"/>.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.ExpandLogo">
            <summary>
            Whether or not <see cref="P:NClap.Metadata.ArgumentSetAttribute.Logo"/> is a format string that should
            be expanded.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentSetAttribute.CaseSensitive">
            <summary>
            True for names to be case sensitive; false for them to be case
            insensitive.
            </summary>
        </member>
        <member name="M:NClap.Metadata.ArgumentSetAttribute.Validate">
            <summary>
            Validate that this object's properties, when considered as a whole,
            are valid. This is exposed as a separate operation, and not checked
            as part of property implementations to provide better diagnostics
            and to delay validation until all property changes have been made
            by the calling application.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentSetStyle">
            <summary>
            Overall argument parsing style.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentSetStyle.Unspecified">
            <summary>
            No specific style is desired or specified.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentSetStyle.WindowsCommandLine">
            <summary>
            The style of simple Windows command-line tools.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentSetStyle.PowerShell">
            <summary>
            The style of PowerShell cmdlets.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentSetStyle.GetOpt">
            <summary>
            The style of apps and scripts implemented using getopt and its
            default formatting.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentTypeAttribute">
            <summary>
            Attribute for annotating types that can be used as arguments.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentTypeAttribute.DisplayName">
            <summary>
            Optionally indicates how this type should be displayed in
            help/usage information.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentValidationAttribute">
            <summary>
            Abstract base class for implementing argument validation attributes.
            </summary>
        </member>
        <member name="M:NClap.Metadata.ArgumentValidationAttribute.AcceptsType(NClap.Types.IArgumentType)">
            <summary>
            Checks if this validation attributes accepts values of the specified
            type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this attribute accepts values of the specified
            type; false if not.</returns>
        </member>
        <member name="M:NClap.Metadata.ArgumentValidationAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.ArgumentValidationContext">
            <summary>
            Context for argument validation.
            </summary>
        </member>
        <member name="M:NClap.Metadata.ArgumentValidationContext.#ctor(NClap.IFileSystemReader)">
            <summary>
            Primary constructor.
            </summary>
            <param name="fileSystemReader">File system reader for context.
            </param>
        </member>
        <member name="P:NClap.Metadata.ArgumentValidationContext.FileSystemReader">
            <summary>
            The file-system reader to use in this context.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentValueAttribute">
            <summary>
            Attribute for annotating values that can be used with arguments. It is
            most frequently used with values on enum types.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentValueAttribute.Flags">
            <summary>
            Flags controlling the use of this value.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentValueAttribute.ShortName">
            <summary>
            The short name used to identify this value.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentValueAttribute.LongName">
            <summary>
            The long name used to identify this value; null indicates that the
            "default" long name should be used.  The long name for every value
            in the containing type must unique.  It is an error to specify a
            long name of string.Empty.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ArgumentValueAttribute.Description">
            <summary>
            The description of the value, exposed via help/usage information.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ArgumentValueFlags">
            <summary>
            Flags controlling the use of argument values.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentValueFlags.None">
            <summary>
            Indicates default behavior is desired.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentValueFlags.Disallowed">
            <summary>
            Indicates that the related value should not be allowed.
            </summary>
        </member>
        <member name="F:NClap.Metadata.ArgumentValueFlags.Hidden">
            <summary>
            Indicates that the related value should not be displayed in help
            text.
            </summary>
        </member>
        <member name="T:NClap.Metadata.Command">
            <summary>
            Base class for implementing commands.
            </summary>
        </member>
        <member name="M:NClap.Metadata.Command.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command.
            </summary>
            <param name="cancel">Cancellation token.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="T:NClap.Metadata.CommandAttribute">
            <summary>
            Attribute class used to denote commands.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandAttribute.#ctor">
            <summary>
            Default, parameterless constructor.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandAttribute.#ctor(System.Type)">
            <summary>
            Constructor that allows specifying the type that "implements"
            this command.
            </summary>
            <param name="implementingType">The implementing type.</param>
        </member>
        <member name="M:NClap.Metadata.CommandAttribute.GetImplementingType(System.Type)">
            <summary>
            Gets the type that "implements" this command.
            </summary>
            <param name="commandType">The type of the command associated with this
            attribute.</param>
            <returns>The type.</returns>
        </member>
        <member name="T:NClap.Metadata.CommandGroupOptions">
            <summary>
            Options for command groups.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandGroupOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandGroupOptions.#ctor(NClap.Metadata.CommandGroupOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Metadata.CommandGroupOptions.ServiceConfigurer">
            <summary>
            Service configurer.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandGroupOptions.DeepClone">
            <summary>
            Duplicates the options.
            </summary>
            <returns>The duplicate.</returns>
        </member>
        <member name="T:NClap.Metadata.CommandGroup`1">
            <summary>
            Represents a group of commands, i.e. a command with sub-commands.
            </summary>
            <typeparam name="TCommandType">Type defining the command.</typeparam>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.#ctor">
            <summary>
            Parameterless constructor. Deprecated.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.#ctor(NClap.Metadata.CommandGroupOptions)">
            <summary>
            Basic constructor.
            </summary>
            <param name="options">Options.</param>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.#ctor(`0,System.Object)">
            <summary>
            Basic constructor. No longer implemented.
            </summary>
            <param name="selection">The selected command type.</param>
            <param name="parentObject">Optionally provides a reference to the
            object containing this command group.</param>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.#ctor(NClap.Metadata.CommandGroupOptions,System.Object,System.Object)">
            <summary>
            Basic constructor.
            </summary>
            <param name="options">Command group options.</param>
            <param name="selection">The selected command type.</param>
            <param name="parentObject">Optionally provides a reference to the
            object containing this command group.</param>
        </member>
        <member name="P:NClap.Metadata.CommandGroup`1.HasSelection">
            <summary>
            True if the group has a selection, false if no selection was yet
            made.
            </summary>
        </member>
        <member name="P:NClap.Metadata.CommandGroup`1.Selection">
            <summary>
            The enum value corresponding with the selected command, or null if no
            selection has yet been made.
            </summary>
        </member>
        <member name="P:NClap.Metadata.CommandGroup`1.NClap#Metadata#ICommandGroup#Selection">
            <summary>
            The enum value corresponding with the selected command, or null if no
            selection has yet been made.
            </summary>
        </member>
        <member name="P:NClap.Metadata.CommandGroup`1.InstantiatedCommand">
            <summary>
            The command presently selected from this group, or null if no
            selection has yet been made.
            </summary>
        </member>
        <member name="P:NClap.Metadata.CommandGroup`1.Help">
            <summary>
            Indicates if help information is desired.
            </summary>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.GetTypeDefiningArguments">
            <summary>
            Retrieve info for the object type that defines the arguments to be
            parsed.
            </summary>
            <returns>The defining type.</returns>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.GetDestinationObject">
            <summary>
            Retrieve a reference to the object into which parsed arguments
            should be stored.
            </summary>
            <returns>The object in question.</returns>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.Execute">
            <summary>
            Executes the command synchronously.
            </summary>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:NClap.Metadata.CommandGroup`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            </summary>
            <param name="cancel">Cancellation token.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="T:NClap.Metadata.CommandResult">
            <summary>
            Result from a command's execution.
            </summary>
        </member>
        <member name="F:NClap.Metadata.CommandResult.Success">
            <summary>
            The command completed successfully.
            </summary>
        </member>
        <member name="F:NClap.Metadata.CommandResult.Terminate">
            <summary>
            The command requested the termination of the caller.
            </summary>
        </member>
        <member name="F:NClap.Metadata.CommandResult.UsageError">
            <summary>
            The command detected a usage or syntax error.
            </summary>
        </member>
        <member name="F:NClap.Metadata.CommandResult.RuntimeFailure">
            <summary>
            The command experienced a runtime failure.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ExitCommand">
            <summary>
            Simple command implementation that only exits.
            </summary>
        </member>
        <member name="M:NClap.Metadata.ExitCommand.Execute">
            <summary>
            Does nothing, but indicates to the caller that termination is desired.
            </summary>
            <returns>CommandResult.Terminate</returns>
        </member>
        <member name="T:NClap.Metadata.ExtensibleEnumAttribute">
            <summary>
            Attribute that indicates the associated enum type is extensible.
            </summary>
        </member>
        <member name="M:NClap.Metadata.ExtensibleEnumAttribute.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">Provider.</param>
        </member>
        <member name="P:NClap.Metadata.ExtensibleEnumAttribute.Provider">
            <summary>
            Implementation of <see cref="T:NClap.Types.IEnumArgumentTypeProvider"/>.
            </summary>
        </member>
        <member name="T:NClap.Metadata.FileSystemPathValidationAttribute">
            <summary>
            Abstract base class for implementing argument validation attributes
            that inspect file-system paths.
            </summary>
        </member>
        <member name="M:NClap.Metadata.FileSystemPathValidationAttribute.AcceptsType(NClap.Types.IArgumentType)">
            <summary>
            Checks if this validation attributes accepts values of the specified
            type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this attribute accepts values of the specified
            type; false if not.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type" />
            is null.</exception>
        </member>
        <member name="T:NClap.Metadata.HelpArgumentsBase">
            <summary>
            Simple implementation of <see cref="T:NClap.Metadata.IArgumentSetWithHelp"/>.
            </summary>
        </member>
        <member name="P:NClap.Metadata.HelpArgumentsBase.Help">
            <summary>
            True if the user wants to receive usage help information; false
            otherwise.
            </summary>
        </member>
        <member name="T:NClap.Metadata.HelpCommand">
            <summary>
            Static class useful for configuring the behavior of help commands.
            </summary>
        </member>
        <member name="P:NClap.Metadata.HelpCommand.DefaultHelpOptions">
            <summary>
            The default options to use for generate help.
            </summary>
        </member>
        <member name="P:NClap.Metadata.HelpCommand.OutputHandler">
            <summary>
            The output handler function for this class.
            </summary>
        </member>
        <member name="T:NClap.Metadata.HelpCommandArgumentCompleter">
            <summary>
            Helper class used by <see cref="T:NClap.Metadata.HelpCommand`1"/>.
            </summary>
        </member>
        <member name="M:NClap.Metadata.HelpCommandArgumentCompleter.#ctor(NClap.Repl.Loop)">
            <summary>
            Constructs a new completer for the given loop.
            </summary>
            <param name="loop">Loop to generate completions for.</param>
        </member>
        <member name="M:NClap.Metadata.HelpCommandArgumentCompleter.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NClap.Metadata.HelpCommandAttribute">
            <summary>
            Attribute for annotating help commands.
            </summary>
        </member>
        <member name="M:NClap.Metadata.HelpCommandAttribute.GetImplementingType(System.Type)">
            <summary>
            Gets the type that "implements" this command.
            </summary>
            <param name="commandType">The type of the command associated with this
            attribute.</param>
            <returns>The type.</returns>
        </member>
        <member name="T:NClap.Metadata.HelpCommand`1">
            <summary>
            Command for display help about the commands available.
            </summary>
            <typeparam name="TCommandType">The command type.</typeparam>
        </member>
        <member name="M:NClap.Metadata.HelpCommand`1.#ctor(NClap.Repl.LoopOptions,NClap.Metadata.ArgumentSetAttribute)">
            <summary>
            Primary constructor.
            </summary>
            <param name="loopOptions">Loop options.</param>
            <param name="argSetAttrib">Argument set attribute.</param>
        </member>
        <member name="P:NClap.Metadata.HelpCommand`1.Arguments">
            <summary>
            Arguments to get help for.
            </summary>
        </member>
        <member name="M:NClap.Metadata.HelpCommand`1.Execute">
            <summary>
            Displays help about the available commands.
            </summary>
            <returns>Command result.</returns>
        </member>
        <member name="T:NClap.Metadata.IArgumentProvider">
            <summary>
            Interface for an object to expose additional arguments that it does
            not directly contain.
            </summary>
        </member>
        <member name="M:NClap.Metadata.IArgumentProvider.GetTypeDefiningArguments">
            <summary>
            Retrieve info for the object type that defines the arguments to be
            parsed.
            </summary>
            <returns>The defining type.</returns>
        </member>
        <member name="M:NClap.Metadata.IArgumentProvider.GetDestinationObject">
            <summary>
            Retrieve a reference to the object into which parsed arguments
            should be stored.
            </summary>
            <returns>The object in question.</returns>
        </member>
        <member name="T:NClap.Metadata.IArgumentSetWithHelp">
            <summary>
            Interface to be implemented on argument set types that expose help options.
            </summary>
        </member>
        <member name="P:NClap.Metadata.IArgumentSetWithHelp.Help">
            <summary>
            True if the user wants to receive usage help information; false
            otherwise.
            </summary>
        </member>
        <member name="T:NClap.Metadata.ICommand">
            <summary>
            Represents a command (a.k.a. verb).
            </summary>
        </member>
        <member name="M:NClap.Metadata.ICommand.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command.
            </summary>
            <param name="cancel">Cancellation token.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="T:NClap.Metadata.ICommandGroup">
            <summary>
            Interface for interacting with any command group.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ICommandGroup.HasSelection">
            <summary>
            True if the group has a selection, false if no selection was yet
            made.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ICommandGroup.Selection">
            <summary>
            The enum value corresponding with the selected command, or null if no
            selection has yet been made.
            </summary>
        </member>
        <member name="P:NClap.Metadata.ICommandGroup.InstantiatedCommand">
            <summary>
            The command presently selected from this group, or null if no
            selection has yet been made.
            </summary>
        </member>
        <member name="T:NClap.Metadata.IntegerComparisonValidationAttribute">
            <summary>
            Abstract base class for integer validation attributes that compare
            against a known value.
            </summary>
        </member>
        <member name="M:NClap.Metadata.IntegerComparisonValidationAttribute.#ctor(System.Object)">
            <summary>
            Constructor for derived classes to use.
            </summary>
            <param name="target">Value to compare against.</param>
        </member>
        <member name="P:NClap.Metadata.IntegerComparisonValidationAttribute.Target">
            <summary>
            Fixed comparison value for validation.
            </summary>
        </member>
        <member name="T:NClap.Metadata.IntegerValidationAttribute">
            <summary>
            Abstract base class for implementing argument validation attributes
            that inspect integers.
            </summary>
        </member>
        <member name="M:NClap.Metadata.IntegerValidationAttribute.AcceptsType(NClap.Types.IArgumentType)">
            <summary>
            Checks if this validation attributes accepts values of the specified
            type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this attribute accepts values of the specified
            type; false if not.</returns>
        </member>
        <member name="M:NClap.Metadata.IntegerValidationAttribute.GetArgumentType(System.Object)">
            <summary>
            Retrieves the the argument type associated with the provided integer
            value.
            </summary>
            <param name="value">The value.</param>
            <returns>The argument type.</returns>
        </member>
        <member name="T:NClap.Metadata.MustBeGreaterThanAttribute">
            <summary>
            Attribute that indicates the associated integer argument member must
            be greater than a given value.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustBeGreaterThanAttribute.#ctor(System.Object)">
            <summary>
            Primary constructor.
            </summary>
            <param name="target">Value to compare against.</param>
        </member>
        <member name="M:NClap.Metadata.MustBeGreaterThanAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.MustBeGreaterThanOrEqualToAttribute">
            <summary>
            Attribute that indicates the associated integer argument member must
            be greater than or equal to a given value.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustBeGreaterThanOrEqualToAttribute.#ctor(System.Object)">
            <summary>
            Primary constructor.
            </summary>
            <param name="target">Value to compare against.</param>
        </member>
        <member name="M:NClap.Metadata.MustBeGreaterThanOrEqualToAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.MustBeLessThanAttribute">
            <summary>
            Attribute that indicates the associated integer argument member must
            be less than a given value.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustBeLessThanAttribute.#ctor(System.Object)">
            <summary>
            Primary constructor.
            </summary>
            <param name="target">Value to compare against.</param>
        </member>
        <member name="M:NClap.Metadata.MustBeLessThanAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.MustBeLessThanOrEqualToAttribute">
            <summary>
            Attribute that indicates the associated integer argument member must
            be less than or equal to a given value.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustBeLessThanOrEqualToAttribute.#ctor(System.Object)">
            <summary>
            Primary constructor.
            </summary>
            <param name="target">Value to compare against.</param>
        </member>
        <member name="M:NClap.Metadata.MustBeLessThanOrEqualToAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.PathExists">
            <summary>
            Describes a path's existence.
            </summary>
        </member>
        <member name="F:NClap.Metadata.PathExists.AsFile">
            <summary>
            The path exists as a file.
            </summary>
        </member>
        <member name="F:NClap.Metadata.PathExists.AsDirectory">
            <summary>
            The path exists as a directory.
            </summary>
        </member>
        <member name="F:NClap.Metadata.PathExists.AsFileOrDirectory">
            <summary>
            The path exists as a file or directory.
            </summary>
        </member>
        <member name="T:NClap.Metadata.MustExistAttribute">
            <summary>
            Attribute that indicates the associated file-system path argument
            member must name a file or directory that exists.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustExistAttribute.#ctor(NClap.Metadata.PathExists)">
            <summary>
            Constructs a new attribute instance.
            </summary>
            <param name="exists">Required existence.</param>
        </member>
        <member name="P:NClap.Metadata.MustExistAttribute.Exists">
            <summary>
            Flags controlling existence validation.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustExistAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/>
            is null.</exception>
        </member>
        <member name="T:NClap.Metadata.MustMatchRegexAttribute">
            <summary>
            Attribute that requires the associated string argument to match the
            specified regular expression.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustMatchRegexAttribute.#ctor(System.String)">
            <summary>
            Primary constructor.
            </summary>
            <param name="pattern">The regular expression pattern to match
            against.</param>
        </member>
        <member name="P:NClap.Metadata.MustMatchRegexAttribute.Pattern">
            <summary>
            The regular expression pattern matched by this attribute.
            </summary>
        </member>
        <member name="P:NClap.Metadata.MustMatchRegexAttribute.Options">
            <summary>
            The options to use in constructing the regular expression.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustMatchRegexAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.MustNotBeAttribute">
            <summary>
            Attribute that indicates the associated string argument member cannot be
            empty.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustNotBeAttribute.#ctor(System.Object)">
            <summary>
            Constructs a new validation attribute that requires the associated
            argument's value to not be equal to the specified value.
            </summary>
            <param name="value">The value that the argument may not equal.
            </param>
        </member>
        <member name="P:NClap.Metadata.MustNotBeAttribute.Value">
            <summary>
            The value that this attribute checks against.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustNotBeAttribute.AcceptsType(NClap.Types.IArgumentType)">
            <summary>
            Checks if this validation attributes accepts values of the specified
            type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this attribute accepts values of the specified
            type; false if not.</returns>
        </member>
        <member name="M:NClap.Metadata.MustNotBeAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.MustNotBeEmptyAttribute">
            <summary>
            Attribute that indicates the associated string argument member cannot be
            empty.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustNotBeEmptyAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.MustNotExistAttribute">
            <summary>
            Attribute that indicates the associated file-system path argument
            member must name a directory that exists.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustNotExistAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/>
            is null.</exception>
        </member>
        <member name="T:NClap.Metadata.MustNotMatchRegexAttribute">
            <summary>
            Attribute that requires the associated string argument *not* match the
            specified regular expression.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustNotMatchRegexAttribute.#ctor(System.String)">
            <summary>
            Primary constructor.
            </summary>
            <param name="pattern">The regular expression pattern to match
            against.</param>
        </member>
        <member name="P:NClap.Metadata.MustNotMatchRegexAttribute.Pattern">
            <summary>
            The regular expression pattern matched by this attribute.
            </summary>
        </member>
        <member name="P:NClap.Metadata.MustNotMatchRegexAttribute.Options">
            <summary>
            The options to use in constructing the regular expression.
            </summary>
        </member>
        <member name="M:NClap.Metadata.MustNotMatchRegexAttribute.TryValidate(NClap.Metadata.ArgumentValidationContext,System.Object,System.String@)">
            <summary>
            Validate the provided value in accordance with the attribute's
            policy.
            </summary>
            <param name="context">Context for validation.</param>
            <param name="value">The value to validate.</param>
            <param name="reason">On failure, receives a user-readable string
            message explaining why the value is not valid.</param>
            <returns>True if the value passes validation; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Metadata.NamedArgumentAttribute">
            <summary>
            Indicates that this argument is a named argument.  Attach this attribute
            to instance fields (or properties) of types used as the destination
            of command-line argument parsing.
            </summary>
        </member>
        <member name="M:NClap.Metadata.NamedArgumentAttribute.#ctor">
            <summary>
            Default constructor, which may be used to indicate an optional
            named argument that may appear at most once.
            </summary>
        </member>
        <member name="M:NClap.Metadata.NamedArgumentAttribute.#ctor(NClap.Metadata.ArgumentFlags)">
            <summary>
            Constructor that requires specifying flags.
            </summary>
            <param name="flags">Specifies the error checking to be done on the
            argument.</param>
        </member>
        <member name="P:NClap.Metadata.NamedArgumentAttribute.ShortName">
            <summary>
            The short name of the argument.  Set to null means use the default
            short name if it does not conflict with any other parameter name.
            Set to string.Empty for no short name.
            </summary>
        </member>
        <member name="T:NClap.Metadata.NumberOptions">
            <summary>
            Options describing how to parse numeric values.
            </summary>
        </member>
        <member name="F:NClap.Metadata.NumberOptions.None">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:NClap.Metadata.NumberOptions.AllowMetricUnitSuffix">
            <summary>
            Allow use of metric unit suffixes (e.g. k to denote a multiplier of
            1 thousand, M to denote a multiplier of 1 million).  This option
            conflicts with AllowBinaryMetricUnitSuffix.  If both flags are
            present, then AllowBinaryMetricUnitSuffix takes precedence.
            </summary>
        </member>
        <member name="F:NClap.Metadata.NumberOptions.AllowBinaryMetricUnitSuffix">
            <summary>
            Allow use of binary metric unit suffixes (e.g. k to denote 1024,
            M to denote 1024 * 1024).  This option conflicts with
            AllowMetricUnitSuffix.    If both flags are present, then
            AllowBinaryMetricUnitSuffix takes precedence.
            </summary>
        </member>
        <member name="T:NClap.Metadata.PositionalArgumentAttribute">
            <summary>
            Indicates that this argument is an (unnamed) positional argument.  The
            LongName property is used for usage text only and does not affect the
            usage of the argument.
            </summary>
        </member>
        <member name="M:NClap.Metadata.PositionalArgumentAttribute.#ctor">
            <summary>
            Default constructor, which may be used to indicate an optional
            positional argument that may appear at most once.
            </summary>
        </member>
        <member name="M:NClap.Metadata.PositionalArgumentAttribute.#ctor(NClap.Metadata.ArgumentFlags)">
            <summary>
            Indicates that this argument is a default, positional argument.
            </summary>
            <param name="flags">Specifies the error checking to be done on the
            argument.</param>
        </member>
        <member name="P:NClap.Metadata.PositionalArgumentAttribute.Position">
            <summary>
            The zero-based index of this argument amongst all (positional)
            default arguments.  Each default argument present within an
            object must have a unique position value, and they must be
            consecutive, with the smallest being zero.
            </summary>
        </member>
        <member name="T:NClap.Metadata.StringValidationAttribute">
            <summary>
            Abstract base class for implementing argument validation attributes
            that inspect strings.
            </summary>
        </member>
        <member name="M:NClap.Metadata.StringValidationAttribute.AcceptsType(NClap.Types.IArgumentType)">
            <summary>
            Checks if this validation attributes accepts values of the specified
            type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this attribute accepts values of the specified
            type; false if not.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type" />
            is null.</exception>
        </member>
        <member name="M:NClap.Metadata.StringValidationAttribute.GetString(System.Object)">
            <summary>
            Retrieves a string from the object, for use in validation.
            </summary>
            <param name="value">The object to retrieve the string from.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:NClap.Metadata.SynchronousCommand">
            <summary>
            Base class for implementing synchronously executing commands.
            </summary>
        </member>
        <member name="M:NClap.Metadata.SynchronousCommand.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command.
            </summary>
            <param name="cancel">Cancellation token.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:NClap.Metadata.SynchronousCommand.Execute">
            <summary>
            Executes the command.
            </summary>
            <returns>Result of execution.</returns>
        </member>
        <member name="T:NClap.Metadata.UnimplementedCommand">
            <summary>
            Simple stub command implementation that is not implemented.
            </summary>
        </member>
        <member name="M:NClap.Metadata.UnimplementedCommand.Execute">
            <summary>
            Throws an exception.
            </summary>
            <returns>Does not return.</returns>
        </member>
        <member name="T:NClap.Parser.ArgumentDefinition">
            <summary>
            Describes a command-line argument.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.#ctor(System.Reflection.MemberInfo,NClap.Metadata.ArgumentBaseAttribute,NClap.Parser.ArgumentSetDefinition,System.Object,NClap.Parser.ArgumentDefinition,NClap.ServiceConfigurer)">
            <summary>
            Constructor.
            </summary>
            <param name="member">Info for the member backing this argument.</param>
            <param name="attribute">Argument attribute on the field.</param>
            <param name="argSet">Argument set containing this argument.</param>
            <param name="defaultValue">Default value for the field.</param>
            <param name="containingArgument">Optionally provides a reference
            to the definition of the argument that "contains" these arguments.
            </param>
            <param name="serviceConfigurer">Optionally provides a service configurer.</param>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.#ctor(NClap.Utilities.IMutableMemberInfo,NClap.Metadata.ArgumentBaseAttribute,NClap.Parser.ArgumentSetDefinition,System.Object,System.Object,NClap.Parser.ArgumentDefinition,NClap.ServiceConfigurer)">
            <summary>
            Internal constructor.
            </summary>
            <param name="member">Field to describe.</param>
            <param name="attribute">Argument attribute on the field.</param>
            <param name="argSet">Argument set containing this argument.</param>
            <param name="defaultValue">Default value for the field.</param>
            <param name="fixedDestination">Optionally provides fixed parse destination object.</param>
            <param name="containingArgument">Optionally provides a reference
            to the definition of the argument that "contains" these arguments.
            </param>
            <param name="serviceConfigurer">Optionally provides a service configurer.</param>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.LongName">
            <summary>
            The argument's long form name, if one exists; null otherwise.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ShortName">
            <summary>
            The argument's short form name, if one exists; null otherwise.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ExplicitShortName">
            <summary>
            True indicates that the argument's short form name was explicitly
            specified; false indicates that the name was defaulted.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.HasDefaultValue">
            <summary>
            True if the argument has a default value, false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.DefaultValue">
            <summary>
            The default value to associate with the argument if one is not
            specified on the command line being parsed.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.EffectiveDefaultValue">
            <summary>
            The effective default value associated with the argument.  This
            is equivalent to DefaultValue if HasDefaultValue is true.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.TakesRestOfLine">
            <summary>
            True indicates that this argument consumes the remainder of the
            command line being parsed; false indicates that it only consumes
            a single command-line token.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.IsRequired">
            <summary>
            True indicates that this argument is required to be present; false
            indicates that it's optional.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.AllowMultiple">
            <summary>
            True indicates that this argument may be specified multiple times
            on the command line; false indicates that it may only be specified
            once.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.Unique">
            <summary>
            True indicates that each instance of this argument must be unique;
            false indicates that this restriction is not applicable.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.IsCollection">
            <summary>
            True if the argument is a collection argument; false if it's a
            scalar.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.Hidden">
            <summary>
            True indicates that this argument should not be mentioned by
            usage help information; false indicates that it should be included.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.Attribute">
            <summary>
            The argument's static metadata.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ContainingArgument">
            <summary>
            Optional reference to the definition of the argument that "contains"
            this argument.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ContainingSet">
            <summary>
            The argument set containing this argument.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.Member">
            <summary>
            The object member bound to this argument.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ArgumentType">
            <summary>
            Type of the argument.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.FixedDestination">
            <summary>
            Optionally indicates the destination object to which this is fixed.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ValueType">
            <summary>
            The type of values for this argument; for collection-backed arguments, this
            is the type of elements of the collection.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.CollectionArgumentType">
            <summary>
            If this argument is backed by a collection, provides the collection argument
            type; otherwise, null.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.IsPositional">
            <summary>
            True if this argument is positional; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ValidationAttributes">
            <summary>
            Enumerates all validation attributes for this one.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.ConflictingArgs">
            <summary>
            Enumerates all arguments that conflict with this one.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.ToString">
            <summary>
            String summary of object.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.AddConflictingArgument(NClap.Parser.ArgumentDefinition)">
            <summary>
            Registers an Argument that conflicts with the one described by this
            object.  If the specified argument has already previously been
            registered, then this operation is a no-op.
            </summary>
            <param name="arg">The conflicting argument.</param>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.Format(System.Object,System.Boolean)">
            <summary>
            Formats the argument into a string.
            </summary>
            <param name="value">Value to format.</param>
            <param name="suppressArgNames">True to suppress argument names;
            false to leave them in.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.GetSyntaxSummary(System.Boolean)">
            <summary>
            Generates syntax help information for this argument.
            </summary>
            <param name="detailed">true to return detailed information,
            including full argument type information; false to return abridged
            information.</param>
            <returns>The help content in string form.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.GetValue(System.Object)">
            <summary>
            Retrieves the value associated with this argument in the provided
            containing object.
            </summary>
            <param name="containingValue">The containing object.</param>
            <returns>The value associated with this argument's field.</returns>
        </member>
        <member name="P:NClap.Parser.ArgumentDefinition.RequiresOptionArgument">
            <summary>
            Checks whether this argument requires an option argument.
            </summary>
            <returns>true if it's required, false if it's optional.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.RequiresOptionArgumentEx(NClap.CommandLineParserOptions)">
            <summary>
            Checks whether this argument requires an option argument when
            parsing with the given options.
            </summary>
            <param name="options">Parser options.</param>
            <returns>true if it's required, false if it's optional.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.ClearShortName">
            <summary>
            Clears the short name associated with this argument.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.GetName(NClap.Parser.ArgumentNameType)">
            <summary>
            Tries to retrieve the name of the given type associated with this
            argument.  If no such name of that type exists, returns null.
            </summary>
            <param name="nameType">The type of name to retrieve.</param>
            <returns>The given name, or null if no such name exists.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.IsEmptyStringValid(NClap.CommandLineParserOptions)">
            <summary>
            Checks if the empty string is a valid value for this argument.
            </summary>
            <param name="parserOptions">Parser options.</param>
            <returns>true if it is valid; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentDefinition.GetArgumentType(NClap.Metadata.ArgumentBaseAttribute,NClap.Utilities.IMutableMemberInfo,System.Type,NClap.ServiceConfigurer)">
            <summary>
            Retrieves the <see cref="T:NClap.Types.IArgumentType"/> type for the provided type.
            </summary>
            <param name="attrib">The argument attribute to use.</param>
            <param name="memberInfo">Member info for the argument.</param>
            <param name="type">The type to look up.</param>
            <param name="configurer">Optionally provides service configurer.</param>
            <returns>The found type.</returns>
        </member>
        <member name="T:NClap.Parser.ArgumentNameType">
            <summary>
            Type of a name for a named argument.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentNameType.ShortName">
            <summary>
            A short name.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentNameType.LongName">
            <summary>
            A long name.
            </summary>
        </member>
        <member name="T:NClap.Parser.ArgumentParser">
            <summary>
            Encapsulates the state of an in-progress parse operation.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentParser.#ctor(NClap.Parser.ArgumentSetDefinition,NClap.Parser.ArgumentDefinition,NClap.CommandLineParserOptions,System.Object)">
            <summary>
            Constructs a new stateful parser for the given argument.
            </summary>
            <param name="argSet">The argument set containing the argument to be parsed.</param>
            <param name="arg">The definition of the argument.</param>
            <param name="options">General options for parsing this argument set.</param>
            <param name="destination">The destination object into which the parsed result should go,
            if so desired; null otherwise to parse without saving results.</param>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.ArgumentSet">
            <summary>
            Argument set containing the definition of the argument to be parsed.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.Argument">
            <summary>
            Argument to be parsed.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.ParseContext">
            <summary>
            Context for parsing.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.Reporter">
            <summary>
            Object to use to report errors.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.CollectionValues">
            <summary>
            For collections, stores the in-progress list of values seen.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.DestinationObject">
            <summary>
            Destination object into which parsed and finalized result should be
            stored. May not be present.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentParser.SeenValue">
            <summary>
            State variable indicating whether this argument has been seen in
            the currently-being-parsed command line.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentParser.TryFinalize(NClap.IFileSystemReader)">
            <summary>
            Finalizes parsing of the argument, reporting any errors from policy
            violations (e.g. missing required arguments).
            </summary>
            <param name="fileSystemReader">File system reader to use.</param>
            <returns>True indicates that finalization completed successfully;
            false indicates that a failure occurred.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentParser.TryParseAndStore(NClap.Parser.ArgumentSetParser,System.String,System.Object@)">
            <summary>
            Parses the provided value string using this object's value type.
            </summary>
            <param name="setParseState">Current parse state for containing arg set.</param>
            <param name="value">The string to parse.</param>
            <param name="parsedValue">On success, receives the parsed value.
            </param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentParser.TrySetRestOfLine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fills out this argument with the remainder of the provided command
            line.
            </summary>
            <param name="restOfLine">Remainder of the command-line tokens.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentParser.GetCompletions(System.Collections.Generic.IReadOnlyList{System.String},System.Int32,System.String,System.Object)">
            <summary>
            Generate possible completions of this argument that start with the
            provided string prefix.
            </summary>
            <param name="tokens">The set of tokens in the input being completed.
            </param>
            <param name="indexOfTokenToComplete">The 0-based index of the token
            to complete.</param>
            <param name="valueToComplete">The prefix string.</param>
            <param name="inProgressParsedObject">Optionally, the object
            resulting from parsing and processing the tokens before the one
            being completed.</param>
            <returns>Possible completions.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentParser.TryValidateValue(System.Object,NClap.Metadata.ArgumentValidationContext,System.Boolean)">
            <summary>
            Attempts to validate the given value in the provided context.
            </summary>
            <param name="value">Value to validate.</param>
            <param name="validationContext">Context for validation.</param>
            <param name="reportInvalidValue">Whether or not invalid values should
            be reported.</param>
            <returns>true if the value passed validation; false otherwise.</returns>
        </member>
        <member name="T:NClap.Parser.ArgumentSetDefinition">
            <summary>
            Encapsulates an argument set.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.#ctor(NClap.Metadata.ArgumentSetAttribute)">
            <summary>
            Constructs an empty argument set.
            </summary>
            <param name="setAttribute">Optionally provides attribute information describing the
            argument set.</param>
        </member>
        <member name="P:NClap.Parser.ArgumentSetDefinition.Attribute">
            <summary>
            Options for the set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetDefinition.AllArguments">
            <summary>
            All arguments in this set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetDefinition.NamedArguments">
            <summary>
            The named arguments in this set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetDefinition.PositionalArguments">
            <summary>
            The positional arguments in this set, in index order.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetDefinition.DefaultAssembly">
            <summary>
            Optionally indicates the default assembly associated with this definition.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.GetAllArgumentNames">
            <summary>
            Enumerates all names of named arguments (of all name types).
            </summary>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.GetAllArgumentNames(System.Boolean)">
            <summary>
            Enumerates all names of named arguments (of all name types), possibly excluding
            hidden arguments.
            </summary>
            <param name="includeHiddenArguments">true to include names for hidden arguments; false to
            exclude them.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.GetArgumentNames(NClap.Parser.ArgumentNameType)">
            <summary>
            Enumerates named arguments of the given type.
            </summary>
            <param name="nameType">Type of name to look up.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.TryGetNamedArgument(NClap.Parser.ArgumentNameType,System.String,NClap.Parser.ArgumentDefinition@)">
            <summary>
            Try to look up a named argument by short or long name.
            </summary>
            <param name="nameType">Type of name to look up.</param>
            <param name="name">Name to look up.</param>
            <param name="arg">On success, receives the named argument.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.TryGetPositionalArgument(System.Int32,NClap.Parser.ArgumentDefinition@)">
            <summary>
            Try to look up a positional argument by position.
            </summary>
            <param name="position">0-based position index to look up.</param>
            <param name="arg">On success, receives the argument.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.Add(NClap.Parser.ArgumentDefinition)">
            <summary>
            Adds an argument.
            </summary>
            <param name="arg">Argument to define.</param>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.Add(System.Collections.Generic.IEnumerable{NClap.Parser.ArgumentDefinition})">
            <summary>
            Adds arguments.
            </summary>
            <param name="args">Arguments to define.</param>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.AddAuxiliaryAttribute(NClap.Metadata.ArgumentSetAttribute)">
            <summary>
            Adds an auxiliary argument set attribute.
            </summary>
            <param name="attrib">Attribute to add.</param>
        </member>
        <member name="M:NClap.Parser.ArgumentSetDefinition.DeepClone">
            <summary>
            Shallow clones this definition.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="P:NClap.Parser.ArgumentSetDefinition.StringComparerToUse">
            <summary>
            String comparer to use for names in this argument set.
            </summary>
        </member>
        <member name="T:NClap.Parser.ArgumentSetParser">
            <summary>
            Encapsulates the state of an in-progress parse of an argument set.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.#ctor(NClap.Parser.ArgumentSetDefinition,NClap.CommandLineParserOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="argSet">Argument set to create parser for.</param>
            <param name="options">Parser options.</param>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParser.NextPositionalArgIndexToParse">
            <summary>
            Keeps track of the index of the next positional argument to parse.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParser.ArgumentSet">
            <summary>
            The argument set used by the parser.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.HasSeenValueFor(NClap.Parser.ArgumentDefinition)">
            <summary>
            Checks if this parser has seen a value provided for the given argument.
            </summary>
            <param name="arg">The argument to look for.</param>
            <returns>True if a value has been seen; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.ParseArgumentList(System.Collections.Generic.IEnumerable{System.String},System.Object)">
            <summary>
            Tries to parse the given list of tokens.
            </summary>
            <param name="args">Argument tokens to parse.</param>
            <param name="destination">Destination object to store the parsed values.
            May be null.</param>
            <returns>Result of the parsing.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.GetCompletions(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Func{System.Object})">
            <summary>
            Generates possible completions for the indicated argument token.
            </summary>
            <param name="tokens">Full list of tokens in context.</param>
            <param name="indexOfTokenToComplete">0-based index of token
            to complete; must either reference valid token in <paramref name="tokens"/>
            or the index of the next token that would follow the provided
            tokens.</param>
            <param name="destObjectFactory">Optionally provides a function
            that may be used to instantiate an object of the destination
            parse output type.</param>
            <returns>Possible completions for the token.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.GetStateForArgument(NClap.Parser.ArgumentDefinition,System.Object)">
            <summary>
            Retrieves the parse state for the given argument.  If no such state exists,
            then a state object is constructed and persisted.
            </summary>
            <param name="arg">The argument to look up.</param>
            <param name="destination">Optionally provides the destination object
            being parsed into.</param>
            <returns>The parse state for the given argument.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.ParseTokens(System.Collections.Generic.IEnumerable{System.String},System.Object)">
            <summary>
            Parses an argument list into an object.
            </summary>
            <param name="args">String arguments to parse.</param>
            <param name="destination">Output arguments object.</param>
            <returns>Parse result.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.Finalize(System.Object,NClap.Parser.ArgumentSetParseResult)">
            <summary>
            Tries to finalize parsing to the given output object.
            </summary>
            <param name="destination">Output object.</param>
            <param name="parseResult">Parse result.</param>
            <returns>Parse result.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.TryGetLongNameArgumentPrefix(System.String,System.Boolean)">
            <summary>
            Tries to find an 'long name argument prefix' in the provided token.
            </summary>
            <param name="arg">The token to inspect.</param>
            <param name="allowIncompleteToken">Whether or not this function matches
            incomplete tokens.</param>
            <returns>The matching prefix on success; null otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.TryGetShortNameArgumentPrefix(System.String,System.Boolean)">
            <summary>
            Tries to find an 'short name argument prefix' in the provided token.
            </summary>
            <param name="arg">The token to inspect.</param>
            <param name="allowIncompleteToken">Whether or not this function matches
            incomplete tokens.</param>
            <returns>The matching prefix on success; null otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParser.TryGetAnswerFilePrefix(System.String)">
            <summary>
            Tries to find an 'answer file prefix' in the provided token.
            </summary>
            <param name="arg">The token to inspect.</param>
            <returns>The matching prefix on success; null otherwise.</returns>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParser.StringComparerToUse">
            <summary>
            String comparer to use for names in this argument set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParser.StringComparisonToUse">
            <summary>
            String comparison to use for names in this argument set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParser.ArgumentTerminatorsAndSeparators">
            <summary>
            Valid terminator and separator chars for this argument set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParser.ArgumentNameTerminators">
            <summary>
            Valid argument name terminators for this argument set.
            </summary>
        </member>
        <member name="T:NClap.Parser.ArgumentSetParseResult">
            <summary>
            Encapsulates the result of parsing an argument set.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParseResult.Ready(NClap.Parser.ArgumentDefinition)">
            <summary>
            Constructs a result for cases where parser is ready.
            </summary>
            <param name="lastParsedArg">If non-null, indicates the last argument
            that was parsed.</param>
            <returns>The result object. </returns>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParseResult.UnknownNamedArgument(System.Nullable{NClap.Parser.ArgumentNameType},System.String)">
            <summary>
            Constructs a result for cases where parser has encountered an unknown named
            argument.
            </summary>
            <param name="namedArgType">The type of named argument encountered, if available.</param>
            <param name="name">The name encountered, if available.</param>
            <returns>The result object.</returns>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.UnknownPositionalArgument">
            <summary>
            A singleton result for cases where parser has encountered an unknown positional
            argument.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.FailedParsing">
            <summary>
            A singleton result for cases where parser has generically failed parsing.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.FailedFinalizing">
            <summary>
            A singleton result for cases where parser has failed to finalize an argument
            set.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.InvalidAnswerFile">
            <summary>
            A singleton result for cases where parser has encountered an invalid answer
            file.
            </summary>
        </member>
        <member name="M:NClap.Parser.ArgumentSetParseResult.RequiresOptionArgument(NClap.Parser.ArgumentDefinition)">
            <summary>
            Constructs a result for cases where parser is next looking to see an argument
            to an option.
            </summary>
            <param name="arg">Argument that requires option argument.</param>
            <returns>The constructed result object.</returns>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.State">
            <summary>
            State of the parse result.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.LastSeenArg">
            <summary>
            Argument referred to by the state. Not applicable to all states.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.NamedArgType">
            <summary>
            Named argument type referred to by the state. Not applicable to all states.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.NamedArg">
            <summary>
            Name referred to by the state. Not applicable to all states.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.IsReady">
            <summary>
            Convenience property for checking if the parser is ready to parse more.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.IsFailed">
            <summary>
            Convenience property for checking if the parser is in a failed state.
            </summary>
        </member>
        <member name="P:NClap.Parser.ArgumentSetParseResult.IsUnknown">
            <summary>
            Convenience property for checking if the parser has encountered an unknown
            argument.
            </summary>
        </member>
        <member name="T:NClap.Parser.ArgumentSetParseResultType">
            <summary>
            Describes a result state for parsing an argument set.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.Ready">
            <summary>
            Parser is ready to parse more arguments.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.UnknownNamedArgument">
            <summary>
            Parser has encountered an unknown named argument.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.UnknownPositionalArgument">
            <summary>
            Parser has encountered an unknown positional argument.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.FailedParsing">
            <summary>
            Parser has failed to parse an argument.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.FailedFinalizing">
            <summary>
            Parser has failed to finalize an argument set.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.InvalidAnswerFile">
            <summary>
            Parser has encountered an invalid answer file.
            </summary>
        </member>
        <member name="F:NClap.Parser.ArgumentSetParseResultType.RequiresOptionArgument">
            <summary>
            Parser is waiting for an option argument.
            </summary>
        </member>
        <member name="T:NClap.Parser.AttributeBasedArgumentDefinitionFactory">
            <summary>
            Factory class useful for defining an argument set from reflecting on
            attributes associated with a type and its members.
            </summary>
        </member>
        <member name="M:NClap.Parser.AttributeBasedArgumentDefinitionFactory.CreateArgumentSet(System.Type,NClap.Metadata.ArgumentSetAttribute,System.Object,System.Object,NClap.ServiceConfigurer)">
            <summary>
            Defines an argument set based on the reflection-based attributes
            stored on the provided type.
            </summary>
            <param name="typeToReflectOn">The type to inspect.</param>
            <param name="attribute">Attribute info for the argument set; if this
            argument is present and if there's already an attribute associated
            with the type being reflected on, then this one will replace the
            other one.</param>
            <param name="defaultValues">Optionally provides an object containing
            default values not otherwise captured by reflection info.</param>
            <param name="fixedDestination">Optionally provides a fixed object
            to store values to; regardless of the target object provided,
            parsed values will always be stored to this one.</param>
            <param name="serviceConfigurer">Optionally provides a service
            configurer.</param>
            <returns>Created argument set.</returns>
        </member>
        <member name="M:NClap.Parser.AttributeBasedArgumentDefinitionFactory.AddToArgumentSet(NClap.Parser.ArgumentSetDefinition,System.Type,System.Object,System.Object,NClap.Parser.ArgumentDefinition,NClap.ServiceConfigurer)">
            <summary>
            Adds arguments to an existing argument set based on the reflection-
            based attributes stored on the provided type.
            </summary>
            <param name="argSet">Argument set to add to.</param>
            <param name="typeToReflectOn">The type to inspect.</param>
            <param name="defaultValues">Optionally provides an object containing
            default values not otherwise captured by reflection info.</param>
            <param name="fixedDestination">Optionally provides a fixed object
            to store values to; regardless of the target object provided,
            parsed values will always be stored to this one.</param>
            <param name="containingArgument">Optionally provides a reference
            to the definition of the argument that "contains" these arguments.
            </param>
            <param name="serviceConfigurer">Optionally provides a service
            configurer.</param>
        </member>
        <member name="T:NClap.Parser.CommandDefinition">
            <summary>
            Describes a command.
            </summary>
        </member>
        <member name="M:NClap.Parser.CommandDefinition.#ctor(System.Object,System.Type)">
            <summary>
            Defines a command.
            </summary>
            <param name="key">Value that was used / can be used to select this command.</param>
            <param name="implementingType">Type that implements this command.</param>
        </member>
        <member name="P:NClap.Parser.CommandDefinition.Key">
            <summary>
            Value that selects this command.
            </summary>
        </member>
        <member name="P:NClap.Parser.CommandDefinition.ImplementingType">
            <summary>
            Implementing type for this command.
            </summary>
        </member>
        <member name="M:NClap.Parser.CommandDefinition.Instantiate(NClap.ServiceConfigurer)">
            <summary>
            Instantiate the command.
            </summary>
            <param name="serviceConfigurer">Service configurer.</param>
            <returns>Instantiated command object.</returns>
        </member>
        <member name="T:NClap.Parser.CommandGroupDefinition">
            <summary>
            Describes a command group.
            </summary>
        </member>
        <member name="M:NClap.Parser.CommandGroupDefinition.#ctor(NClap.Types.IArgumentType)">
            <summary>
            Constructs a new command group definition.
            </summary>
            <param name="argType">Argument type associated with this command group definition.</param>
        </member>
        <member name="P:NClap.Parser.CommandGroupDefinition.ArgumentType">
            <summary>
            Argument type associated with this command group definition.
            </summary>
        </member>
        <member name="P:NClap.Parser.CommandGroupDefinition.Commands">
            <summary>
            Enumerates all commands defined in this group.
            </summary>
        </member>
        <member name="M:NClap.Parser.CommandGroupDefinition.Add(NClap.Parser.CommandDefinition)">
            <summary>
            Add a new command to this group.
            </summary>
            <param name="command">Command to add.</param>
        </member>
        <member name="M:NClap.Parser.CommandGroupDefinition.TryGetCommand(System.Object,NClap.Parser.CommandDefinition@)">
            <summary>
            Tries to retrieve the definition of the command associated with the
            given key.
            </summary>
            <param name="key">Key to look up.</param>
            <param name="command">On success, receives the matching command definition.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Parser.FileSystemReader">
            <summary>
            Stock implementation of the answer file reader interface.
            </summary>
        </member>
        <member name="M:NClap.Parser.FileSystemReader.Create">
            <summary>
            Public factory method.
            </summary>
            <returns>A file system reader instance.</returns>
        </member>
        <member name="F:NClap.Parser.FileSystemReader.Instance">
            <summary>
            Singleton instance of this class.
            </summary>
        </member>
        <member name="M:NClap.Parser.FileSystemReader.FileExists(System.String)">
            <summary>
            Checks if the path exists as a file.
            </summary>
            <param name="path">Path to check.</param>
            <returns>True if the path exists and references a non-directory
            file; false otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.FileSystemReader.DirectoryExists(System.String)">
            <summary>
            Checks if the path exists as a directory.
            </summary>
            <param name="path">Path to check.</param>
            <returns>True if the path exists and references a directory; false
            otherwise.</returns>
        </member>
        <member name="M:NClap.Parser.FileSystemReader.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>
            Enumerates the names of the files and directories that exist in the
            indicated directory, and which match the provided file pattern.
            </summary>
            <param name="directoryPath">Path to the containing directory.</param>
            <param name="filePattern">The file pattern to match.</param>
            <returns>An enumeration of the names of the files.</returns>
        </member>
        <member name="M:NClap.Parser.FileSystemReader.GetLines(System.String)">
            <summary>
            Enumerate the textual lines in the specified file.
            </summary>
            <param name="filePath">Path to the file.</param>
            <returns>The line enumeration.</returns>
        </member>
        <member name="T:NClap.Repl.ConsoleLoopClient">
            <summary>
            Console implementation of <see cref="T:NClap.Repl.ILoopClient" />.
            </summary>
        </member>
        <member name="M:NClap.Repl.ConsoleLoopClient.#ctor(NClap.ConsoleInput.IConsoleReader)">
            <summary>
            Primary constructor.
            </summary>
            <param name="reader">Console reader to use.</param>
        </member>
        <member name="P:NClap.Repl.ConsoleLoopClient.Prompt">
            <summary>
            The string to be displayed when prompting for input.
            </summary>
        </member>
        <member name="P:NClap.Repl.ConsoleLoopClient.PromptWithColor">
            <summary>
            The loop prompt (with color).
            </summary>
        </member>
        <member name="P:NClap.Repl.ConsoleLoopClient.EndOfLineCommentCharacter">
            <summary>
            The character that starts a comment.
            </summary>
        </member>
        <member name="P:NClap.Repl.ConsoleLoopClient.TokenCompleter">
            <summary>
            Optionally provides a token completer that may be used.
            </summary>
        </member>
        <member name="P:NClap.Repl.ConsoleLoopClient.Reader">
            <summary>
            The client's console reader.
            </summary>
        </member>
        <member name="M:NClap.Repl.ConsoleLoopClient.ReadLine">
            <summary>
            Reads a line of text input.
            </summary>
            <returns>The read line.</returns>
        </member>
        <member name="M:NClap.Repl.ConsoleLoopClient.OnError(System.String)">
            <summary>
            Notifies the client of a continuable error.
            </summary>
            <param name="message">The message if one is available, or null if
            there is no more input.</param>
        </member>
        <member name="M:NClap.Repl.ConsoleLoopClient.DisplayPrompt">
            <summary>
            Displays the input prompt.
            </summary>
        </member>
        <member name="T:NClap.Repl.ILoopClient">
            <summary>
            Interface provided by REPL view.
            </summary>
        </member>
        <member name="P:NClap.Repl.ILoopClient.Prompt">
            <summary>
            The loop prompt. If you wish to use a <see cref="T:NClap.Utilities.ColoredString"/> as your
            prompt, you should use the <see cref="P:NClap.Repl.ILoopClient.PromptWithColor"/> property instead.
            </summary>
        </member>
        <member name="P:NClap.Repl.ILoopClient.PromptWithColor">
            <summary>
            The loop prompt (with color).
            </summary>
        </member>
        <member name="P:NClap.Repl.ILoopClient.EndOfLineCommentCharacter">
            <summary>
            The character that starts a comment.
            </summary>
        </member>
        <member name="P:NClap.Repl.ILoopClient.TokenCompleter">
            <summary>
            Optionally provides a token completer that the loop client may choose to use.
            </summary>
        </member>
        <member name="M:NClap.Repl.ILoopClient.DisplayPrompt">
            <summary>
            Displays the loop prompt.
            </summary>
        </member>
        <member name="M:NClap.Repl.ILoopClient.ReadLine">
            <summary>
            Reads a line of text input.
            </summary>
            <returns>The read line.</returns>
        </member>
        <member name="M:NClap.Repl.ILoopClient.OnError(System.String)">
            <summary>
            Notifies the client of a continuable error.
            </summary>
            <param name="message">The message if one is available, or null if
            there is no more input.</param>
        </member>
        <member name="T:NClap.Repl.Loop">
            <summary>
            An interactive REPL loop.
            </summary>
        </member>
        <member name="M:NClap.Repl.Loop.#ctor(System.Type,NClap.Repl.ILoopClient,NClap.Metadata.ArgumentSetAttribute,NClap.Repl.LoopOptions)">
            <summary>
            Constructor that requires an explicit implementation of
            <see cref="T:NClap.Repl.ILoopClient"/>.
            </summary>
            <param name="commandType">Type that defines syntax for commands.</param>
            <param name="loopClient">The client to use.</param>
            <param name="argSetAttribute">Optionally provides attribute info
            for the argument set that will be dynamically created for this loop.</param>
            <param name="options">Optionally provides additional options for
            this loop's execution.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="commandType" />
            is null.</exception>
        </member>
        <member name="M:NClap.Repl.Loop.#ctor(System.Type,NClap.Repl.LoopInputOutputParameters,NClap.Metadata.ArgumentSetAttribute,NClap.Repl.LoopOptions)">
            <summary>
            Constructor that creates a loop with a default client.
            </summary>
            <param name="commandType">Type that defines syntax for commands.</param>
            <param name="parameters">Optionally provides parameters controlling
            the loop's input and output behaviors; if not provided, default
            parameters are used.</param>
            <param name="argSetAttribute">Optionally provides attribute info
            for the argument set that will be dynamically created for this loop.</param>
            <param name="options">Optionally provides additional options for
            this loop's execution.</param>
        </member>
        <member name="M:NClap.Repl.Loop.CreateClient(NClap.Repl.LoopInputOutputParameters)">
            <summary>
            Utility for constructing loop clients.
            </summary>
            <param name="parameters">I/O parameters for loop.</param>
            <returns>A constructed loop client.</returns>
        </member>
        <member name="M:NClap.Repl.Loop.Execute">
            <summary>
            Executes the loop.
            </summary>
        </member>
        <member name="M:NClap.Repl.Loop.ExecuteOnce">
            <summary>
            Executes one iteration of the loop.
            </summary>
            <returns>The result of executing.</returns>
        </member>
        <member name="M:NClap.Repl.Loop.GetCompletions(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Generates possible string completions for an input line to the
            loop.
            </summary>
            <param name="tokens">The tokens presently in the input line.</param>
            <param name="indexOfTokenToComplete">The 0-based index of the token
            from the input line to be completed.</param>
            <returns>An enumeration of the possible completions for the
            indicated token.</returns>
        </member>
        <member name="M:NClap.Repl.Loop.ReadInput">
            <summary>
            Reads and tokenizes a line of input.
            </summary>
            <returns>None if we're at the end of the input stream; otherwise, the
            possibly empty list of tokens.</returns>
        </member>
        <member name="M:NClap.Repl.Loop.Preprocess(System.String)">
            <summary>
            Preprocesses a line of input, primarily to remove comments.
            </summary>
            <param name="input">The line of input to preprocess.</param>
            <returns>The preprocessed result.</returns>
        </member>
        <member name="T:NClap.Repl.LoopInputOutputParameters">
            <summary>
            Parameters for constructing a loop with advanced line input.  The
            parameters indicate how the loop's textual input and output should
            be implemented.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopInputOutputParameters.LineInput">
            <summary>
            Line input object to use, or null for a default one to be
            constructed.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopInputOutputParameters.ConsoleInput">
            <summary>
            The console input interface to use, or null to use the default one.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopInputOutputParameters.ConsoleOutput">
            <summary>
            The console output interface to use, or null to use the default one.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopInputOutputParameters.KeyBindingSet">
            <summary>
            The console key binding set to use, or null to use the default one.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopInputOutputParameters.Prompt">
            <summary>
            Input prompt, or null to use the default one.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopInputOutputParameters.EndOfLineCommentCharacter">
            <summary>
            The character that starts a comment.
            </summary>
        </member>
        <member name="T:NClap.Repl.LoopOptions">
            <summary>
            Options for executing loops.
            </summary>
        </member>
        <member name="M:NClap.Repl.LoopOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NClap.Repl.LoopOptions.#ctor(NClap.Repl.LoopOptions)">
            <summary>
            Deeply cloning constructor.
            </summary>
            <param name="other">Template for clone.</param>
        </member>
        <member name="P:NClap.Repl.LoopOptions.ParserOptions">
            <summary>
            Parser options; initialized with defaults.
            </summary>
        </member>
        <member name="P:NClap.Repl.LoopOptions.HelpOutputHandler">
            <summary>
            The output handler for help/usage information.
            </summary>
        </member>
        <member name="M:NClap.Repl.LoopOptions.DeepClone">
            <summary>
            Creates a separate clone of this object.
            </summary>
            <returns>Clone.</returns>
        </member>
        <member name="T:NClap.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NClap.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NClap.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NClap.Strings.ArgumentShortNameTooLong">
            <summary>
              Looks up a localized string similar to Short name is too long: {0}.
            </summary>
        </member>
        <member name="P:NClap.Strings.BadArgumentValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid value for the &apos;{1}&apos; command line option..
            </summary>
        </member>
        <member name="P:NClap.Strings.BadArgumentValueWithReason">
             <summary>
               Looks up a localized string similar to &apos;{0}&apos; is not a valid value for the &apos;{1}&apos; command line option.
            Reason:
                {2}.
             </summary>
        </member>
        <member name="P:NClap.Strings.BadValidationAttribute">
            <summary>
              Looks up a localized string similar to A &apos;{0}&apos; validation attribute may not be applied to a field or property of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.CannotReadArgumentAnswerFile">
            <summary>
              Looks up a localized string similar to Can&apos;t open command line argument file &apos;{0}&apos; : &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ConflictingArgument">
            <summary>
              Looks up a localized string similar to The specified value of &apos;{0}&apos; for argument &apos;{1}&apos; conflicts with the use of argument &apos;{2}&apos;.  These arguments may not both be specified..
            </summary>
        </member>
        <member name="P:NClap.Strings.ConflictingMemberNotFound">
            <summary>
              Looks up a localized string similar to Can&apos;t find argument member &apos;{0}&apos; referenced by the &apos;ConflictsWith&apos; attribute attached to member &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ConstituentTypeNotSupported">
            <summary>
              Looks up a localized string similar to One or more of the constituent types of &apos;{0}&apos; are not supported as argument types..
            </summary>
        </member>
        <member name="P:NClap.Strings.DefaultPrompt">
            <summary>
              Looks up a localized string similar to &gt; .
            </summary>
        </member>
        <member name="P:NClap.Strings.DefaultValueIsOfWrongType">
            <summary>
              Looks up a localized string similar to The default value for member &apos;{0}&apos; is of type &apos;{1}&apos; but must be of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.DirectoryDoesNotExist">
            <summary>
              Looks up a localized string similar to The directory does not exist..
            </summary>
        </member>
        <member name="P:NClap.Strings.DuplicateArgument">
            <summary>
              Looks up a localized string similar to Duplicate &apos;{0}&apos; argument &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.DuplicateArgumentLongName">
            <summary>
              Looks up a localized string similar to Duplicate argument long name specification: {0}..
            </summary>
        </member>
        <member name="P:NClap.Strings.DuplicateArgumentShortName">
            <summary>
              Looks up a localized string similar to Duplicate argument short name specification: {0}..
            </summary>
        </member>
        <member name="P:NClap.Strings.DuplicatePositionArguments">
            <summary>
              Looks up a localized string similar to Multiple positional arguments with position index {2} were seen: members &apos;{0}&apos; and &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ElementTypeNotSupported">
            <summary>
              Looks up a localized string similar to The element type of &apos;{0}&apos; is not supported as an argument type..
            </summary>
        </member>
        <member name="P:NClap.Strings.EnumValueLongNameIsInvalid">
            <summary>
              Looks up a localized string similar to The long name specified for an enum type&apos;s value is invalid or already in use..
            </summary>
        </member>
        <member name="P:NClap.Strings.EnumValueShortNameIsInvalid">
            <summary>
              Looks up a localized string similar to The short name specified for an enum type&apos;s value is invalid or already in use..
            </summary>
        </member>
        <member name="P:NClap.Strings.ExceptionWasThrownParsingInputLine">
             <summary>
               Looks up a localized string similar to Invalid input:
            {0}.
             </summary>
        </member>
        <member name="P:NClap.Strings.FileDoesNotExist">
            <summary>
              Looks up a localized string similar to The file does not exist..
            </summary>
        </member>
        <member name="P:NClap.Strings.FileSystemPathDisplayName">
            <summary>
              Looks up a localized string similar to Path.
            </summary>
        </member>
        <member name="P:NClap.Strings.InvalidArgumentLongName">
            <summary>
              Looks up a localized string similar to An invalid argument long name was found..
            </summary>
        </member>
        <member name="P:NClap.Strings.InvalidUsage">
            <summary>
              Looks up a localized string similar to Invalid usage..
            </summary>
        </member>
        <member name="P:NClap.Strings.InvalidValueLongName">
            <summary>
              Looks up a localized string similar to An invalid value long name was found..
            </summary>
        </member>
        <member name="P:NClap.Strings.MemberNotSupported">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; in type &apos;{1}&apos; cannot be associated with an argument..
            </summary>
        </member>
        <member name="P:NClap.Strings.MissingRequiredNamedArgument">
            <summary>
              Looks up a localized string similar to Missing required named argument &apos;{0}{1}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.MissingRequiredOptionArgument">
            <summary>
              Looks up a localized string similar to Missing required argument to command line option: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.MissingRequiredPositionalArgument">
            <summary>
              Looks up a localized string similar to Missing required positional argument &apos;&lt;{0}&gt;&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.NonConsecutivePositionalParameters">
            <summary>
              Looks up a localized string similar to The positional arguments are not consecutively indexed..
            </summary>
        </member>
        <member name="P:NClap.Strings.PathDoesNotExist">
            <summary>
              Looks up a localized string similar to The path does exist as a file or directory..
            </summary>
        </member>
        <member name="P:NClap.Strings.PathExists">
            <summary>
              Looks up a localized string similar to The path exists..
            </summary>
        </member>
        <member name="P:NClap.Strings.PossibleArgumentValues">
            <summary>
              Looks up a localized string similar to Possible argument values include: {0}..
            </summary>
        </member>
        <member name="P:NClap.Strings.PossibleIntendedNamedArgument">
            <summary>
              Looks up a localized string similar to Did you mean {0}?.
            </summary>
        </member>
        <member name="P:NClap.Strings.PossibleIntendedNamedArguments">
            <summary>
              Looks up a localized string similar to Did you mean one of: {0}?.
            </summary>
        </member>
        <member name="P:NClap.Strings.StringDoesNotMatchRegEx">
            <summary>
              Looks up a localized string similar to The value does not match the regular expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.StringIsEmpty">
            <summary>
              Looks up a localized string similar to The provided string is empty..
            </summary>
        </member>
        <member name="P:NClap.Strings.StringMatchesRegEx">
            <summary>
              Looks up a localized string similar to The value matches the regular expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.TerminatingQuotesNotEndOfToken">
            <summary>
              Looks up a localized string similar to Terminating quotes not followed by white space or end of string..
            </summary>
        </member>
        <member name="P:NClap.Strings.TooFewElementsInTupleString">
            <summary>
              Looks up a localized string similar to Too few elements in the tuple string..
            </summary>
        </member>
        <member name="P:NClap.Strings.TypeNotSupported">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not supported for arguments..
            </summary>
        </member>
        <member name="P:NClap.Strings.UniqueUsedOnNonCollectionArgument">
            <summary>
              Looks up a localized string similar to Unique is only applicable to collection arguments..
            </summary>
        </member>
        <member name="P:NClap.Strings.UnreadableFile">
            <summary>
              Looks up a localized string similar to Unable to read or parse argument answer file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.UnrecognizedArgument">
            <summary>
              Looks up a localized string similar to Unrecognized command line argument &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.UnterminatedQuotes">
            <summary>
              Looks up a localized string similar to Unterminated quotes found..
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoDefaultValue">
            <summary>
              Looks up a localized string similar to Default:.
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoEnumValueHeaderFormat">
            <summary>
              Looks up a localized string similar to {0} values:.
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoExamplesHeader">
            <summary>
              Looks up a localized string similar to Examples:.
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoOptionalParametersHeader">
            <summary>
              Looks up a localized string similar to Optional Parameters:.
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoRequiredParametersHeader">
            <summary>
              Looks up a localized string similar to Required Parameters:.
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoShortForm">
            <summary>
              Looks up a localized string similar to Alias:.
            </summary>
        </member>
        <member name="P:NClap.Strings.UsageInfoUsageHeader">
            <summary>
              Looks up a localized string similar to Usage:.
            </summary>
        </member>
        <member name="P:NClap.Strings.ValueIsNotGreaterThan">
            <summary>
              Looks up a localized string similar to The value is not greater than &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ValueIsNotGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to The value is not greater than or equal to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ValueIsNotLessThan">
            <summary>
              Looks up a localized string similar to The value is not less than &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ValueIsNotLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to The value is not less than or equal to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NClap.Strings.ValueMayNotBe">
            <summary>
              Looks up a localized string similar to The value not be equal to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:NClap.Types.ArgumentCompletionContext">
            <summary>
            Context for generating argument completions.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentCompletionContext.ParseContext">
            <summary>
            The context that should be used if completion requires parsing.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentCompletionContext.Tokens">
            <summary>
            The current tokenized state of the input.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentCompletionContext.TokenIndex">
            <summary>
            The zero-based index of the token being completed.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentCompletionContext.InProgressParsedObject">
            <summary>
            If this completion is being generated for command-line arguments
            being parsed, and if this object is non-null, then it is the
            object that results from parsing and processing the tokens *before*
            the one being completed.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentCompletionContext.CaseSensitive">
            <summary>
            True for completion to be case-sensitive; false for case-insensitive.
            </summary>
        </member>
        <member name="T:NClap.Types.ArgumentParseContext">
            <summary>
            Context for parsing values.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.Default">
            <summary>
            The default context for parsing.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.FileSystemReader">
            <summary>
            The file-system reader to use during parsing.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.ParserContext">
            <summary>
            Caller-selected context objext provided in <see cref="T:NClap.CommandLineParserOptions"/>
            object.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.NumberOptions">
            <summary>
            Options for parsing numeric arguments.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.AllowEmpty">
            <summary>
            True to allow "empty" arguments (e.g. empty strings); false to
            consider them invalid.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.CaseSensitive">
            <summary>
            True for parsing to be case sensitive; false to be case insensitive.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.ElementSeparators">
            <summary>
            Strings that may separate multiple elements stored in the same token.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.ContainingObject">
            <summary>
            Optionally provides a reference to the object containing the one to
            be parsed.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentParseContext.ServiceConfigurer">
            <summary>
            Action invoked to configure the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> associated with this context.
            </summary>
        </member>
        <member name="T:NClap.Types.ArgumentType">
            <summary>
            Static class used to access references to the canonical IArgumentType
            implementations for .NET built-in types.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Decimal">
            <summary>
            Describes System.Decimal.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Double">
            <summary>
            Describes System.Double.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Float">
            <summary>
            Describes System.Single.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Long">
            <summary>
            Describes System.Int64.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.ULong">
            <summary>
            Describes System.UInt64.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Int">
            <summary>
            Describes System.Int32.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.UInt">
            <summary>
            Describes System.UInt32.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Short">
            <summary>
            Describes System.Int16.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.UShort">
            <summary>
            Describes System.UInt16.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.SByte">
            <summary>
            Describes System.SByte.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Byte">
            <summary>
            Describes System.Byte.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Char">
            <summary>
            Describes System.Char.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.String">
            <summary>
            Describes System.String.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Guid">
            <summary>
            Describes System.Guid.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Uri">
            <summary>
            Describes System.Uri.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.DateTime">
            <summary>
            Describes System.DateTime.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.TimeSpan">
            <summary>
            Describes System.TimeSpan.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.IpAddress">
            <summary>
            Describes System.IPAddress.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Regex">
            <summary>
            Describes System.Text.RegularExpressions.Regex.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.FileSystemPath">
            <summary>
            Describes FileSystemPath.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Bool">
            <summary>
            Describes System.Boolean.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Int64">
            <summary>
            Describes System.Int64.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.UInt64">
            <summary>
            Describes System.UInt64.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Int32">
            <summary>
            Describes System.Int32.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.UInt32">
            <summary>
            Describes System.UInt32.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Int16">
            <summary>
            Describes System.Int16.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.UInt16">
            <summary>
            Describes System.UInt16.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Int8">
            <summary>
            Describes System.Int8.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.UInt8">
            <summary>
            Describes System.UInt8.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Boolean">
            <summary>
            Describes System.Boolean.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentType.Single">
            <summary>
            Describes System.Single.
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentType.#cctor">
            <summary>
            Static constructor, responsible for internally registering all
            known, built-in types.
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentType.GetType(System.Type)">
            <summary>
            Retrieves the registered, stock IArgumentType implementation that
            describes the specified type.  Throws an exception if no such
            implementation could be found.
            </summary>
            <param name="type">Type to look up.</param>
            <returns>The object that describes the specified type.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentType.TryGetType(System.Type,NClap.Types.IArgumentType@)">
            <summary>
            Tries to retrieve the registered, stock IArgumentType implementation
            that describes the specified type.
            </summary>
            <param name="type">Type to look up.</param>
            <param name="argType">On success, receives the object that
            describes the specified type; receives null otherwise.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Types.ArgumentTypeBase">
            <summary>
            Abstract base class for internal implementations of the IArgumentType
            interface.
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.#ctor(System.Type)">
            <summary>
            Constructor for use by derived classes.
            </summary>
            <param name="type">Type described by this object.</param>
        </member>
        <member name="P:NClap.Types.ArgumentTypeBase.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentTypeBase.Type">
            <summary>
            The Type object associated with values described by this interface.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentTypeBase.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.TryParse(NClap.Types.ArgumentParseContext,System.String,System.Object@)">
            <summary>
            Tries to parse the provided string, extracting a value of the type
            described by this interface.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="value">On success, receives the parsed value; null
            otherwise.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.SelectCompletions(NClap.Types.ArgumentCompletionContext,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters the provided candidate string completion list based on the
            provided string to complete.
            </summary>
            <param name="context">Context for completion.</param>
            <param name="valueToComplete">String to complete.</param>
            <param name="candidates">Candidate strings to select from.</param>
            <returns>An enumeration of the selected strings.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="P:NClap.Types.ArgumentTypeBase.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.SelectCompletions(NClap.Types.ArgumentCompletionContext,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Filters the provided candidate string completion list based on the
            provided string to complete.
            </summary>
            <param name="context">Context for completion.</param>
            <param name="valueToComplete">String to complete.</param>
            <param name="candidates">Candidate objects whose formatted strings
            should be selected from.</param>
            <returns>An enumeration of the selected strings.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.GetStringComparer(NClap.Types.ArgumentCompletionContext)">
            <summary>
            Constructs a string comparer appropriate for use in matching string completions
            for values of this type (i.e. with appropriate case sensitivity).
            </summary>
            <param name="context">Completion context.</param>
            <returns>String comparer.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeBase.GetStringComparison(NClap.Types.ArgumentCompletionContext)">
            <summary>
            Constructs a string comparison policy appropriate for use in matching string completions
            for values of this type (i.e. with appropriate case sensitivity).
            </summary>
            <param name="context">Completion context.</param>
            <returns>String comparison value.</returns>
        </member>
        <member name="T:NClap.Types.ArgumentTypeExtension">
            <summary>
            Base class for extending the argument semantics of an existing
            implementation of the IArgumentType interface.
            </summary>
        </member>
        <member name="F:NClap.Types.ArgumentTypeExtension.Parser">
            <summary>
            Optional override of the string parser implementation of the base
            argument type.
            </summary>
        </member>
        <member name="F:NClap.Types.ArgumentTypeExtension.Formatter">
            <summary>
            Optional override of the object formatter implementation of the base
            argument type.
            </summary>
        </member>
        <member name="F:NClap.Types.ArgumentTypeExtension.Completer">
            <summary>
            Optional override of the string completer implementation of the
            base argument type.
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentTypeExtension.#ctor(System.Type,NClap.Types.IStringParser,NClap.Types.IObjectFormatter,NClap.Types.IStringCompleter)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The primitive object type to find a corresponding
            IArgumentType implementation for (e.g. System.String).</param>
            <param name="parser">Optionally provides an override implementation
            of the base argument type's string parser implementation.</param>
            <param name="formatter">Optionally provides an override
            implementation of the base argument type's object formatter
            implementation.</param>
            <param name="completer">Optionally provides an override
            implementation of the base argument type's string completer
            implementation.</param>
        </member>
        <member name="M:NClap.Types.ArgumentTypeExtension.#ctor(NClap.Types.IArgumentType,NClap.Types.IStringParser,NClap.Types.IObjectFormatter,NClap.Types.IStringCompleter)">
            <summary>
            Constructor.
            </summary>
            <param name="innerType">The base IArgumentType instance to
            wrap and extend.</param>
            <param name="parser">Optionally provides an override implementation
            of the base argument type's string parser implementation.</param>
            <param name="formatter">Optionally provides an override
            implementation of the base argument type's object formatter
            implementation.</param>
            <param name="completer">Optionally provides an override
            implementation of the base argument type's string completer
            implementation.</param>
        </member>
        <member name="P:NClap.Types.ArgumentTypeExtension.InnerType">
            <summary>
            The base IArgumentType object to wrap and extend.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentTypeExtension.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentTypeExtension.Type">
            <summary>
            The Type object associated with values described by this interface.
            </summary>
        </member>
        <member name="P:NClap.Types.ArgumentTypeExtension.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="M:NClap.Types.ArgumentTypeExtension.TryParse(NClap.Types.ArgumentParseContext,System.String,System.Object@)">
            <summary>
            Tries to parse the provided string, extracting a value of the type
            described by this interface.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="value">On success, receives the parsed value; null
            otherwise.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeExtension.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Types.ArgumentTypeExtension.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="P:NClap.Types.ArgumentTypeExtension.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="T:NClap.Types.ArrayArgumentType">
            <summary>
            ICollectionArgumentType implementation that describes T[] types.
            </summary>
        </member>
        <member name="M:NClap.Types.ArrayArgumentType.#ctor(System.Type)">
            <summary>
            Constructs a new implementation of ICollectionArgumentType for
            arrays with the given type.
            </summary>
            <param name="type">Array type.</param>
        </member>
        <member name="M:NClap.Types.ArrayArgumentType.ToCollection(System.Collections.IEnumerable)">
            <summary>
            Constructs a collection of the type described by this object,
            populated with objects from the provided input collection.
            </summary>
            <param name="objects">Objects to add to the collection.</param>
            <returns>Constructed collection.</returns>
        </member>
        <member name="M:NClap.Types.ArrayArgumentType.ToEnumerable(System.Object)">
            <summary>
            Enumerates the items in the collection.  The input collection
            should be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumeration.</returns>
        </member>
        <member name="M:NClap.Types.ArrayArgumentType.GetElements(System.Object)">
            <summary>
            Enumerates the objects contained within the provided collection;
            the collection must be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumerated objects.</returns>
        </member>
        <member name="T:NClap.Types.BoolArgumentType">
            <summary>
            Implementation to describe System.Boolean.
            </summary>
        </member>
        <member name="M:NClap.Types.BoolArgumentType.#ctor">
            <summary>
            Primary constructor.
            </summary>
        </member>
        <member name="P:NClap.Types.BoolArgumentType.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="M:NClap.Types.BoolArgumentType.Create">
            <summary>
            Public factory method.
            </summary>
            <returns>A constructed object.</returns>
        </member>
        <member name="M:NClap.Types.BoolArgumentType.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="M:NClap.Types.BoolArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="T:NClap.Types.CollectionArgumentTypeBase">
            <summary>
            Abstract base class for implementing the ICollectionArgumentType
            interface.
            </summary>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.#ctor(System.Type,System.Type)">
            <summary>
            Constructor for use by derived classes.
            </summary>
            <param name="type">Type described by this object.</param>
            <param name="elementType">Type of elements stored within the
            collection type described by this object.</param>
        </member>
        <member name="P:NClap.Types.CollectionArgumentTypeBase.ElementType">
            <summary>
            Type of elements in the collection described by this object.
            </summary>
        </member>
        <member name="P:NClap.Types.CollectionArgumentTypeBase.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/>
            or <paramref name="valueToComplete"/> is null.</exception>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.ToCollection(System.Collections.IEnumerable)">
            <summary>
            Constructs a collection of the type described by this object,
            populated with objects from the provided input collection.
            </summary>
            <param name="objects">Objects to add to the collection.</param>
            <returns>Constructed collection.</returns>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.ToEnumerable(System.Object)">
            <summary>
            Enumerates the items in the collection.  The input collection
            should be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumeration.</returns>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="P:NClap.Types.CollectionArgumentTypeBase.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.GetElements(System.Object)">
            <summary>
            Enumerates the objects contained within the provided collection;
            the collection must be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumerated objects.</returns>
        </member>
        <member name="M:NClap.Types.CollectionArgumentTypeBase.GetPreferredElementSeparatorOrDefault(NClap.Types.ArgumentParseContext)">
            <summary>
            Given a parser context, returns the preferred element separator. Returns null
            if no such separator exists.
            </summary>
            <param name="context">Parser context.</param>
            <returns>Preferred element separator, if one exists; null otherwise.</returns>
        </member>
        <member name="T:NClap.Types.CollectionOfTArgumentType">
            <summary>
            ICollectionArgumentType implementation that describes types that
            implement the (generic) ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:NClap.Types.CollectionOfTArgumentType.#ctor(System.Type)">
            <summary>
            Constructs a new implementation of ICollectionArgumentType for
            objects of the given type; the type in question must implement
            the (generic) ICollection&lt;T&gt; interface.
            </summary>
            <param name="type">Array type.</param>
        </member>
        <member name="M:NClap.Types.CollectionOfTArgumentType.ToCollection(System.Collections.IEnumerable)">
            <summary>
            Constructs a collection of the type described by this object,
            populated with objects from the provided input collection.
            </summary>
            <param name="objects">Objects to add to the collection.</param>
            <returns>Constructed collection.</returns>
        </member>
        <member name="M:NClap.Types.CollectionOfTArgumentType.ToEnumerable(System.Object)">
            <summary>
            Enumerates the items in the collection.  The input collection
            should be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumeration.</returns>
        </member>
        <member name="M:NClap.Types.CollectionOfTArgumentType.GetElements(System.Object)">
            <summary>
            Enumerates the objects contained within the provided collection;
            the collection must be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumerated objects.</returns>
        </member>
        <member name="T:NClap.Types.CommandGroupArgumentType">
            <summary>
            Implementation to describe command groups.
            </summary>
        </member>
        <member name="M:NClap.Types.CommandGroupArgumentType.#ctor(System.Type)">
            <summary>
            Constructs a new object to describe the provided command group type.
            </summary>
            <param name="type">Type to describe.</param>
        </member>
        <member name="M:NClap.Types.CommandGroupArgumentType.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="M:NClap.Types.CommandGroupArgumentType.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Types.CommandGroupArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Tries to parse the provided string, extracting a value of the type
            described by this interface.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">The string to parse.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="P:NClap.Types.CommandGroupArgumentType.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="P:NClap.Types.CommandGroupArgumentType.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="T:NClap.Types.CustomArgumentTypeBase">
            <summary>
            Base abstract class, intended for use by custom object types that
            wish to implement the IArgumentType interface to describe themselves.
            </summary>
        </member>
        <member name="P:NClap.Types.CustomArgumentTypeBase.Type">
            <summary>
            The Type object associated with values described by this interface.
            </summary>
        </member>
        <member name="P:NClap.Types.CustomArgumentTypeBase.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="P:NClap.Types.CustomArgumentTypeBase.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="M:NClap.Types.CustomArgumentTypeBase.TryParse(NClap.Types.ArgumentParseContext,System.String,System.Object@)">
            <summary>
            Tries to parse the provided string, extracting a value of the type
            described by this interface.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="value">On success, receives the parsed value; null
            otherwise.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Types.CustomArgumentTypeBase.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Types.CustomArgumentTypeBase.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="P:NClap.Types.CustomArgumentTypeBase.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="T:NClap.Types.EnumArgumentType">
            <summary>
            Implementation to describe enumeration types.
            </summary>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.#ctor">
            <summary>
            Constructs an object to describe an empty enumeration type.  Values must be
            separately defined.
            </summary>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.#ctor(System.Type)">
            <summary>
            Constructs an object to describe the provided enumeration type.
            </summary>
            <param name="type">The enumeration type to describe.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="type" />
            is not an enum type with a valid backing integer representation type.</exception>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.Create(System.Type)">
            <summary>
            Constructs a new object to describe the provided enumeration type.
            </summary>
            <param name="type">The enumeration type to describe.</param>
            <returns>The constructed type object.</returns>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.GetValues">
            <summary>
            Enumerate the values allowed for this enum.
            </summary>
            <returns>The values.</returns>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.TryGetValue(System.Object,NClap.Types.IArgumentValue@)">
            <summary>
            Tries to look up the <see cref="T:NClap.Types.IArgumentValue"/> corresponding with
            the given object.
            </summary>
            <param name="value">Object to look up.</param>
            <param name="argValue">On success, receives the object's value.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.AddValue(NClap.Types.IArgumentValue)">
            <summary>
            Defines a new value in this type.
            </summary>
            <param name="value">Value to define.</param>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.AddValuesFromType(System.Type)">
            <summary>
            Inspects the given type and defines all values in it.
            </summary>
            <param name="type">Type to inspect.</param>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.AddValuesFromType(NClap.Types.IEnumArgumentType)">
            <summary>
            Defines all values in the given type.
            </summary>
            <param name="type">Type to inspect.</param>
        </member>
        <member name="M:NClap.Types.EnumArgumentType.AddToValueNameMap(System.Collections.Generic.Dictionary{System.String,NClap.Types.IArgumentValue},NClap.Types.IArgumentValue)">
            <summary>
            Adds the given value to the provided name map.
            </summary>
            <param name="map">Map to add to.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="T:NClap.Types.EnumArgumentValue">
            <summary>
            Implementation to describe enumeration values.
            </summary>
        </member>
        <member name="M:NClap.Types.EnumArgumentValue.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Basic constructor.
            </summary>
            <param name="fieldInfo">Information for the value.</param>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.Disallowed">
            <summary>
            True if the value has been disallowed from parsing use; false
            otherwise.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.Hidden">
            <summary>
            True if the value has been marked to be hidden from help and usage
            information; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.DisplayName">
            <summary>
            Display name for this value.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.LongName">
            <summary>
            Long name of this value.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.ShortName">
            <summary>
            Short name of this value, if it has one; null if it has none.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.Description">
            <summary>
            Description of this value, if it has one; null if it has none.
            </summary>
        </member>
        <member name="P:NClap.Types.EnumArgumentValue.ValueInfo">
            <summary>
            Underlying field information.
            </summary>
        </member>
        <member name="M:NClap.Types.EnumArgumentValue.GetAttributes``1">
            <summary>
            Get any attributes of the given type associated with the value.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="T:NClap.Types.FileSystemPath">
            <summary>
            Encapsulates a file-system path (i.e. to file or directory).
            </summary>
        </member>
        <member name="M:NClap.Types.FileSystemPath.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Path constructor.
            </summary>
            <param name="path">The path string.</param>
            <param name="expandEnvironmentVariables">True to expand environment
            variables; false to leave environment variables unexpanded.</param>
            <param name="rootPathForRelativePaths">Root path to resolve the
            path with respect to, if it's relative.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="path"/>
            is null or empty.</exception>
        </member>
        <member name="M:NClap.Types.FileSystemPath.#ctor(System.String,System.Boolean)">
            <summary>
            Path constructor.  Relative paths are left unresolved.
            </summary>
            <param name="path">The path string.</param>
            <param name="expandEnvironmentVariables">True to expand environment
            variables; false to leave environment variables unexpanded.</param>
        </member>
        <member name="M:NClap.Types.FileSystemPath.#ctor(System.String)">
            <summary>
            Path constructor.  Environment variables in the path are expanded.
            Relative paths are left unresolved.
            </summary>
            <param name="path">The path string.</param>
        </member>
        <member name="P:NClap.Types.FileSystemPath.Path">
            <summary>
            The path as a string.
            </summary>
        </member>
        <member name="P:NClap.Types.FileSystemPath.OriginalPath">
            <summary>
            The original, unexpanded path as a string.
            </summary>
        </member>
        <member name="M:NClap.Types.FileSystemPath.op_Implicit(System.String)~NClap.Types.FileSystemPath">
            <summary>
            Implicit operator to construct a path from a string.
            </summary>
            <param name="path">The path string.</param>
            <returns>The path object.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.FromString(System.String)">
            <summary>
            Constructs a path from a string.
            </summary>
            <param name="path">The path string.</param>
            <returns>The path object.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.op_Implicit(NClap.Types.FileSystemPath)~System.String">
            <summary>
            Implicit operator to construct a string from a path.
            </summary>
            <param name="path">The path object.</param>
            <returns>The path string.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.ArePathsCaseSensitive">
            <summary>
            Check if the file paths are expected to be case-sensitive by default.
            </summary>
            <returns>True if file paths are case-sensitive by default.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Get possible completions of the provided path prefix string.
            </summary>
            <param name="context">Context for completion.</param>
            <param name="pathPrefix">Path prefix to complete.</param>
            <returns>Possible completions.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Types.FileSystemPath.ToString">
            <summary>
            Converts this path object into a string.
            </summary>
            <returns>The path string.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.Equals(System.Object)">
            <summary>
            Compares this path object against the specified other object,
            with case insensitivity.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>True if the objects are equivalent; false otherwise.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.GetHashCode">
            <summary>
            Produces a stable hash code for the path object, assuming case
            insensitivity.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NClap.Types.FileSystemPath.Equals(NClap.Types.FileSystemPath)">
            <summary>
            Compares this path object against the specified other path object,
            with case insensitivity.
            </summary>
            <param name="other">Other object to compare against.</param>
            <returns>True if the paths are equivalent; false otherwise.</returns>
        </member>
        <member name="T:NClap.Types.FlagsEnumArgumentType">
            <summary>
            Implementation to describe enumeration types with System.FlagsAttribute
            attributes.
            </summary>
        </member>
        <member name="F:NClap.Types.FlagsEnumArgumentType._underlyingType">
            <summary>
            The type underlying this enumeration type.
            </summary>
        </member>
        <member name="F:NClap.Types.FlagsEnumArgumentType._underlyingIntegerType">
            <summary>
            The IntegerArgumentType object for the type underlying this
            enumeration type.
            </summary>
        </member>
        <member name="M:NClap.Types.FlagsEnumArgumentType.#ctor(System.Type)">
            <summary>
            Primary constructor.
            </summary>
            <param name="type">The flag-based enumeration type to describe.
            </param>
        </member>
        <member name="M:NClap.Types.FlagsEnumArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="M:NClap.Types.FlagsEnumArgumentType.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:NClap.Types.IArgumentType">
            <summary>
            Interface for advertising a type as being parseable using this
            assembly.  The implementation provides sufficient functionality
            for command-line parsing, generating usage help information,
            etc.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentType.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentType.Type">
            <summary>
            The Type object associated with values described by this interface.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentType.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentType.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="T:NClap.Types.IArgumentValue">
            <summary>
            Interface for advertising a value as being parseable using this
            assembly.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.Disallowed">
            <summary>
            True if the value has been disallowed from parsing use; false
            otherwise.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.Hidden">
            <summary>
            True if the value has been marked to be hidden from help and usage
            information; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.DisplayName">
            <summary>
            Display name for this value.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.LongName">
            <summary>
            Long name of this value.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.ShortName">
            <summary>
            Short name of this value, if it has one; null if it has none.
            </summary>
        </member>
        <member name="P:NClap.Types.IArgumentValue.Description">
            <summary>
            Description of this value, if it has one; null if it has none.
            </summary>
        </member>
        <member name="M:NClap.Types.IArgumentValue.GetAttributes``1">
            <summary>
            Get any attributes of the given type associated with the value.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="T:NClap.Types.ICollectionArgumentType">
            <summary>
            Interface for advertising a collection type as being parseable
            using this assembly.  The implementation provides sufficient
            functionality for command-line parsing, generating usage help
            information, etc.  This interface should only be implemented
            by objects that describe .NET collection objects.
            </summary>
        </member>
        <member name="P:NClap.Types.ICollectionArgumentType.ElementType">
            <summary>
            Argument type of elements in the collection described by this
            object.
            </summary>
        </member>
        <member name="M:NClap.Types.ICollectionArgumentType.ToCollection(System.Collections.IEnumerable)">
            <summary>
            Constructs a collection of the type described by this object,
            populated with objects from the provided input collection.
            </summary>
            <param name="objects">Objects to add to the collection.</param>
            <returns>Constructed collection.</returns>
        </member>
        <member name="M:NClap.Types.ICollectionArgumentType.ToEnumerable(System.Object)">
            <summary>
            Enumerates the items in the collection.  The input collection
            should be of the type described by this object.
            </summary>
            <param name="collection">Collection to enumerate.</param>
            <returns>The enumeration.</returns>
        </member>
        <member name="T:NClap.Types.IEnumArgumentType">
            <summary>
            Interface for advertising a  type as being parseable
            using this assembly.  The implementation provides sufficient
            functionality for command-line parsing, generating usage help
            information, etc.  This interface should only be implemented
            by objects that describe .NET enum objects.
            </summary>
        </member>
        <member name="M:NClap.Types.IEnumArgumentType.GetValues">
            <summary>
            Enumerate the values allowed for this enum.
            </summary>
            <returns>The values.</returns>
        </member>
        <member name="M:NClap.Types.IEnumArgumentType.TryGetValue(System.Object,NClap.Types.IArgumentValue@)">
            <summary>
            Tries to look up the <see cref="T:NClap.Types.IArgumentValue"/> corresponding with
            the given object.
            </summary>
            <param name="value">Object to look up.</param>
            <param name="argValue">On success, receives the object's value.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Types.IEnumArgumentTypeProvider">
            <summary>
            Enum argument type provider.
            </summary>
        </member>
        <member name="M:NClap.Types.IEnumArgumentTypeProvider.GetTypes">
            <summary>
            Retrieves types being provided.
            </summary>
            <returns>Enumeration of types.</returns>
        </member>
        <member name="T:NClap.Types.IntegerArgumentTypeParseHandler`1">
            <summary>
            Method that parses an integer string using the provided number style
            flags.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="stringToParse">String to parse.</param>
            <param name="numberStyles">Number style flags to use while parsing.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="T:NClap.Types.BinaryOp`1">
            <summary>
            Method that performs a binary operation on two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="operand0">The left-hand operand.</param>
            <param name="operand1">The right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:NClap.Types.IntegerArgumentType">
            <summary>
            Basic implementation of IArgumentType, useful for describing built-in
            integral .NET types with simple semantics.
            </summary>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.#ctor(System.Type,NClap.Types.IntegerArgumentTypeParseHandler{System.Object},System.Boolean,System.String)">
            <summary>
            Constructs a new object to describe the provided integer type.
            </summary>
            <param name="type">Type to describe.</param>
            <param name="parseHandler">Delegate used to parse strings with the
            given type.</param>
            <param name="isSigned">True if this type is signed; false if it's
            unsigned.</param>
            <param name="displayName">Optionally provides a custom display
            name for the type, or null to use the default.</param>
        </member>
        <member name="P:NClap.Types.IntegerArgumentType.IsSigned">
            <summary>
            True if the type is signed; false if it's unsigned.
            </summary>
        </member>
        <member name="P:NClap.Types.IntegerArgumentType.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Create``1(NClap.Types.IntegerArgumentTypeParseHandler{``0},System.Boolean,System.String)">
            <summary>
            Convenience method, primarily useful to allow for inference of the
            first argument to the constructor.
            </summary>
            <typeparam name="T">Type to describe.</typeparam>
            <param name="parseHandler">Delegate used to parse strings with the
            given type.</param>
            <param name="isSigned">True if this type is signed; false if it's
            unsigned.</param>
            <param name="displayName">Optionally provides a custom display
            name for the type, or null to use the default.</param>
            <returns>The constructed object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parseHandler"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Add(System.Object,System.Object)">
            <summary>
            Adds two values of this type without checking for overflow.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Add(System.Object,System.Object,System.Boolean)">
            <summary>
            Adds two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <param name="checkForOverflow">True to check for and throw an
            exception on overflow; false to ignore overflow.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Subtract(System.Object,System.Object)">
            <summary>
            Subtracts two values of this type without checking for overflow.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Subtract(System.Object,System.Object,System.Boolean)">
            <summary>
            Subtracts two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <param name="checkForOverflow">True to check for and throw an
            exception on overflow; false to ignore overflow.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies two values of this type without checking for overflow.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Multiply(System.Object,System.Object,System.Boolean)">
            <summary>
            Multiplies two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <param name="checkForOverflow">True to check for and throw an
            exception on overflow; false to ignore overflow.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Divide(System.Object,System.Object)">
            <summary>
            Divides two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.And(System.Object,System.Object)">
            <summary>
            Computes the bitwise AND of two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Or(System.Object,System.Object)">
            <summary>
            Computes the bitwise OR of two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Xor(System.Object,System.Object)">
            <summary>
            Computes the bitwise XOR of two values of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.IsLessThan(System.Object,System.Object)">
            <summary>
            Checks if one value of this type is less than another value of this
            type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.IsLessThanOrEqualTo(System.Object,System.Object)">
            <summary>
            Checks if one value of this type is less than or equal to another
            value of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.IsGreaterThan(System.Object,System.Object)">
            <summary>
            Checks if one value of this type is greater than another value of
            this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.IsGreaterThanOrEqualTo(System.Object,System.Object)">
            <summary>
            Checks if one value of this type is greater than or equal to another
            value of this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.IsEqualTo(System.Object,System.Object)">
            <summary>
            Checks if one value of this type is equal to another value of this
            type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.IsNotEqualTo(System.Object,System.Object)">
            <summary>
            Checks if one value of this type is not equal to another value of
            this type.
            </summary>
            <param name="operand0">Left-hand operand.</param>
            <param name="operand1">Right-hand operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NClap.Types.IntegerArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
            <exception cref="T:System.OverflowException">Thrown when the parsed value would
            overflow the integer type represented by this object instance.</exception>
        </member>
        <member name="T:NClap.Types.IObjectFormatter">
            <summary>
            Interface implemented by objects that can convert objects into strings.
            </summary>
        </member>
        <member name="M:NClap.Types.IObjectFormatter.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:NClap.Types.IStringCompleter">
            <summary>
            Interface implemented by objects that can generate completions for a
            given string.
            </summary>
        </member>
        <member name="M:NClap.Types.IStringCompleter.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="T:NClap.Types.IStringParser">
            <summary>
            Interface implemented by objects that can parse strings.
            </summary>
        </member>
        <member name="M:NClap.Types.IStringParser.TryParse(NClap.Types.ArgumentParseContext,System.String,System.Object@)">
            <summary>
            Tries to parse the provided string, extracting a value of the type
            described by this interface.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="value">On success, receives the parsed value; null
            otherwise.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="T:NClap.Types.KeyValuePairArgumentType">
            <summary>
            Implementation to describe KeyValuePair&lt;,&gt; types.
            </summary>
        </member>
        <member name="M:NClap.Types.KeyValuePairArgumentType.#ctor(System.Type)">
            <summary>
            Constructs an object to describe the provided KeyValuePair type.
            </summary>
            <param name="type">The KeyValuePair type to describe.</param>
        </member>
        <member name="P:NClap.Types.KeyValuePairArgumentType.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="M:NClap.Types.KeyValuePairArgumentType.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Types.KeyValuePairArgumentType.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/>
            or <paramref name="valueToComplete"/> is null.</exception>
        </member>
        <member name="M:NClap.Types.KeyValuePairArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when
            <paramref name="stringToParse" /> is not a well-formed encoding of a
            key/value pair</exception>
        </member>
        <member name="P:NClap.Types.KeyValuePairArgumentType.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="T:NClap.Types.MergedEnumArgumentType">
            <summary>
            Implementation to describe merged enum types.
            </summary>
        </member>
        <member name="M:NClap.Types.MergedEnumArgumentType.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructs a type that merges the given enum types.
            </summary>
            <param name="types">Types to merge.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when zero types are
            provided.</exception>
        </member>
        <member name="M:NClap.Types.MergedEnumArgumentType.#ctor(System.Collections.Generic.IEnumerable{NClap.Types.IEnumArgumentType})">
            <summary>
            Constructs a type that merges the given enum types.
            </summary>
            <param name="types">Types to merge.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when zero types are
            provided.</exception>
        </member>
        <member name="T:NClap.Types.SimpleArgumentTypeParseHandler`1">
            <summary>
            Method that parses a string.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="T:NClap.Types.SimpleArgumentTypeCompletionHandler">
            <summary>
            Method that generates completions for a string.
            </summary>
            <param name="context">Context for completion.</param>
            <param name="valueToComplete">String to complete.</param>
            <returns>The possible completions.</returns>
        </member>
        <member name="T:NClap.Types.SimpleArgumentType">
            <summary>
            Basic implementation of IArgumentType, useful for describing built-in
            .NET types with simple semantics.
            </summary>
        </member>
        <member name="M:NClap.Types.SimpleArgumentType.#ctor(System.Type,NClap.Types.SimpleArgumentTypeParseHandler{System.Object},NClap.Types.SimpleArgumentTypeCompletionHandler,System.String)">
            <summary>
            Constructs a new object to describe the provided type.
            </summary>
            <param name="type">Type to describe.</param>
            <param name="parseHandler">Delegate used to parse strings with the
            given type.</param>
            <param name="completionHandler">Delegate used to generate
            completions with the given type.</param>
            <param name="displayName">The type's human-readable name.</param>
        </member>
        <member name="M:NClap.Types.SimpleArgumentType.Create``1(NClap.Types.SimpleArgumentTypeParseHandler{``0},NClap.Types.SimpleArgumentTypeCompletionHandler,System.String)">
            <summary>
            Primary construction method.
            </summary>
            <typeparam name="T">Type to describe.</typeparam>
            <param name="parseHandler">Delegate used to parse strings with the
            given type.</param>
            <param name="completionHandler">Delegate used to complete strings with
            the given type.</param>
            <param name="displayName">The type's human-readable name.</param>
            <returns>The constructed object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parseHandler"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Types.SimpleArgumentType.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
        </member>
        <member name="M:NClap.Types.SimpleArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="P:NClap.Types.SimpleArgumentType.DisplayName">
            <summary>
            The type's human-readable (display) name.
            </summary>
        </member>
        <member name="T:NClap.Types.StringArgumentType">
            <summary>
            Implementation to describe System.Stringean.
            </summary>
        </member>
        <member name="M:NClap.Types.StringArgumentType.#ctor">
            <summary>
            Primary constructor.
            </summary>
        </member>
        <member name="P:NClap.Types.StringArgumentType.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="M:NClap.Types.StringArgumentType.Create">
            <summary>
            Public factory method.
            </summary>
            <returns>A constructed object.</returns>
        </member>
        <member name="M:NClap.Types.StringArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="T:NClap.Types.TupleArgumentType">
            <summary>
            Implementation to describe Tuple types.
            </summary>
        </member>
        <member name="M:NClap.Types.TupleArgumentType.#ctor(System.Type)">
            <summary>
            Constructs an object to describe the provided Tuple type.
            </summary>
            <param name="type">The Tuple type to describe.</param>
        </member>
        <member name="P:NClap.Types.TupleArgumentType.SyntaxSummary">
            <summary>
            A summary of the concrete syntax required to indicate a value of
            the type described by this interface (e.g. "&gt;Int32&lt;").
            </summary>
        </member>
        <member name="P:NClap.Types.TupleArgumentType.DependentTypes">
            <summary>
            Enumeration of all types that this type depends on / includes.
            </summary>
        </member>
        <member name="M:NClap.Types.TupleArgumentType.Format(System.Object)">
            <summary>
            Converts a value into a readable string form.  The value must be of
            the type described by this interface.
            </summary>
            <param name="value">The value to format into a string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Types.TupleArgumentType.GetCompletions(NClap.Types.ArgumentCompletionContext,System.String)">
            <summary>
            Generates a set of valid strings--parseable to this type--that
            contain the provided string as a strict prefix.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="valueToComplete">The string to complete.</param>
            <returns>An enumeration of a set of completion strings; if no such
            strings could be generated, or if the type doesn't support
            completion, then an empty enumeration is returned.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/>
            or <paramref name="valueToComplete"/> is null.</exception>
        </member>
        <member name="M:NClap.Types.TupleArgumentType.Parse(NClap.Types.ArgumentParseContext,System.String)">
            <summary>
            Parses the provided string.  Throws an exception if the string
            cannot be parsed.
            </summary>
            <param name="context">Context for parsing.</param>
            <param name="stringToParse">String to parse.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="T:NClap.Utilities.AttributeUtilities">
            <summary>
            Utilities for retrieving and manipulating custom attributes from
            .NET reflection objects.
            </summary>
        </member>
        <member name="M:NClap.Utilities.AttributeUtilities.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieves custom attributes associated with the given attribute provider.
            </summary>
            <typeparam name="T">Type of the attribute to retrieve.</typeparam>
            <param name="attributeProvider">Object to find attributes on.</param>
            <param name="inherit">Whether or not to inherit attributes from ancestor
            types.</param>
            <returns>The attributes.</returns>
        </member>
        <member name="M:NClap.Utilities.AttributeUtilities.GetAttributesForReflectionOnlyType``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Retrieves custom attributes associated with the given attribute provider.
            </summary>
            <typeparam name="T">Type of the attribute to retrieve.</typeparam>
            <param name="attributeProvider">Object to find attributes on.</param>
            <returns>The attributes.</returns>
        </member>
        <member name="M:NClap.Utilities.AttributeUtilities.TryGetAttributesForReflectionOnlyType``1(System.Reflection.ICustomAttributeProvider,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Tries to get attributes for the given attribute provider coming from
            a reflection-only loaded type.
            </summary>
            <typeparam name="T">Type of desired attributes.</typeparam>
            <param name="attributeProvider">Attribute provider.</param>
            <param name="attributes">On success, receives the enumeration of attributes.</param>
            <returns>true on success; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.AttributeUtilities.GetAttributesFromData``1(System.Collections.Generic.IReadOnlyList{System.Reflection.CustomAttributeData})">
            <summary>
            Retrieves the attributes of the given type from the provided
            attribute data.
            </summary>
            <typeparam name="T">Type of the attributes to retrieve.</typeparam>
            <param name="attribs">The attribute data.</param>
            <returns>The enumerated attributes.</returns>
        </member>
        <member name="M:NClap.Utilities.AttributeUtilities.GetSingleAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieves the sole attribute of the provided type that's associated
            with the specified attribute provider.  This can be used with
            methods, fields, classes, etc.  An exception is thrown if the
            object has multiple attributes of the specified type associated
            with it.
            </summary>
            <typeparam name="T">Type of the attribute to retrieve.</typeparam>
            <param name="attributeProvider">Object to find attributes on.</param>
            <param name="inherit">Whether or not to inherit attributes from ancestor
            types.</param>
            <returns>The only attribute of the specified type; the type's default
            value (e.g. null) if there are no such attributes present.</returns>
        </member>
        <member name="T:NClap.Utilities.CircularEnumerator">
            <summary>
            Utilities for interacting with circular enumerators.
            </summary>
        </member>
        <member name="M:NClap.Utilities.CircularEnumerator.Create``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Creates a new circular enumerator.
            </summary>
            <typeparam name="T">Type of the item in the enumerated list.
            </typeparam>
            <param name="values">List to be enumerated.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:NClap.Utilities.CircularEnumerator`1">
            <summary>
            Encapsulates a circular enumerator of a list.
            </summary>
            <typeparam name="T">Type of element being iterated through.</typeparam>
        </member>
        <member name="M:NClap.Utilities.CircularEnumerator`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Basic constructor.
            </summary>
            <param name="values">List to enumerate.</param>
        </member>
        <member name="P:NClap.Utilities.CircularEnumerator`1.Values">
            <summary>
            The list being enumerated.
            </summary>
        </member>
        <member name="P:NClap.Utilities.CircularEnumerator`1.CursorIndex">
            <summary>
            The current index into the list.
            </summary>
        </member>
        <member name="P:NClap.Utilities.CircularEnumerator`1.Started">
            <summary>
            True if enumeration has started; false otherwise.
            </summary>
        </member>
        <member name="M:NClap.Utilities.CircularEnumerator`1.GetCurrentItem">
            <summary>
            Retrieves the current item.
            </summary>
            <returns>The current item.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when enumeration has
            not yet started, or underlying list is empty.</exception>
        </member>
        <member name="M:NClap.Utilities.CircularEnumerator`1.MoveNext">
            <summary>
            Move the cursor one item forward.
            </summary>
        </member>
        <member name="M:NClap.Utilities.CircularEnumerator`1.MovePrevious">
            <summary>
            Move the cursor one item backward.
            </summary>
        </member>
        <member name="T:NClap.Utilities.ColoredMultistring">
            <summary>
            Represents text comprised of strings of different colors.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.#ctor(NClap.Utilities.ColoredString)">
            <summary>
            Simple constructor.
            </summary>
            <param name="value">String content.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.#ctor(System.Collections.Generic.IEnumerable{NClap.Utilities.ColoredString})">
            <summary>
            Primary constructor.
            </summary>
            <param name="values">Pieces of the multistring.</param>
        </member>
        <member name="P:NClap.Utilities.ColoredMultistring.Empty">
            <summary>
            Empty multistring.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredMultistring.Content">
            <summary>
            The content of the multistring.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredMultistring.Length">
            <summary>
            The length of the content of the multistring.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredMultistring.Item(System.Int32)">
            <summary>
            Accesses a character in the string.
            </summary>
            <param name="index">Zero-based index of the character.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.op_Explicit(NClap.Utilities.ColoredMultistring)~System.String">
            <summary>
            Extract the uncolored string content from the provided multistring.
            </summary>
            <param name="value">The multistring to process.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.op_Explicit(System.String)~NClap.Utilities.ColoredMultistring">
            <summary>
            Wraps a string.
            </summary>
            <param name="value">The string to wrap.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.op_Explicit(NClap.Utilities.ColoredString)~NClap.Utilities.ColoredMultistring">
            <summary>
            Wraps a single colored string.
            </summary>
            <param name="value">The string to wrap.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.op_Addition(NClap.Utilities.ColoredMultistring,NClap.Utilities.ColoredString)">
            <summary>
            Constructs a new <see cref="T:NClap.Utilities.ColoredMultistring"/> by concatenating.
            </summary>
            <param name="value">The base multistring.</param>
            <param name="suffix">The string to concatenate onto the end of the base
            multistring.</param>
            <returns>The concatenation result, as a separate multistring.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.op_Addition(NClap.Utilities.ColoredString,NClap.Utilities.ColoredMultistring)">
            <summary>
            Constructs a new <see cref="T:NClap.Utilities.ColoredMultistring"/> by concatenating.
            </summary>
            <param name="prefix">The string to concatenate onto the front of the base
            multistring.</param>
            <param name="value">The base multistring.</param>
            <returns>The concatenation result, as a separate multistring.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.op_Addition(NClap.Utilities.ColoredMultistring,NClap.Utilities.ColoredMultistring)">
            <summary>
            Constructs a new <see cref="T:NClap.Utilities.ColoredMultistring"/> by concatenating.
            </summary>
            <param name="prefix">The first part.</param>
            <param name="suffix">The second part.</param>
            <returns>The concatenation result, as a separate multistring.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.FromString(System.String)">
            <summary>
            Wraps a string.
            </summary>
            <param name="value">The string to wrap.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.ToString">
            <summary>
            Extract the uncolored string content.
            </summary>
            <returns>The uncolored string content.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.IsEmpty">
            <summary>
            Checks if the multistring is empty.
            </summary>
            <returns>True if empty, false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.Replace(System.String,System.String)">
            <summary>
            Generate a new string, with existing instances of <paramref name="pattern"/>
            with <paramref name="replacement"/>.
            </summary>
            <param name="pattern">The pattern to search for.</param>
            <param name="replacement">The replacement.</param>
            <returns>The new string, with replacements made.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.Split(System.Char,System.StringSplitOptions)">
            <summary>
            Split the string by the indicated separator.
            </summary>
            <param name="separator">Separator for splitting.</param>
            <param name="options">Split options.</param>
            <returns>The split pieces of the string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.Substring(System.Int32,System.Int32)">
            <summary>
            Extract a substring.
            </summary>
            <param name="startIndex">Index to start from.</param>
            <param name="length">Count of characters to extract.</param>
            <returns>The substring.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.TrimEnd">
            <summary>
            Generate a new string from this one, with any trailing whitespace
            removed.
            </summary>
            <returns>The new string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Search within this string for any of the provided characters,
            starting from the specified index.
            </summary>
            <param name="chars">Characters to look for.</param>
            <param name="startIndex">Index of the character to start looking
            at.</param>
            <param name="count">The count of characters to consider.</param>
            <returns>The last index of any of the provided characters in
            the specified sub-range of the string, or -1 if no such
            character was found.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistring.CreateNewBuilder">
            <summary>
            Construct a builder that can generate a string of this type.
            </summary>
            <returns>A new builder.</returns>
        </member>
        <member name="T:NClap.Utilities.ColoredMultistringBuilder">
            <summary>
            Simplified, colored string version of StringBuilder.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredMultistringBuilder.Length">
            <summary>
            Retrieves the current length of the builder's contents.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredMultistringBuilder.Item(System.Int32)">
            <summary>
            Accesses the character at the specified index in the builder.
            </summary>
            <param name="index">0-based index into the builder.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(NClap.Utilities.ColoredString)">
            <summary>
            Append a colored string.
            </summary>
            <param name="value">The colored string to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(System.Collections.Generic.IEnumerable{NClap.Utilities.ColoredString})">
            <summary>
            Append the provided colored strings.
            </summary>
            <param name="values">The colored strings to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(NClap.Utilities.ColoredMultistring)">
            <summary>
            Append the contents of the provided multistring.
            </summary>
            <param name="value">The multistring to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(System.Collections.Generic.IEnumerable{NClap.Utilities.ColoredMultistring})">
            <summary>
            Append the contents of the provided multistrings.
            </summary>
            <param name="values">The multistrings to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.AppendLine">
            <summary>
            Append a newline.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.AppendLine(NClap.Utilities.ColoredString)">
            <summary>
            Append a colored string followed by a newline.
            </summary>
            <param name="value">The colored string to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.AppendLine(System.Collections.Generic.IEnumerable{NClap.Utilities.ColoredString})">
            <summary>
            Append the provided colored strings followed by a newline.
            </summary>
            <param name="values">The colored multistrings to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.AppendLine(NClap.Utilities.ColoredMultistring)">
            <summary>
            Append the contents of the provided multistring followed by a
            newline.
            </summary>
            <param name="value">The multistring to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.AppendLine(System.Collections.Generic.IEnumerable{NClap.Utilities.ColoredMultistring})">
            <summary>
            Append the contents of the provided multistrings followed by a
            newline.
            </summary>
            <param name="values">The multistrings to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.ToString">
            <summary>
            Converts the current contents of the builder to a bare string.
            </summary>
            <returns>The bare string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.ToMultistring">
            <summary>
            Converts the current contents of the builder to a colored
            multistring.
            </summary>
            <returns>The multistring.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(NClap.Utilities.IString)">
            <summary>
            Appends a new string to the end of this builder's current content.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(System.String)">
            <summary>
            Appends a new string to the end of this builder's current content.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Append(System.Char,System.Int32)">
            <summary>
            Appends the specified character to the end of this builder's current
            content, repeated the indicated number of times.
            </summary>
            <param name="c">The char to append.</param>
            <param name="count">The number of times to append it.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Generate">
            <summary>
            Generates a composed string from the contents of this builder.
            </summary>
            <returns>The composed string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters from the given starting
            index into the builder's current contents, writing the characters
            to the provided buffer (at the specified offset).
            </summary>
            <param name="startingIndex">0-based index at which to start reading
            from the builder.</param>
            <param name="buffer">Output buffer.</param>
            <param name="outputOffset">0-based index into the output buffer
            at which to start writing.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Insert(System.Int32,System.Char)">
            <summary>
            Inserts the given character at the specified index.
            </summary>
            <param name="index">0-based index.</param>
            <param name="c">The character to insert.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given string at the specified index.
            </summary>
            <param name="index">0-based index.</param>
            <param name="s">The string to insert.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Insert(System.Int32,NClap.Utilities.ColoredString)">
            <summary>
            Inserts the given string at the specified index.
            </summary>
            <param name="index">0-based index.</param>
            <param name="s">The string to insert.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of characters from the given index into
            the builder's contents.
            </summary>
            <param name="index">0-based index.</param>
            <param name="count">The number of characters to remove.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Clear">
            <summary>
            Clears the current contents of the builder.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ColoredMultistringBuilder.Truncate(System.Int32)">
            <summary>
            Truncates the contents of the builder to the specified length.
            </summary>
            <param name="newLength">New length, expressed as a character
            count.</param>
        </member>
        <member name="T:NClap.Utilities.ColoredString">
            <summary>
            A colored string intended for display on a console.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ColoredString.#ctor(System.String)">
            <summary>
            Convenience constructor that defaults the foreground and background
            colors.
            </summary>
            <param name="content">The string content.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredString.#ctor(System.String,System.Nullable{System.ConsoleColor})">
            <summary>
            Convenience constructor that defaults the background color.
            </summary>
            <param name="content">The string content.</param>
            <param name="foregroundColor">If present, the foreground color for
            the text; otherwise, the existing foreground color should be used
            to display the text.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredString.#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Primary constructor.
            </summary>
            <param name="content">The string content.</param>
            <param name="foregroundColor">If present, the foreground color for
            the text; otherwise, the existing foreground color should be used
            to display the text.</param>
            <param name="backgroundColor">If present, the background color for
            the text; otherwise, the existing background color should be used
            to display the text.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredString.#ctor(System.String,NClap.Utilities.TextColor)">
            <summary>
            Constructor that takes a <see cref="T:NClap.Utilities.TextColor"/> object.
            </summary>
            <param name="content">The string content.</param>
            <param name="color">The content's intended color.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredString.#ctor(System.String,System.Nullable{NClap.Utilities.TextColor})">
            <summary>
            Constructor that takes a nullable <see cref="T:NClap.Utilities.TextColor"/> object.
            </summary>
            <param name="content">The string content.</param>
            <param name="color">The content's intended color.</param>
        </member>
        <member name="P:NClap.Utilities.ColoredString.Empty">
            <summary>
            Empty string.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredString.Content">
            <summary>
            The string's content.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredString.ForegroundColor">
            <summary>
            If present, the foreground color for the text; otherwise, the
            existing foreground color should be used to display the text.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredString.BackgroundColor">
            <summary>
            If present, the background color for the text; otherwise, the
            existing background color should be used to display the text.
            </summary>
        </member>
        <member name="P:NClap.Utilities.ColoredString.Length">
            <summary>
            Length of the content of the string.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ColoredString.IsEmpty">
            <summary>
            Checks if the string is empty. Note that a string with no characters
            is considered empty, even if it contains color information.
            </summary>
            <returns>True if empty, false otherwise.</returns>
        </member>
        <member name="P:NClap.Utilities.ColoredString.Item(System.Int32)">
            <summary>
            Accesses a character in the string.
            </summary>
            <param name="index">Zero-based index of the character.</param>
            <returns>The character at the specified index.</returns>
            <returns>The indexed character.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.op_Implicit(NClap.Utilities.ColoredString)~System.String">
            <summary>
            Implicitly converts a ColoredString to a string by stripping
            color information.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredString.op_Implicit(System.String)~NClap.Utilities.ColoredString">
            <summary>
            Wraps an uncolored string.
            </summary>
            <param name="value">The value to wrap.</param>
        </member>
        <member name="M:NClap.Utilities.ColoredString.FromString(System.String)">
            <summary>
            Wraps an uncolored string.
            </summary>
            <param name="value">The value to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.op_Equality(NClap.Utilities.ColoredString,NClap.Utilities.ColoredString)">
            <summary>
            Compares two ColoredString objects.
            </summary>
            <param name="value">The first value.</param>
            <param name="otherValue">The second value.</param>
            <returns>True if they are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.op_Inequality(NClap.Utilities.ColoredString,NClap.Utilities.ColoredString)">
            <summary>
            Compares two ColoredString objects.
            </summary>
            <param name="value">The first value.</param>
            <param name="otherValue">The second value.</param>
            <returns>True if they are not equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.IsSameColorAs(NClap.Utilities.ColoredString)">
            <summary>
            Checks if this string has the same color as the provided string.
            </summary>
            <param name="value">The string to compare against.</param>
            <returns>True if the two strings have the same color; false otherwise.
            Does not otherwise compare contents.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.ToString">
            <summary>
            The string's content.
            </summary>
            <returns>The uncolored string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.GetHashCode">
            <summary>
            Computes the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.Equals(System.Object)">
            <summary>
            Compares the specified object against this object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.Equals(NClap.Utilities.ColoredString)">
            <summary>
            Compares the specified object against this object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredString.Equals(NClap.Utilities.ColoredString,System.StringComparison)">
            <summary>
            Compares the specified object against this object.
            </summary>
            <param name="value">The object to compare.</param>
            <param name="comparisonType">Type of comparison to perform.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="T:NClap.Utilities.ColoredStringBuilder">
            <summary>
            String builder for constructing colored strings.
            </summary>
        </member>
        <member name="T:NClap.Utilities.ColoredStringExtensionMethods">
            <summary>
            Extension methods for manipulating colored strings.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ColoredStringExtensionMethods.Transform(NClap.Utilities.ColoredString,System.Func{System.String,System.String})">
            <summary>
            Transform the given string into a new one, preserving color.
            </summary>
            <param name="s">The input string.</param>
            <param name="func">The function to apply.</param>
            <returns>The generated string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Utilities.ColoredStringExtensionMethods.WithContent(NClap.Utilities.ColoredString,System.String)">
            <summary>
            Take the color of the given string to produce a new one, but with the given
            content.
            </summary>
            <param name="s">The input string.</param>
            <param name="newContent">The new content to use.</param>
            <returns>The generated string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newContent"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Utilities.ColoredStringExtensionMethods.Substring(NClap.Utilities.ColoredString,System.Int32)">
            <summary>
            Returns a new string containing a substring of the given string.
            </summary>
            <param name="s">The string.</param>
            <param name="startIndex">The 0-based index to start from.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:NClap.Utilities.ColoredStringExtensionMethods.Substring(NClap.Utilities.ColoredString,System.Int32,System.Int32)">
            <summary>
            Returns a new string containing a substring of the given string.
            </summary>
            <param name="s">The string.</param>
            <param name="startIndex">The 0-based index to start from.</param>
            <param name="length">The length of the substring, expressed as
            a count of characters.</param>
            <returns>The new string.</returns>
        </member>
        <member name="T:NClap.Utilities.EnumerableUtilities">
            <summary>
            Assorted utilities for manipulating <see cref="T:System.Collections.IEnumerable"/> objects.
            </summary>
        </member>
        <member name="M:NClap.Utilities.EnumerableUtilities.InsertBetween``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produce a new enumeration consisting of all elements in the provided
            enumeration, with the given value copied between each adjacent pair.
            </summary>
            <typeparam name="T">The type of element in the enumeration.
            </typeparam>
            <param name="values">The enumeration.</param>
            <param name="valueToInsert">The value to insert.</param>
            <returns>The resulting enumeration.</returns>
        </member>
        <member name="M:NClap.Utilities.EnumerableUtilities.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens the provided enumeration of enumerations.
            </summary>
            <typeparam name="T">The innermost element type.</typeparam>
            <param name="values">The enumeration to flatten.</param>
            <returns>The resulting enumeration.</returns>
        </member>
        <member name="M:NClap.Utilities.EnumerableUtilities.Overlaps``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the two provided enumerations contain any members in
            common.
            </summary>
            <typeparam name="T">The element type of the enumerations.</typeparam>
            <param name="values">The first enumeration.</param>
            <param name="otherValues">The second enumeration.</param>
            <param name="comparer">The comparer implementation to use, or null
            to use the default.</param>
            <returns>true if the they contain any members in common; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.EnumerableUtilities.GetLast``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Retrieves the last element of the given list.
            </summary>
            <typeparam name="T">The list element type.</typeparam>
            <param name="values">The list.</param>
            <returns>The last element.</returns>
        </member>
        <member name="M:NClap.Utilities.EnumerableUtilities.GetLastOrDefault``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Retrieves the last element of the given list, if one exists;
            otherwise returns null.
            </summary>
            <typeparam name="T">The list element type.</typeparam>
            <param name="values">The list.</param>
            <returns>The last element, or null.</returns>
        </member>
        <member name="T:NClap.Utilities.FluentBuilder`1">
            <summary>
            Utility class for fluent builders that manipulate state of the given type.
            </summary>
            <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:NClap.Utilities.FluentBuilder`1.#ctor(`0)">
            <summary>
            Basic constructor.
            </summary>
            <param name="startingState">The starting state.</param>
        </member>
        <member name="M:NClap.Utilities.FluentBuilder`1.op_Implicit(NClap.Utilities.FluentBuilder{`0})~`0">
            <summary>
            Operator that allows implicit casting from a builder to its applied result.
            </summary>
            <param name="builder">Fluent builder to apply and generate state from.</param>
        </member>
        <member name="M:NClap.Utilities.FluentBuilder`1.op_Implicit(`0)~NClap.Utilities.FluentBuilder{`0}">
            <summary>
            Operator that allows implicitly forming a fluent builder from a starting
            state.
            </summary>
            <param name="state">Input state object to create a fluent builder from.</param>
        </member>
        <member name="M:NClap.Utilities.FluentBuilder`1.AddTransformer(System.Action{`0})">
            <summary>
            Appends a new transformer function.
            </summary>
            <param name="transformer">Function.</param>
        </member>
        <member name="M:NClap.Utilities.FluentBuilder`1.Apply">
            <summary>
            Applies all accumulated transformers, producing a final state.
            </summary>
            <returns>The final transformed state.</returns>
        </member>
        <member name="T:NClap.Utilities.GenericCollectionFactory">
            <summary>
            Factory for creating typed collections when types are not
            known at compile time.
            </summary>
        </member>
        <member name="M:NClap.Utilities.GenericCollectionFactory.CreateList(System.Type)">
            <summary>
            Creates an instance of <see cref="T:System.Collections.Generic.List`1"/> that can
            hold instance of the given type <paramref name="t"/>.
            </summary>
            <param name="t">Type of instance.</param>
            <returns>Constructed list.</returns>
        </member>
        <member name="M:NClap.Utilities.GenericCollectionFactory.ToArray(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates an array that may hold values of type <paramref name="t"/>
            with the values in given enumeration <paramref name="values"/>.
            </summary>
            <param name="values">Values to store.</param>
            <param name="t">Type for the array's elements.</param>
            <returns>The constructed and initialized array.</returns>
        </member>
        <member name="T:NClap.Utilities.IDeepCloneable`1">
            <summary>
            An interface representing an item that is deeply cloneable.
            </summary>
            <typeparam name="T">The type of the clone.</typeparam>
        </member>
        <member name="M:NClap.Utilities.IDeepCloneable`1.DeepClone">
            <summary>
            Creates a deep clone of the item, where no data references are shared.
            Changes made to the clone do not affect the original, and vice versa.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="T:NClap.Utilities.IMutableMemberInfo">
            <summary>
            Abstract interface for interacting with mutable members of types
            (e.g. fields and properties).
            </summary>
        </member>
        <member name="P:NClap.Utilities.IMutableMemberInfo.MemberInfo">
            <summary>
            Retrieve the member's base member info.
            </summary>
        </member>
        <member name="P:NClap.Utilities.IMutableMemberInfo.IsReadable">
            <summary>
            True if the member can be read at arbitrary points during execution;
            false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.IMutableMemberInfo.IsWritable">
            <summary>
            True if the member can be written to at arbitrary points during
            execution; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.IMutableMemberInfo.MemberType">
            <summary>
            The type of the member.
            </summary>
        </member>
        <member name="M:NClap.Utilities.IMutableMemberInfo.GetValue(System.Object)">
            <summary>
            Retrieve the value associated with this field in the specified
            containing object.
            </summary>
            <param name="containingObject">Object to look in.</param>
            <returns>The field's value.</returns>
        </member>
        <member name="M:NClap.Utilities.IMutableMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value associated with this field in the specified
            containing object.
            </summary>
            <param name="containingObject">Object to look in.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:NClap.Utilities.ConsoleModifierKeys">
            <summary>
            Modifier flags for a console key.
            </summary>
        </member>
        <member name="F:NClap.Utilities.ConsoleModifierKeys.None">
            <summary>
            No modifiers present.
            </summary>
        </member>
        <member name="F:NClap.Utilities.ConsoleModifierKeys.Shift">
            <summary>
            The shift key was pressed.
            </summary>
        </member>
        <member name="F:NClap.Utilities.ConsoleModifierKeys.Control">
            <summary>
            The control key was pressed.
            </summary>
        </member>
        <member name="F:NClap.Utilities.ConsoleModifierKeys.Alt">
            <summary>
            The alt key was pressed.
            </summary>
        </member>
        <member name="T:NClap.Utilities.InputUtilities">
            <summary>
            Utilities for manipulating input (e.g. key input).
            </summary>
        </member>
        <member name="M:NClap.Utilities.InputUtilities.TryGetSingleChar(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Tries to convert the indicated key (with modifiers) to the generated
            character, in accordance with the currently active keyboard layout.
            </summary>
            <param name="key">The key to translate.</param>
            <param name="modifiers">Key modifiers.</param>
            <returns>The character, if one exists; otherwise null.</returns>
        </member>
        <member name="M:NClap.Utilities.InputUtilities.GetChars(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Converts the indicated key (with modifiers) to the generated
            characters, in accordance with the currently active keyboard
            layout.
            </summary>
            <param name="key">The key to translate.</param>
            <param name="modifiers">Key modifiers.</param>
            <returns>The characters.</returns>
        </member>
        <member name="M:NClap.Utilities.InputUtilities.GetCharsPortable(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Converts the indicated key (with modifiers) to the generated
            characters, in accordance with the currently active keyboard
            layout. Implementation is portable and expected to be supported
            on all host platforms.
            </summary>
            <param name="key">The key to translate.</param>
            <param name="modifiers">Key modifiers.</param>
            <returns>The characters.</returns>
        </member>
        <member name="T:NClap.Utilities.IString">
            <summary>
            Abstract interface for objects that represent string content.
            </summary>
        </member>
        <member name="P:NClap.Utilities.IString.Item(System.Int32)">
            <summary>
            Accesses a character in the string.
            </summary>
            <param name="index">Zero-based index of the character.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="P:NClap.Utilities.IString.Length">
            <summary>
            Length of the string, counted in characters.
            </summary>
        </member>
        <member name="M:NClap.Utilities.IString.Replace(System.String,System.String)">
            <summary>
            Generate a new string, with existing instances of <paramref name="pattern"/>
            with <paramref name="replacement"/>.
            </summary>
            <param name="pattern">The pattern to search for.</param>
            <param name="replacement">The replacement.</param>
            <returns>The new string, with replacements made.</returns>
        </member>
        <member name="M:NClap.Utilities.IString.Split(System.Char,System.StringSplitOptions)">
            <summary>
            Split the string by the indicated separator.
            </summary>
            <param name="separator">Separator for splitting.</param>
            <param name="options">Split options.</param>
            <returns>The split pieces of the string.</returns>
        </member>
        <member name="M:NClap.Utilities.IString.Substring(System.Int32,System.Int32)">
            <summary>
            Extract a substring.
            </summary>
            <param name="startIndex">Index to start from.</param>
            <param name="length">Count of characters to extract.</param>
            <returns>The substring.</returns>
        </member>
        <member name="M:NClap.Utilities.IString.TrimEnd">
            <summary>
            Generate a new string from this one, with any trailing whitespace
            removed.
            </summary>
            <returns>The new string.</returns>
        </member>
        <member name="M:NClap.Utilities.IString.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Search within this string for any of the provided characters,
            starting from the specified index.
            </summary>
            <param name="chars">Characters to look for.</param>
            <param name="startIndex">Index of the character to start looking
            at.</param>
            <param name="count">The count of characters to consider.</param>
            <returns>The last index of any of the provided characters in
            the specified sub-range of the string, or -1 if no such
            character was found.</returns>
        </member>
        <member name="M:NClap.Utilities.IString.CreateNewBuilder">
            <summary>
            Construct a builder that can generate a string of this type.
            </summary>
            <returns>A new builder.</returns>
        </member>
        <member name="T:NClap.Utilities.IStringBuilder">
            <summary>
            Abstract interface for interacting with a string builder.
            </summary>
        </member>
        <member name="P:NClap.Utilities.IStringBuilder.Item(System.Int32)">
            <summary>
            Accesses the character at the specified index in the builder.
            </summary>
            <param name="index">0-based index into the builder.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="P:NClap.Utilities.IStringBuilder.Length">
            <summary>
            Retrieves the current length of the builder's contents.
            </summary>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters from the given starting
            index into the builder's current contents, writing the characters
            to the provided buffer (at the specified offset).
            </summary>
            <param name="startingIndex">0-based index at which to start reading
            from the builder.</param>
            <param name="buffer">Output buffer.</param>
            <param name="outputOffset">0-based index into the output buffer
            at which to start writing.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Insert(System.Int32,System.Char)">
            <summary>
            Inserts the given character at the specified index.
            </summary>
            <param name="index">0-based index.</param>
            <param name="c">The character to insert.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given string at the specified index.
            </summary>
            <param name="index">0-based index.</param>
            <param name="s">The string to insert.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Append(NClap.Utilities.IString)">
            <summary>
            Appends a new string to the end of this builder's current content.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Append(System.String)">
            <summary>
            Appends a new string to the end of this builder's current content.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Append(System.Char,System.Int32)">
            <summary>
            Appends the specified character to the end of this builder's current
            content, repeated the indicated number of times.
            </summary>
            <param name="c">The char to append.</param>
            <param name="count">The number of times to append it.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of characters from the given index into
            the builder's contents.
            </summary>
            <param name="index">0-based index.</param>
            <param name="count">The number of characters to remove.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Clear">
            <summary>
            Clears the current contents of the builder.
            </summary>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Truncate(System.Int32)">
            <summary>
            Truncates the contents of the builder to the specified length.
            </summary>
            <param name="newLength">New length, expressed as a character
            count.</param>
        </member>
        <member name="M:NClap.Utilities.IStringBuilder.Generate">
            <summary>
            Generates a composed string from the contents of this builder.
            </summary>
            <returns>The composed string.</returns>
        </member>
        <member name="T:NClap.Utilities.MaybeUtilities">
            <summary>
            Extension methods for <see cref="T:NClap.Utilities.Maybe`1"/> objects.
            </summary>
        </member>
        <member name="M:NClap.Utilities.MaybeUtilities.WhereHasValue``1(System.Collections.Generic.IEnumerable{NClap.Utilities.Maybe{``0}})">
            <summary>
            From the given enumeration of <see cref="T:NClap.Utilities.Maybe`1"/> values, yield an enumeration
            with only the values present (and unwrap them from their <see cref="T:NClap.Utilities.Maybe`1"/>
            objects).
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="values">Input enumeration.</param>
            <returns>The resulting enumeration.</returns>
        </member>
        <member name="T:NClap.Utilities.Maybe`1">
            <summary>
            A maybe type. Represents a value or a lack of value.
            </summary>
            <typeparam name="T">Type of inner values.</typeparam>
        </member>
        <member name="M:NClap.Utilities.Maybe`1.#ctor(`0)">
            <summary>
            Constructs an instance with a value present.
            </summary>
            <param name="value">Value present; may be null.</param>
        </member>
        <member name="M:NClap.Utilities.Maybe`1.op_Implicit(`0)~NClap.Utilities.Maybe{`0}">
            <summary>
            Implicit operator that allows coercing from a value to an object
            that wraps it.
            </summary>
            <param name="value">Value to wrap.</param>
        </member>
        <member name="M:NClap.Utilities.Maybe`1.op_Implicit(NClap.Utilities.None)~NClap.Utilities.Maybe{`0}">
            <summary>
            Implicit operator that allows coercing from a <see cref="T:NClap.Utilities.None"/>
            object.
            </summary>
            <param name="none">The given none object.</param>
        </member>
        <member name="P:NClap.Utilities.Maybe`1.HasValue">
            <summary>
            Indicates whether or not a value is present in this object.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Maybe`1.IsNone">
            <summary>
            Indicates whether or not a value is *not* present in this object.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Maybe`1.Value">
            <summary>
            Retrieves the value present in this object. An exception is thrown if
            no value is present.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when no value is present
            </exception>.
        </member>
        <member name="M:NClap.Utilities.Maybe`1.GetValueOrDefault(`0)">
            <summary>
            Tries to retrieve the value present in this object; if no value is
            present, then the indicated default value is returned.
            </summary>
            <param name="defaultValue">Default value to return when this object
            does not hold a value.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="T:NClap.Utilities.MutableFieldInfo">
            <summary>
            Implementation of IMutableFieldInfo for fields.
            </summary>
        </member>
        <member name="M:NClap.Utilities.MutableFieldInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructs a new object from FieldInfo.
            </summary>
            <param name="field">Info about the field.</param>
        </member>
        <member name="P:NClap.Utilities.MutableFieldInfo.MemberInfo">
            <summary>
            Retrieve the member's base member info.
            </summary>
        </member>
        <member name="P:NClap.Utilities.MutableFieldInfo.IsReadable">
            <summary>
            True if the member can be read at arbitrary points during execution;
            false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.MutableFieldInfo.IsWritable">
            <summary>
            True if the member can be written to at arbitrary points during
            execution; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.MutableFieldInfo.MemberType">
            <summary>
            The type of the member.
            </summary>
        </member>
        <member name="M:NClap.Utilities.MutableFieldInfo.GetValue(System.Object)">
            <summary>
            Retrieve the value associated with this field in the specified
            containing object.
            </summary>
            <param name="containingObject">Object to look in.</param>
            <returns>The field's value.</returns>
        </member>
        <member name="M:NClap.Utilities.MutableFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value associated with this field in the specified
            containing object.
            </summary>
            <param name="containingObject">Object to look in.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:NClap.Utilities.MutablePropertyInfo">
            <summary>
            Implementation of IMutableFieldInfo for properties.
            </summary>
        </member>
        <member name="M:NClap.Utilities.MutablePropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructs a new object from PropertyInfo.
            </summary>
            <param name="property">Info about the property.</param>
        </member>
        <member name="P:NClap.Utilities.MutablePropertyInfo.MemberInfo">
            <summary>
            Retrieve the member's base member info.
            </summary>
        </member>
        <member name="P:NClap.Utilities.MutablePropertyInfo.IsReadable">
            <summary>
            True if the member can be read at arbitrary points during execution;
            false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.MutablePropertyInfo.IsWritable">
            <summary>
            True if the member can be written to at arbitrary points during
            execution; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.MutablePropertyInfo.MemberType">
            <summary>
            The type of the member.
            </summary>
        </member>
        <member name="M:NClap.Utilities.MutablePropertyInfo.GetValue(System.Object)">
            <summary>
            Retrieve the value associated with this field in the specified
            containing object.
            </summary>
            <param name="containingObject">Object to look in.</param>
            <returns>The field's value.</returns>
        </member>
        <member name="M:NClap.Utilities.MutablePropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value associated with this field in the specified
            containing object.
            </summary>
            <param name="containingObject">Object to look in.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:NClap.Utilities.None">
            <summary>
            Utility for constructing <see cref="T:NClap.Utilities.Maybe`1"/> objects with no contained
            values.
            </summary>
        </member>
        <member name="T:NClap.Utilities.PropertyWithSimulatedFallback`1">
            <summary>
            Helper class to encapsulate a property that may legitimately not be retrievable or
            mutable in all scenarios, but for which it's important for calling code to receive
            some syntactically valid value.
            </summary>
            <typeparam name="T">Type of the property\'s value</typeparam>
        </member>
        <member name="M:NClap.Utilities.PropertyWithSimulatedFallback`1.#ctor(System.Func{`0},System.Action{`0},System.Predicate{System.Exception},`0,System.Predicate{`0})">
            <summary>
            Primary constructor.
            </summary>
            <param name="getter">Inner function to invoke to get the value of the property.</param>
            <param name="setter">Inner action to invoke to set the value of the property.</param>
            <param name="fallbackFilter">Filter predicate that will be used to decide if an
            exception thrown by <paramref name="getter"/> or <paramref name="setter"/> will be
            caught and wrapped with the simulated fallback.  If this predicate returns true
            for the exception that was thrown, then it will be caught and wrapped; if it returns
            false, then this object will not catch the exception and it will be passed back
            up the stack.</param>
            <param name="initialFallbackValue">The default initial value to be used in fallback cases.</param>
            <param name="fallbackValidator">Optionally provides a predicate to validate input values
            in fallback cases.</param>
        </member>
        <member name="P:NClap.Utilities.PropertyWithSimulatedFallback`1.Value">
            <summary>
            The value represented by this object.
            </summary>
        </member>
        <member name="T:NClap.Utilities.ReflectionUtilities">
            <summary>
            Utilities useful in conjunction with .NET's reflection facilities.
            </summary>
        </member>
        <member name="M:NClap.Utilities.ReflectionUtilities.ToMutableMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Constructs a <see cref="T:NClap.Utilities.IMutableMemberInfo"/> object from a
            <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The mutable member info.</returns>
        </member>
        <member name="M:NClap.Utilities.ReflectionUtilities.GetFieldsAndProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Retrieves the fields and properties from the provided type.
            </summary>
            <param name="type">Type to look in.</param>
            <param name="bindingFlags">Binding flags to use during search.
            </param>
            <returns>The fields and properties.</returns>
        </member>
        <member name="M:NClap.Utilities.ReflectionUtilities.GetDefaultValue(System.Type)">
            <summary>
            Constructs an instance of the provided type's default value.
            </summary>
            <param name="type">Type to get default for.</param>
            <returns>The type's default value.</returns>
        </member>
        <member name="M:NClap.Utilities.ReflectionUtilities.GetDefaultValue``1">
            <summary>
            Wraps default(T) into a method.
            </summary>
            <typeparam name="T">Type to get default value for.</typeparam>
            <returns>The type's default value.</returns>
        </member>
        <member name="M:NClap.Utilities.ReflectionUtilities.IsImplicitlyConvertibleFrom(System.Type,System.Object)">
            <summary>
            Checks if the specified type is implicitly convertible from the
            specified value.
            </summary>
            <param name="destType">Destination type.</param>
            <param name="sourceValue">Source value.</param>
            <returns>True if the type is implicitly convertible; false
            otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.ReflectionUtilities.TryConvertFrom(System.Type,System.Object,System.Object@)">
            <summary>
            Tries to convert the specified value to the specified type.
            </summary>
            <param name="destType">The destination type.</param>
            <param name="sourceValue">The value to convert.</param>
            <param name="convertedValue">On success, receives the converted
            value.</param>
            <returns>True if the conversion succeeded; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Utilities.Some">
            <summary>
            Convenience class for constructing <see cref="T:NClap.Utilities.Maybe`1" /> values.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Some.Of``1(``0)">
            <summary>
            Constructs an object with a value present.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The constructed object.</returns>
        </member>
        <member name="T:NClap.Utilities.StringUtilities">
            <summary>
            Assorted string utilities.
            </summary>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.AppendWrappedLine(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Append some text to the provided StringBuilder, wrapping text at
            the given width, and indenting wrapped text with the given
            indentation width.
            </summary>
            <param name="builder">StringBuilder to append to.</param>
            <param name="text">Text to append.</param>
            <param name="width">Maximum width of the text, in number of
            characters.</param>
            <param name="blockIndent">The number of characters to block-indent
            all lines. Use 0 to indicate no block indentation should occur.</param>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.AppendWrapped(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Append some text to the provided StringBuilder, wrapping text at
            the given width, and indenting wrapped text with the given
            indentation width.
            </summary>
            <param name="builder">StringBuilder to append to.</param>
            <param name="text">Text to append.</param>
            <param name="width">Maximum width of the text, in number of
            characters.</param>
            <param name="blockIndent">The number of characters to block-indent
            all lines. Use 0 to indicate no block indentation should occur.</param>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.Wrap(NClap.Utilities.ColoredString,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wrap the provided text at the given width, indenting it with the
            given indentation width.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="width">Maximum width of the text, in number of
            characters.</param>
            <param name="blockIndent">The number of characters to block-indent
            all lines. Use 0 to indicate no block indentation should occur.</param>
            <param name="hangingIndent">The number of characters to hanging-indent
            the text; all lines after the first line are affected, and the first
            line is left unmodified.  Use 0 to indicate no hanging indentation
            should occur.</param>
            <returns>The wrapped text.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.Wrap(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wrap the provided text at the given width, indenting it with the
            given indentation width.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="width">Maximum width of the text, in number of
            characters.</param>
            <param name="blockIndent">The number of characters to block-indent
            all lines. Use 0 to indicate no block indentation should occur.</param>
            <param name="hangingIndent">The number of characters to hanging-indent
            the text; all lines after the first line are affected, and the first
            line is left unmodified.  Use 0 to indicate no hanging indentation
            should occur.</param>
            <returns>The wrapped text.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.Wrap(NClap.Utilities.IString,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wrap the provided text at the given width, indenting it with the
            given indentation width.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="width">Maximum width of the text, in number of
            characters.</param>
            <param name="blockIndent">The number of characters to block-indent
            all lines. Use 0 to indicate no block indentation should occur.</param>
            <param name="hangingIndent">The number of characters to hanging-indent
            the text; all lines after the first line are affected, and the first
            line is left unmodified.  Use 0 to indicate no hanging indentation
            should occur.</param>
            <returns>The wrapped text.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.QuoteIfNeeded(System.String,System.Char)">
            <summary>
            Quotes the provided string if it contains whitespace.
            </summary>
            <param name="value">String to conditionally quote.</param>
            <param name="quoteChar">Quote character to use.</param>
            <returns>If the input string contains whitespace, the quoted version
            of the string; otherwise, the input string.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.Tokenize(System.String,NClap.Utilities.TokenizerOptions)">
            <summary>
            Tokenizes the provided input text line, observing quotes.
            </summary>
            <param name="line">Input line to parse.</param>
            <param name="options">Options for tokenizing.</param>
            <returns>Enumeration of tokens.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.FormatInColumns(System.Collections.Generic.IReadOnlyList{System.String},System.Int32)">
            <summary>
            Formats the provided strings into a single, columnized string.
            </summary>
            <param name="values">The values to format.</param>
            <param name="screenBufferWidth">The width of the intended output
            screen buffer, in characters.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.ToHyphenatedLowerCase(System.String)">
            <summary>
            Make a best effort to convert a string to being a hyphenated,
            lower-case string.
            </summary>
            <param name="s">The input string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.ToSnakeCase(System.String)">
            <summary>
            Make a best effort to convert a string to being a snake-cased
            string.
            </summary>
            <param name="s">The input string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:NClap.Utilities.StringUtilities.GetDamerauLevenshteinEditDistance(System.String,System.String)">
             <summary>
             Computes the Damerau-Levenshtein edit distance between two strings.
            
             Source: https://gist.github.com/wickedshimmy/449595.
            
             Copyright (c) 2010, 2012 Matt Enright
             Permission is hereby granted, free of charge, to any person obtaining
             a copy of this software and associated documentation files (the
             "Software"), to deal in the Software without restriction, including
             without limitation the rights to use, copy, modify, merge, publish,
             distribute, sublicense, and/or sell copies of the Software, and to
             permit persons to whom the Software is furnished to do so, subject to
             the following conditions:
            
             The above copyright notice and this permission notice shall be
             included in all copies or substantial portions of the Software.
            
             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
             EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
             MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
             NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
             LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
             OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
             WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
             </summary>
             <param name="original">Original string.</param>
             <param name="modified">Modified string.</param>
             <returns>Edit instance.</returns>
        </member>
        <member name="T:NClap.Utilities.StringWrapper">
            <summary>
            Simple wrapper, implementing <see cref="T:NClap.Utilities.IString"/> for plain strings.
            </summary>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="s">String to wrap.</param>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.op_Implicit(System.String)~NClap.Utilities.StringWrapper">
            <summary>
            Implicit conversion operator to wrap a string.
            </summary>
            <param name="s">String to wrap.</param>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.op_Implicit(NClap.Utilities.StringWrapper)~System.String">
            <summary>
            Implicit conversion operator to unwrap a string.
            </summary>
            <param name="s">String to unwrap.</param>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.ToString">
            <summary>
            Retrieves inner string content.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="P:NClap.Utilities.StringWrapper.Content">
            <summary>
            Inner string content.
            </summary>
        </member>
        <member name="P:NClap.Utilities.StringWrapper.Item(System.Int32)">
            <summary>
            Accesses a character in the string.
            </summary>
            <param name="index">Zero-based index of the character.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="P:NClap.Utilities.StringWrapper.Length">
            <summary>
            Length of the string, counted in characters.
            </summary>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.Replace(System.String,System.String)">
            <summary>
            Generate a new string, with existing instances of <paramref name="pattern"/>
            with <paramref name="replacement"/>.
            </summary>
            <param name="pattern">The pattern to search for.</param>
            <param name="replacement">The replacement.</param>
            <returns>The new string, with replacements made.</returns>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.Split(System.Char,System.StringSplitOptions)">
            <summary>
            Split the string by the indicated separator.
            </summary>
            <param name="separator">Separator for splitting.</param>
            <param name="options">Split options.</param>
            <returns>The split pieces of the string.</returns>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.Substring(System.Int32,System.Int32)">
            <summary>
            Extract a substring.
            </summary>
            <param name="startIndex">Index to start from.</param>
            <param name="length">Count of characters to extract.</param>
            <returns>The substring.</returns>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.TrimEnd">
            <summary>
            Generate a new string from this one, with any trailing whitespace
            removed.
            </summary>
            <returns>The new string.</returns>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Search within this string for any of the provided characters,
            starting from the specified index.
            </summary>
            <param name="chars">Characters to look for.</param>
            <param name="startIndex">Index of the character to start looking
            at.</param>
            <param name="count">The count of characters to consider.</param>
            <returns>The last index of any of the provided characters in
            the specified sub-range of the string, or -1 if no such
            character was found.</returns>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.CreateNewBuilder">
            <summary>
            Construct a builder that can generate a string of this type.
            </summary>
            <returns>A new builder.</returns>
        </member>
        <member name="M:NClap.Utilities.StringWrapper.CreateBuilder">
            <summary>
            Construct a builder that can generate a string of this type.
            </summary>
            <returns>A new builder.</returns>
        </member>
        <member name="T:NClap.Utilities.Substring">
            <summary>
            Represents a subsection of a string object.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Substring.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a substring object from a string and starting offset.
            </summary>
            <param name="value">The base string object.</param>
            <param name="startingOffset">The starting offset at which the
            substring starts in the provided string.</param>
        </member>
        <member name="M:NClap.Utilities.Substring.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a substring object from a string, starting offset, and
            length.
            </summary>
            <param name="value">The base string object.</param>
            <param name="startingOffset">The starting offset at which the
            substring starts in the provided string.</param>
            <param name="length">The number of characters in the substring.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:NClap.Utilities.Substring.#ctor(NClap.Utilities.Substring,System.Int32)">
            <summary>
            Creates a substring from a substring.
            </summary>
            <param name="substring">The substring to create a substring from.
            </param>
            <param name="startingOffset">The starting offset, relative to the
            containing substring.</param>
        </member>
        <member name="M:NClap.Utilities.Substring.#ctor(NClap.Utilities.Substring,System.Int32,System.Int32)">
            <summary>
            Creates a substring from a substring.
            </summary>
            <param name="substring">The substring to create a substring from.
            </param>
            <param name="startingOffset">The starting offset, relative to the
            containing substring.</param>
            <param name="length">The length of the new substring.</param>
        </member>
        <member name="P:NClap.Utilities.Substring.Base">
            <summary>
            The full string.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Substring.StartingOffset">
            <summary>
            The offset in the containing string at which this substring starts.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Substring.EndingOffset">
            <summary>
            The offset in the containing string at which the substring ends.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Substring.Length">
            <summary>
            The length of the substring, in characters.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Substring.op_Equality(NClap.Utilities.Substring,NClap.Utilities.Substring)">
            <summary>
            Checks two substrings for equality.
            </summary>
            <param name="value">A substring.</param>
            <param name="otherValue">Another substring.</param>
            <returns>True if the values are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.Substring.op_Inequality(NClap.Utilities.Substring,NClap.Utilities.Substring)">
            <summary>
            Checks two substrings for inequality.
            </summary>
            <param name="value">A substring.</param>
            <param name="otherValue">Another substring.</param>
            <returns>True if the values are not equal; false otherwise.
            </returns>
        </member>
        <member name="M:NClap.Utilities.Substring.ToString">
            <summary>
            Converts the object into its own string object.
            </summary>
            <returns>The substring, as a string.</returns>
        </member>
        <member name="M:NClap.Utilities.Substring.Equals(System.Object)">
            <summary>
            Checks for equality against another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is a substring, and if it's
            equal to this one; false otherwise.
            </returns>
        </member>
        <member name="M:NClap.Utilities.Substring.GetHashCode">
            <summary>
            Generate a hash code for the value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NClap.Utilities.Substring.Equals(NClap.Utilities.Substring)">
            <summary>
            Checks for equality against another substring.
            </summary>
            <param name="other">The other substring.</param>
            <returns>True if the substrings are equal; false otherwise.
            </returns>
        </member>
        <member name="M:NClap.Utilities.Substring.IndexOf(System.Char)">
            <summary>
            Looks for the first occurrence of the specified character in the
            substring.
            </summary>
            <param name="value">The character to look for.</param>
            <returns>On success, the 0-based index of the first occurrence of
            the character, expressed as an offset into the outer containing
            string (not the substring's start); otherwise, when the character
            does not exist in the substring, a negative integer is returned.
            </returns>
        </member>
        <member name="M:NClap.Utilities.Substring.Contains(System.Char)">
            <summary>
            Checks if the substring contains the specified character.
            </summary>
            <param name="value">The character to look for.</param>
            <returns>True if the character was found, false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.Substring.Contains(System.Func{System.Char,System.Boolean})">
            <summary>
            Checks if the substring contains a character that passes the
            provided filter.
            </summary>
            <param name="func">The function to invoke on each character in the
            substring.</param>
            <returns>True if the character was found, false otherwise.</returns>
        </member>
        <member name="T:NClap.Utilities.TextColor">
            <summary>
            Encapsulates text color.
            </summary>
        </member>
        <member name="P:NClap.Utilities.TextColor.Foreground">
            <summary>
            Optionally provides foreground color.  If not provided, indicates
            agnosticism toward foregound color.
            </summary>
        </member>
        <member name="P:NClap.Utilities.TextColor.Background">
            <summary>
            Optionally provides background color.  If not provided, indicates
            agnosticism toward background color.
            </summary>
        </member>
        <member name="M:NClap.Utilities.TextColor.Equals(System.Object)">
            <summary>
            Compares the specified object against this object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.TextColor.Equals(NClap.Utilities.TextColor)">
            <summary>
            Compares the specified object against this object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.TextColor.GetHashCode">
            <summary>
            Generate a hash code for the value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NClap.Utilities.TextColor.op_Equality(NClap.Utilities.TextColor,NClap.Utilities.TextColor)">
            <summary>
            Compares the specified objects.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.TextColor.op_Inequality(NClap.Utilities.TextColor,NClap.Utilities.TextColor)">
            <summary>
            Compares the specified objects.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns>True if the objects are not equal; false otherwise.</returns>
        </member>
        <member name="T:NClap.Utilities.Token">
            <summary>
            Represents a token from a token.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Token.#ctor(NClap.Utilities.Substring)">
            <summary>
            Constructs a token object.
            </summary>
            <param name="contents">The token's contents.</param>
        </member>
        <member name="M:NClap.Utilities.Token.#ctor(NClap.Utilities.Substring,System.Boolean,System.Boolean)">
            <summary>
            Constructs a token object.
            </summary>
            <param name="contents">The token's contents.</param>
            <param name="startsWithQuote">True if the token is immediately
            preceded by an opening quote; false otherwise.</param>
            <param name="endsWithQuote">True if the token is immediately
            succeeded by an ending quote; false otherwise.</param>
        </member>
        <member name="P:NClap.Utilities.Token.Contents">
            <summary>
            The (unquoted) contents of the token.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.StartsWithQuote">
            <summary>
            True if the token starts with a quote; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.EndsWithQuote">
            <summary>
            True if the token ends with a quote; false otherwise.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.InnerStartingOffset">
            <summary>
            Starting offset of the token.  If the token starts with quotes,
            the offset of the first character after the starting quotes is
            returned.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.InnerEndingOffset">
            <summary>
            Ending offset of the token.  If the token ends with quotes, the
            ending offset of the last character before the ending quotes is
            returned.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.InnerLength">
            <summary>
            Length of the token, excluding any quotes.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.OuterStartingOffset">
            <summary>
            Starting offset of the token.  If the token starts with quotes,
            the starting offset of the starting quotes is returned.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.OuterEndingOffset">
            <summary>
            Ending offset of the token.  If the token ends with quotes,
            the ending offset of the ending quotes is returned.
            </summary>
        </member>
        <member name="P:NClap.Utilities.Token.OuterLength">
            <summary>
            Length of the token, including any quotes.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Token.op_Equality(NClap.Utilities.Token,NClap.Utilities.Token)">
            <summary>
            Checks two tokens for equality.
            </summary>
            <param name="value">A token.</param>
            <param name="otherValue">Another token.</param>
            <returns>True if the values are equal; false otherwise.</returns>
        </member>
        <member name="M:NClap.Utilities.Token.op_Inequality(NClap.Utilities.Token,NClap.Utilities.Token)">
            <summary>
            Checks two tokens for inequality.
            </summary>
            <param name="value">A token.</param>
            <param name="otherValue">Another token.</param>
            <returns>True if the values are not equal; false otherwise.
            </returns>
        </member>
        <member name="M:NClap.Utilities.Token.Equals(System.Object)">
            <summary>
            Checks for equality against another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is a substring, and if it's
            equal to this one; false otherwise.
            </returns>
        </member>
        <member name="M:NClap.Utilities.Token.GetHashCode">
            <summary>
            Generate a hash code for the value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NClap.Utilities.Token.ToString">
            <summary>
            Converts the object into its own string object.
            </summary>
            <returns>The token, as a string.</returns>
        </member>
        <member name="M:NClap.Utilities.Token.Equals(NClap.Utilities.Token)">
            <summary>
            Checks for equality against another token.
            </summary>
            <param name="other">The other token.</param>
            <returns>True if the tokens are equal; false otherwise.
            </returns>
        </member>
        <member name="T:NClap.Utilities.TokenizerOptions">
            <summary>
            Options for tokenizing command lines.
            </summary>
        </member>
        <member name="F:NClap.Utilities.TokenizerOptions.None">
            <summary>
            Do not apply other policy options.
            </summary>
        </member>
        <member name="F:NClap.Utilities.TokenizerOptions.AllowPartialInput">
            <summary>
            Allow tokenizing of partial (incomplete) input lines; this includes
            ignoring errors related to unmatched quotes around the last token.
            </summary>
        </member>
        <member name="F:NClap.Utilities.TokenizerOptions.HandleDoubleQuoteAsTokenDelimiter">
            <summary>
            Handle double quote character as a token delimiter (allowing embedded
            whitespace within the token.
            </summary>
        </member>
        <member name="F:NClap.Utilities.TokenizerOptions.HandleSingleQuoteAsTokenDelimiter">
            <summary>
            Handle single quote character as a token delimiter (allowing embedded
            whitespace within the token.
            </summary>
        </member>
        <member name="T:NClap.Utilities.TypeUtilities">
            <summary>
            Extension methods for manipulating <see cref="T:System.Type"/> objects.
            </summary>
        </member>
        <member name="M:NClap.Utilities.TypeUtilities.IsEffectivelySameAs(System.Type,System.Type)">
            <summary>
            Checks if two types are effectively the same.
            </summary>
            <param name="type">First type.</param>
            <param name="otherType">Second type.</param>
            <returns>True if the two types are effectively the same.</returns>
        </member>
        <member name="M:NClap.Utilities.TypeUtilities.GetParameterlessConstructor(System.Type)">
            <summary>
            Tries to retrieve a parameterless constructor for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The constructor if found, or null if not found.</returns>
        </member>
        <member name="M:NClap.Utilities.TypeUtilities.GetConstructor``1(System.Type,System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Retrieves a function that invokes the constructor of the given type that takes 0 or more
            of the possible arguments provided.
            </summary>
            <typeparam name="T">Required return value type.</typeparam>
            <param name="type">Type of the constructor.</param>
            <param name="possibleArgs">Possible arguments.</param>
            <param name="considerParameterlessConstructor">True to consider
            parameterless constructors; false to ignore them.</param>
            <returns>The wrapped function.</returns>
        </member>
        <member name="T:NClap.Utilities.Windows.InputUtilities">
            <summary>
            Windows-specific input utilities.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Windows.InputUtilities.GetChars(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Converts the indicated key (with modifiers) to the generated
            characters, in accordance with the currently active keyboard
            layout.
            </summary>
            <param name="key">The key to translate.</param>
            <param name="modifiers">Key modifiers.</param>
            <returns>The characters.</returns>
        </member>
        <member name="T:NClap.Utilities.Windows.NativeMethods">
            <summary>
            Wrapper for native methods only available on traditional Windows platforms.
            </summary>
        </member>
        <member name="M:NClap.Utilities.Windows.NativeMethods.ToUnicode(System.UInt32,System.UInt32,System.Byte[],System.Char[],System.Int32,System.UInt32)">
            <summary>
            Extracts a Unicode character from a key press.
            </summary>
            <param name="wVirtKey">Virtual key.</param>
            <param name="wScanCode">Key scan code.</param>
            <param name="lpKeyState">Current modifiers key state.</param>
            <param name="pwszBuff">On success receives extracted characters.</param>
            <param name="cchBuff">Maximum number of characters to retrieve.</param>
            <param name="wFlags">Flags.</param>
            <returns>On success, returns number of characters extracted; otherwise zero
            or a negative number.</returns>
        </member>
    </members>
</doc>
